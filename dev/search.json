[{"path":"https://mc-stan.org/projpred/dev/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to projpred","title":"Contributing to projpred","text":"outlines propose change projpred based similar instructions tidyverse packages, including contributing guidelines generated usethis::use_tidy_contributing().","code":""},{"path":"https://mc-stan.org/projpred/dev/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to projpred","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://mc-stan.org/projpred/dev/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to projpred","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reproducible example (see e.g. tidyverse reprex instructions). tidyverse guide create great issue advice.","code":""},{"path":"https://mc-stan.org/projpred/dev/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to projpred","text":"new creating pull requests tips. Using functions usethis package required can helpful process new . Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"stan-dev/projpred\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style already used NEWS.md.","code":""},{"path":"https://mc-stan.org/projpred/dev/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to projpred","text":"New code attempt follow style used package. doubt follow tidyverse style guide. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://mc-stan.org/projpred/dev/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to projpred","text":"Please note projpred project follows Stan project’s Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://mc-stan.org/projpred/dev/LICENSE.html","id":"gnu-general-public-license","dir":"","previous_headings":"","what":"GNU GENERAL PUBLIC LICENSE","title":"NA","text":"Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/ Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://mc-stan.org/projpred/dev/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"NA","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://mc-stan.org/projpred/dev/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"NA","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://mc-stan.org/projpred/dev/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"NA","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://mc-stan.org/projpred/dev/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"NA","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://mc-stan.org/projpred/dev/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"NA","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://mc-stan.org/projpred/dev/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"NA","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://mc-stan.org/projpred/dev/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"NA","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://mc-stan.org/projpred/dev/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"NA","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://mc-stan.org/projpred/dev/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"NA","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://mc-stan.org/projpred/dev/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"NA","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://mc-stan.org/projpred/dev/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"NA","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://mc-stan.org/projpred/dev/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"NA","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://mc-stan.org/projpred/dev/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"NA","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://mc-stan.org/projpred/dev/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"NA","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://mc-stan.org/projpred/dev/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License.","title":"NA","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://mc-stan.org/projpred/dev/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"NA","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://mc-stan.org/projpred/dev/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"NA","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://mc-stan.org/projpred/dev/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"NA","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://mc-stan.org/projpred/dev/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"NA","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://mc-stan.org/projpred/dev/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"NA","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands `show w’ `show c’ show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see https://www.gnu.org/licenses/. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read https://www.gnu.org/licenses/--lgpl.html.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation, either version 3 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author>     This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.     This is free software, and you are welcome to redistribute it     under certain conditions; type `show c' for details."},{"path":"https://mc-stan.org/projpred/dev/articles/latent.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Latent projection predictive feature selection","text":"vignette shows use latent projection predictive feature selection Catalina, Bürkner, Vehtari (2021) projpred. recommend read main vignette first, latent-projection vignette presented skip details explained main vignette.","code":""},{"path":"https://mc-stan.org/projpred/dev/articles/latent.html","id":"general-idea","dir":"Articles","previous_headings":"Introduction","what":"General idea","title":"Latent projection predictive feature selection","text":"response families used GLMs (McCullagh Nelder 1989, chap. 2), GLMMs, GAMs, GAMMs (particular, gaussian(), binomial(), poisson() family supported projpred’s traditional projection) may termed exponential dispersion (ED) families (Jørgensen 1987)1. response family ED family, Kullback-Leibler (KL) divergence minimization problem (see Piironen, Paasiniemi, Vehtari 2020) often easy solve analytically (exceptions non-ED families discrete finite support; see comment augmented-data projection section “Implementation”). order bypass issue, latent projection (Catalina, Bürkner, Vehtari 2021) solves KL minimization problem predictive space latent predictors2 instead predictive space original response values. end, latent predictor assumed Gaussian distribution, since () constitutes combination predictor data regression parameters often linear (parameters, —less—often also predictor data) least additive (across predictor terms) (ii) complete real line support. Furthermore, Gaussian distribution highest differential entropy among distributions two finite moments real line support (see, e.g., Cover Thomas 1991). cases, e.g., probit link, Gaussian distribution even part original statistical model. case logit link, Gaussian distribution standard deviation 1.6 approximates logistic distribution (scale parameter 1). assumption Gaussian distribution latent predictors makes things lot easier allows us make use projpred’s traditional projection. illustrated Poisson example , latent projection can used families supported projpred’s traditional projection, can also beneficial families supported .","code":""},{"path":"https://mc-stan.org/projpred/dev/articles/latent.html","id":"impl","dir":"Articles","previous_headings":"Introduction","what":"Implementation","title":"Latent projection predictive feature selection","text":"use latent projection projpred, argument latent extend_family() needs set TRUE. Since extend_family() called init_refmodel() turn called get_refmodel() (precisely, get_refmodel() methods) turn called beginning top-level functions project(), varsel(), cv_varsel(), possible pass latent = TRUE top-level function extend_family() via ellipsis (...). However, recommend define reference model object class refmodel explicitly (illustrated examples ) avoid repetitive inefficient code3. performing projection (either stand-alone feature via project() embedded variable selection via varsel() cv_varsel()), post-processing (e.g., estimation performance statistics summary.vsel()) can performed original response scale. , three arguments extend_family() accept R functions: latent_ilink (responsible inverse-link transformation latent scale response scale), latent_ll_oscale (responsible calculation log-likelihood values response scale), latent_ppd_oscale (responsible drawing (posterior-projection) predictive distribution response scale). families, three arguments internal defaults implemented natively projpred. families listed main vignette (section “Supported types models”). families, projpred either tries infer reasonable function internally (case latent_ilink) uses dummy function returning NAs (case latent_ll_oscale latent_ppd_oscale), unless user supplies custom functions. creating reference model object family lacks projpred’s native support full response-scale post-processing, projpred throw messages stating whether () features unavailable unless least three arguments provided user. , ellipsis (...) can used pass arguments top-level function cv_varsel() extend_family(). post-processing functions, response-scale analyses can usually deactivated setting argument resp_oscale FALSE, exception predict.refmodel() proj_linpred() arguments type transform serve purpose (see documentation). Apart arguments mentioned , extend_family() also features latent-projection argument latent_y_unqs whose purpose described documentation. latent projection approximate solution KL divergence minimization problem original response space4, augmented-data projection (Weber, Glass, Vehtari 2025) gives exact5 solution non-ED families, namely response distribution finite support. However, augmented-data projection comes higher runtime latent projection. families currently supported projpred’s augmented-data projection also listed main vignette (section “Supported types models”).","code":""},{"path":"https://mc-stan.org/projpred/dev/articles/latent.html","id":"example-poisson-distribution","dir":"Articles","previous_headings":"","what":"Example: Poisson distribution","title":"Latent projection predictive feature selection","text":"example, illustrate case family supported projpred’s traditional projection (poisson() family), latent projection can improve runtime results variable selection compared projpred’s traditional projection, least L1 search used (see argument method varsel() cv_varsel()).","code":""},{"path":"https://mc-stan.org/projpred/dev/articles/latent.html","id":"data","dir":"Articles","previous_headings":"Example: Poisson distribution","what":"Data","title":"Latent projection predictive feature selection","text":"First, generate training test dataset Poisson-distributed response:","code":"# Number of observations in the training dataset (= number of observations in # the test dataset): N <- 71 # Data-generating function: sim_poiss <- function(nobs = 2 * N, ncon = 10, ncats = 4, nnoise = 39) {   # Regression coefficients for continuous predictors:   coefs_con <- rnorm(ncon)   # Continuous predictors:   dat_sim <- matrix(rnorm(nobs * ncon), ncol = ncon)   # Start linear predictor:   linpred <- 2.1 + dat_sim %*% coefs_con      # Categorical predictor:   dat_sim <- data.frame(     x = dat_sim,     xcat = gl(n = ncats, k = nobs %/% ncats, length = nobs,               labels = paste0(\"cat\", seq_len(ncats)))   )   # Regression coefficients for the categorical predictor:   coefs_cat <- rnorm(ncats)   # Continue linear predictor:   linpred <- linpred + coefs_cat[dat_sim$xcat]      # Noise predictors:   dat_sim <- data.frame(     dat_sim,     xn = matrix(rnorm(nobs * nnoise), ncol = nnoise)   )      # Poisson response, using the log link (i.e., exp() as inverse link):   dat_sim$y <- rpois(nobs, lambda = exp(linpred))   # Shuffle order of observations:   dat_sim <- dat_sim[sample.int(nobs), , drop = FALSE]   # Drop the shuffled original row names:   rownames(dat_sim) <- NULL   return(dat_sim) } # Generate data: set.seed(300417) dat_poiss <- sim_poiss() dat_poiss_train <- head(dat_poiss, N) dat_poiss_test <- tail(dat_poiss, N)"},{"path":"https://mc-stan.org/projpred/dev/articles/latent.html","id":"reference-model","dir":"Articles","previous_headings":"Example: Poisson distribution","what":"Reference model","title":"Latent projection predictive feature selection","text":"Next, fit reference model consider best model (terms predictive performance) can construct (, assume don’t know true data-generating process even though dataset simulated): Due technical reasons reduced chains iter vignette, ignore bulk-ESS warning .","code":"library(rstanarm) # Number of regression coefficients: ( D <- sum(grepl(\"^x\", names(dat_poiss_train))) ) [1] 50 # Prior guess for the number of relevant (i.e., non-zero) regression # coefficients: p0 <- 10 # Prior guess for the overall magnitude of the response values, see Table 1 of # Piironen and Vehtari (2017, DOI: 10.1214/17-EJS1337SI): mu_prior <- 100 # Hyperprior scale for tau, the global shrinkage parameter: tau0 <- p0 / (D - p0) / sqrt(mu_prior) / sqrt(N) # Set this manually if desired: ncores <- parallel::detectCores(logical = FALSE) ### Only for technical reasons in this vignette (you can omit this when running ### the code yourself): ncores <- min(ncores, 2L) ### options(mc.cores = ncores) refm_fml <- as.formula(paste(\"y\", \"~\", paste(   grep(\"^x\", names(dat_poiss_train), value = TRUE),   collapse = \" + \" ))) refm_fit_poiss <- stan_glm(   formula = refm_fml,   family = poisson(),   data = dat_poiss_train,   prior = hs(global_scale = tau0, slab_df = 100, slab_scale = 1),   ### Only for the sake of speed (not recommended in general):   chains = 2, iter = 1000,   ###   refresh = 0 ) Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. Running the chains for more iterations may help. See https://mc-stan.org/misc/warnings.html#bulk-ess"},{"path":"https://mc-stan.org/projpred/dev/articles/latent.html","id":"variable-selection-using-the-latent-projection","dir":"Articles","previous_headings":"Example: Poisson distribution","what":"Variable selection using the latent projection","title":"Latent projection predictive feature selection","text":"Within projpred, define reference model object explicitly set latent = TRUE corresponding get_refmodel() call (see section “Implementation”) latent projection used downstream functions. Since hold-test dataset available, can use varsel() argument d_test instead cv_varsel(). Furthermore, measure runtime able compare traditional projection’s later: message telling <refmodel>$dis consists NAs concern us focus response-scale post-processing. order decide submodel size, first inspect plot() results. contrast main vignette used mean log predictive density (MLPD) predictive performance statistic gaussian() family reference model (gaussian() submodels), discrete family (poisson()) , makes sense exponentiate MLPD obtain geometric mean predictive density (GMPD; case discrete response, predictive density values actually predictive probabilities hence GMPD bounded 0 1). main vignette, plot deltas = TRUE (case GMPD, means ratio submodel GMPD vs. reference model GMPD shown). Via global option projpred.plot_vsel_size_position, set argument size_position plot.vsel() \"secondary_x\" make submodel sizes readable plots vignette.  Based plot, decide submodel size 11: also size suggest_size() suggest: predictor ranking selected size 11, can see projpred correctly selected truly relevant predictors first noise predictors: skip post-selection inference (see main vignette demonstration post-selection inference), note proj_predict() argument resp_oscale controlling whether draw posterior-projection predictive distributions original response scale (TRUE, default) latent scale (FALSE) analogous functionality available proj_linpred() (argument transform) predict.refmodel() (argument type).","code":"library(projpred) d_test_lat_poiss <- list(   data = dat_poiss_test,   offset = rep(0, nrow(dat_poiss_test)),   weights = rep(1, nrow(dat_poiss_test)),   ### Here, we are not interested in latent-scale post-processing, so we can set   ### element `y` to a vector of `NA`s:   y = rep(NA, nrow(dat_poiss_test)),   ###   y_oscale = dat_poiss_test$y ) refm_poiss <- get_refmodel(refm_fit_poiss, latent = TRUE) Since `<refmodel>$dis` will consist of only `NA`s, downstream analyses based on this reference model object won't be able to use log predictive density (LPD) values on latent scale. Furthermore, proj_predict() won't be able to draw from the latent Gaussian distribution. time_lat <- system.time(vs_lat <- varsel(   refm_poiss,   d_test = d_test_lat_poiss,   ### Only for demonstrating an issue with the traditional projection in the   ### next step (not recommended in general):   method = \"L1\",   ###   ### Only for the sake of speed (not recommended in general):   nclusters_pred = 20,   ###   nterms_max = 14,   ### In interactive use, we recommend not to deactivate the verbose mode:   verbose = 0,   ###   ### For comparability with varsel() based on the traditional projection:   seed = 95930   ### )) print(time_lat) user  system elapsed    1.104   0.331   1.050 options(projpred.plot_vsel_size_position = \"secondary_x\") ( gg_lat <- plot(vs_lat, stats = \"gmpd\", deltas = TRUE) ) size_decided_lat <- 11 suggest_size(vs_lat, stat = \"gmpd\") [1] 11 rk_lat <- ranking(vs_lat) ( predictors_final_lat <- head(rk_lat[[\"fulldata\"]], size_decided_lat) ) [1] \"x.4\"  \"x.6\"  \"x.10\" \"x.3\"  \"x.1\"  \"x.2\"  \"x.8\"  \"x.7\"  \"xcat\" \"x.5\"  [11] \"x.9\""},{"path":"https://mc-stan.org/projpred/dev/articles/latent.html","id":"variable-selection-using-the-traditional-projection","dir":"Articles","previous_headings":"Example: Poisson distribution","what":"Variable selection using the traditional projection","title":"Latent projection predictive feature selection","text":"now look projpred’s traditional projection given. , increase nterms_max reveal issue approach: results show, traditional projection takes longer latent projection, although difference rather small absolute scale (due fact L1 search already quite fast). importantly however, predictor ranking contains several noise terms truly relevant ones, causing predictive performance reference model reached submodel size 28.","code":"d_test_trad_poiss <- d_test_lat_poiss d_test_trad_poiss$y <- d_test_trad_poiss$y_oscale d_test_trad_poiss$y_oscale <- NULL time_trad <- system.time(vs_trad <- varsel(   refm_fit_poiss,   d_test = d_test_trad_poiss,   ### Only for demonstrating an issue with the traditional projection (not   ### recommended in general):   method = \"L1\",   ###   ### Only for the sake of speed (not recommended in general):   nclusters_pred = 20,   ###   nterms_max = 30,   ### In interactive use, we recommend not to deactivate the verbose mode:   verbose = 0,   ###   ### For comparability with varsel() based on the latent projection:   seed = 95930   ### )) print(time_trad) user  system elapsed    4.221   0.343   4.170 ( gg_trad <- plot(vs_trad, stats = \"gmpd\", deltas = TRUE) )"},{"path":"https://mc-stan.org/projpred/dev/articles/latent.html","id":"conclusion","dir":"Articles","previous_headings":"Example: Poisson distribution","what":"Conclusion","title":"Latent projection predictive feature selection","text":"example showed latent projection can advantageous also families supported projpred’s traditional projection improving runtime well results variable selection. important point used L1 search . case latent projection, forward search given slightly different results. However, case traditional projection, forward search given markedly better results (particular, noise terms selected truly relevant ones). Thus, conclusions made L1 search transmitted easily forward search.","code":""},{"path":"https://mc-stan.org/projpred/dev/articles/latent.html","id":"negbinex","dir":"Articles","previous_headings":"","what":"Example: Negative binomial distribution","title":"Latent projection predictive feature selection","text":"example, illustrate latent projection case negative binomial family (precisely, use rstanarm::neg_binomial_2() family ) family supported projpred’s traditional projection6.","code":""},{"path":"https://mc-stan.org/projpred/dev/articles/latent.html","id":"data-1","dir":"Articles","previous_headings":"Example: Negative binomial distribution","what":"Data","title":"Latent projection predictive feature selection","text":"re-use data generated Poisson example.","code":""},{"path":"https://mc-stan.org/projpred/dev/articles/latent.html","id":"reference-model-1","dir":"Articles","previous_headings":"Example: Negative binomial distribution","what":"Reference model","title":"Latent projection predictive feature selection","text":"now fit reference model negative binomial distribution response family. sake simplicity, won’t adjust tau0 new family, real-world example, adjustment necessary. However, since Table 1 Piironen Vehtari (2017) list negative binomial distribution, first require manual derivation pseudo-variance \\(\\tilde{\\sigma}^2\\). , ignore bulk-ESS warning due technical reasons reduced chains iter vignette.","code":"refm_fit_nebin <- stan_glm(   formula = refm_fml,   family = neg_binomial_2(),   data = dat_poiss_train,   prior = hs(global_scale = tau0, slab_df = 100, slab_scale = 1),   ### Only for the sake of speed (not recommended in general):   chains = 2, iter = 1000,   ###   refresh = 0 ) Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. Running the chains for more iterations may help. See https://mc-stan.org/misc/warnings.html#bulk-ess"},{"path":"https://mc-stan.org/projpred/dev/articles/latent.html","id":"variable-selection-using-the-latent-projection-1","dir":"Articles","previous_headings":"Example: Negative binomial distribution","what":"Variable selection using the latent projection","title":"Latent projection predictive feature selection","text":"request latent projection latent = TRUE, now need specify arguments (latent_ll_oscale latent_ppd_oscale; internal default latent_ilink works correctly example) passed extend_family()7: , message telling <refmodel>$dis consists NAs concern us focus response-scale post-processing. message concerning latent_ilink can safely ignored (internal default based family$linkinv works correctly case). , first inspect plot() results decide submodel size:  decision final submodel size, act preferred accuracy sparsity trade-mentioned main vignette, decide submodel size 11: size suggest_size() suggest, mentioned main vignette documentation, suggest_size() provides quite heuristic decision (stick manual decision ): can see predictor ranking included plot, selected 11 predictor terms lack one truly relevant predictor (x.9) include one noise term (xn.29). explicitly, selected predictor terms : , skip post-selection inference (see main vignette demonstration post-selection inference).","code":"refm_prec <- as.matrix(refm_fit_nebin)[, \"reciprocal_dispersion\", drop = FALSE] latent_ll_oscale_nebin <- function(ilpreds,                                    dis = rep(NA, nrow(ilpreds)),                                    y_oscale,                                    wobs = rep(1, length(y_oscale)),                                    cl_ref,                                    wdraws_ref = rep(1, length(cl_ref))) {   y_oscale_mat <- matrix(y_oscale, nrow = nrow(ilpreds), ncol = ncol(ilpreds),                          byrow = TRUE)   wobs_mat <- matrix(wobs, nrow = nrow(ilpreds), ncol = ncol(ilpreds),                      byrow = TRUE)   refm_prec_agg <- cl_agg(refm_prec, cl = cl_ref, wdraws = wdraws_ref)   ll_unw <- dnbinom(y_oscale_mat, size = refm_prec_agg, mu = ilpreds, log = TRUE)   return(wobs_mat * ll_unw) } latent_ppd_oscale_nebin <- function(ilpreds_resamp,                                     dis_resamp = rep(NA, nrow(ilpreds_resamp)),                                     wobs,                                     cl_ref,                                     wdraws_ref = rep(1, length(cl_ref)),                                     idxs_prjdraws) {   refm_prec_agg <- cl_agg(refm_prec, cl = cl_ref, wdraws = wdraws_ref)   refm_prec_agg_resamp <- refm_prec_agg[idxs_prjdraws, , drop = FALSE]   ppd <- rnbinom(prod(dim(ilpreds_resamp)), size = refm_prec_agg_resamp,                  mu = ilpreds_resamp)   ppd <- matrix(ppd, nrow = nrow(ilpreds_resamp), ncol = ncol(ilpreds_resamp))   return(ppd) } refm_nebin <- get_refmodel(refm_fit_nebin, latent = TRUE,                            latent_ll_oscale = latent_ll_oscale_nebin,                            latent_ppd_oscale = latent_ppd_oscale_nebin) Defining `latent_ilink` as a function which calls `family$linkinv`, but there is no guarantee that this will work for all families. If relying on `family$linkinv` is not appropriate or if this raises an error in downstream functions, supply a custom `latent_ilink` function (which is also allowed to return only `NA`s if response-scale post-processing is not needed). Since `<refmodel>$dis` will consist of only `NA`s, downstream analyses based on this reference model object won't be able to use log predictive density (LPD) values on latent scale. Furthermore, proj_predict() won't be able to draw from the latent Gaussian distribution. vs_nebin <- varsel(   refm_nebin,   d_test = d_test_lat_poiss,   ### Only for the sake of speed (not recommended in general):   method = \"L1\",   nclusters_pred = 20,   ###   nterms_max = 14,   ### In interactive use, we recommend not to deactivate the verbose mode:   verbose = 0   ### ) ( gg_nebin <- plot(vs_nebin, stats = \"gmpd\", deltas = TRUE) ) size_decided_nebin <- 11 suggest_size(vs_nebin, stat = \"gmpd\") [1] 10 rk_nebin <- ranking(vs_nebin) ( predictors_final_nebin <- head(rk_nebin[[\"fulldata\"]],                                  size_decided_nebin) ) [1] \"x.4\"   \"x.6\"   \"x.10\"  \"x.3\"   \"x.1\"   \"x.2\"   \"x.8\"   \"xn.29\" \"x.7\"   [10] \"xcat\"  \"x.5\""},{"path":"https://mc-stan.org/projpred/dev/articles/latent.html","id":"conclusion-1","dir":"Articles","previous_headings":"Example: Negative binomial distribution","what":"Conclusion","title":"Latent projection predictive feature selection","text":"example demonstrated latent projection can used families neither supported projpred’s traditional projpred’s augmented-data projection, reflects flexibility latent approach.","code":""},{"path":[]},{"path":"https://mc-stan.org/projpred/dev/articles/projpred.html","id":"intro","dir":"Articles","previous_headings":"","what":"Introduction","title":"projpred: Projection predictive feature selection","text":"vignette illustrates main functionalities projpred package, implements projection predictive variable selection various regression models (see section “Supported types models” details supported model types). special projection predictive variable selection performs variable selection, also allows (approximately) valid post-selection inference. projection predictive variable selection based ideas Goutis Robert (1998) Dupuis Robert (2003). methods implemented projpred described detail Piironen, Paasiniemi, Vehtari (2020), Catalina, Bürkner, Vehtari (2022), Weber, Glass, Vehtari (2025), Catalina, Bürkner, Vehtari (2021). comparison many methods may also found Piironen Vehtari (2017a). introduction theory behind projpred, workflow practitioners, insights theory (practice) projection predictive inference presented McLatchie et al. (2025). details cite projpred, see projpred citation info CRAN1.","code":""},{"path":"https://mc-stan.org/projpred/dev/articles/projpred.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"projpred: Projection predictive feature selection","text":"vignette, use projpred’s df_gaussian data. contains 100 observations 20 continuous predictor variables X1, …, X20 (originally stored sub-matrix; turn separate columns ) one continuous response variable y.","code":"data(\"df_gaussian\", package = \"projpred\") dat_gauss <- data.frame(y = df_gaussian$y, df_gaussian$x)"},{"path":"https://mc-stan.org/projpred/dev/articles/projpred.html","id":"refmod","dir":"Articles","previous_headings":"","what":"Reference model","title":"projpred: Projection predictive feature selection","text":"First, construct reference model projection predictive variable selection. model considered best (“reference”) solution prediction task. aim projection predictive variable selection find subset set candidate predictors small possible achieves predictive performance close possible reference model. Usually (also case vignette), reference model rstanarm brms fit. knowledge, rstanarm brms currently packages get_refmodel() method (establishes compatibility projpred) exists. Creating reference model object via one methods get_refmodel.stanreg() brms::get_refmodel.brmsfit() (either implicitly call top-level function project(), varsel(), cv_varsel(), done , explicitly call get_refmodel()) leads “typical” reference model object. case, candidate models actual submodels reference model. general, however, assumption necessary projection predictive variable selection (see, e.g., Piironen, Paasiniemi, Vehtari 2020). “custom” (.e., non-“typical”) reference model objects allow avoid assumption (although candidate models “custom” reference model object still actual submodels full formula used search procedure—reference model’s formula, reference model possesses formula ). “custom” reference model objects can constructed via init_refmodel() (get_refmodel.default()), shown section “Examples” ?init_refmodel help. , use rstanarm package fit reference model. want use brms package, simply replace rstanarm fit (class stanreg) code brms fit (class brmsfit). rstanarm reference model, use Gaussian distribution family response. respect predictors, include linear main effects 20 predictor variables. Compared complex types reference models supported projpred (see section “Supported types models” ), quite simple reference model sufficient, however, demonstrate interplay projpred’s functions. use rstanarm’s default priors reference model, except regression coefficients use regularized horseshoe prior (Piironen Vehtari 2017c) hyperprior global shrinkage parameter following Piironen Vehtari (2017b) Piironen Vehtari (2017c). R code, preparation steps regularized horseshoe prior: now fit reference model data. make vignette build faster, use 2 MCMC chains 1000 iterations per chain (half discarded warmup draws). practice, 4 chains 2000 iterations per chain reasonable defaults. Furthermore, make use rstan’s parallelization, means run chain separate CPU core2. run following code , can either rely automatic mechanism detect number CPU cores (like parallel::detectCores() function shown ) adapt ncores manually system. Usually, now check convergence diagnostics (see, e.g., ?posterior::diagnostics ?posterior::default_convergence_measures). However, due technical reasons reduced chains iter, skip step .","code":"library(rstanarm) # Number of regression coefficients: ( D <- sum(grepl(\"^X\", names(dat_gauss))) ) [1] 20 # Prior guess for the number of relevant (i.e., non-zero) regression # coefficients: p0 <- 5 # Number of observations: N <- nrow(dat_gauss) # Hyperprior scale for tau, the global shrinkage parameter (note that for the # Gaussian family, 'rstanarm' will automatically scale this by the residual # standard deviation): tau0 <- p0 / (D - p0) * 1 / sqrt(N) # Set this manually if desired: ncores <- parallel::detectCores(logical = FALSE) ### Only for technical reasons in this vignette (you can omit this when running ### the code yourself): ncores <- min(ncores, 2L) ### options(mc.cores = ncores) set.seed(50780) refm_fit <- stan_glm(   y ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X11 + X12 + X13 + X14 +     X15 + X16 + X17 + X18 + X19 + X20,   family = gaussian(),   data = dat_gauss,   prior = hs(global_scale = tau0),   ### Only for the sake of speed (not recommended in general):   chains = 2, iter = 1000,   ###   refresh = 0 )"},{"path":"https://mc-stan.org/projpred/dev/articles/projpred.html","id":"variableselection","dir":"Articles","previous_headings":"","what":"Variable selection","title":"projpred: Projection predictive feature selection","text":"Now, projpred comes play. reference model fit (called refm_fit ), create reference model object (.e., object class refmodel) since avoids redundant calculations remainder vignette3: projpred, projection predictive variable selection relies -called search part -called evaluation part. search part determines predictor ranking (also known solution path), .e., best submodel submodel size (size given number predictor terms). evaluation part determines predictive performance increasingly complex submodels along predictor ranking. two functions running combination search evaluation: varsel() cv_varsel(). contrast varsel(), cv_varsel() performs cross-validation (CV). cv_method = \"LOO\" (default), cv_varsel() runs Pareto-smoothed importance sampling leave-one-CV (PSIS-LOO CV, see Vehtari, Gelman, Gabry 2017; Vehtari et al. 2022). cv_method = \"kfold\", cv_varsel() runs \\(K\\)-fold CV. extent CV mainly depends cv_varsel()’s argument validate_search: validate_search = TRUE (default), search part run training data CV fold separately evaluation part run corresponding test data CV fold. validate_search = FALSE, search excluded CV single full-data search run. thorough protection overfitting4, cv_varsel() validate_search = TRUE recommended varsel() cv_varsel() validate_search = FALSE. Nonetheless, preliminary comparatively fast run varsel() cv_varsel() validate_search = FALSE can give rough idea performance submodels can used finding suitable value argument nterms_max subsequent runs (argument nterms_max imposes limit submodel size search continued thus able reduce runtime considerably).","code":"library(projpred) refm_obj <- get_refmodel(refm_fit)"},{"path":"https://mc-stan.org/projpred/dev/articles/projpred.html","id":"preliminary-cv_varsel-run","dir":"Articles","previous_headings":"Variable selection","what":"Preliminary cv_varsel() run","title":"projpred: Projection predictive feature selection","text":"illustrate preliminary cv_varsel() run validate_search = FALSE, set nterms_max number predictor terms full model, .e., nterms_max = 20. speed building vignette (recommended general), choose \"L1\" search method set refit_prj FALSE. find suitable value nterms_max subsequent cv_varsel() runs, take look plot least one predictive performance statistic dependence submodel size. , choose mean log predictive density (MLPD; see documentation argument stats summary.vsel() details) performance statistic. Since using following plot determine nterms_max subsequent cv_varsel() runs, can omit predictor ranking plot setting ranking_nterms_max NA (requires size_position = \"primary_x_bottom\", set via global option, just like argument text_angle): plot suggests submodel MLPD levels submodel size 8 . However, used L1 search refit_prj = FALSE, means projections employed predictive performance evaluation L1-penalized, usually undesired (Piironen, Paasiniemi, Vehtari 2020, sec. 4). Thus, investigate impact refit_prj = FALSE, re-run cv_varsel(), time default refit_prj = TRUE re-using search results (well CV-related arguments validate_search; see section “Usage” ?cv_varsel.vsel) former cv_varsel() call (done applying cv_varsel() cvvs_fast instead refm_obj cv_varsel() generic dispatches cv_varsel.vsel() method introduced projpred 2.8.05). save time, also set nclusters_pred comparatively low value 20: , ignore warning SIS used instead PSIS (due nclusters_pred = 20 used speed building vignette). refit_prj = TRUE results, predictive performance plot now looks follows: refined plot confirms submodel MLPD change much submodel size 8, final cv_varsel() run, set nterms_max value slightly higher 8 (: 9) ensure see MLPD leveling . search results initial cvvs_fast object now re-used (via cv_varsel.vsel()) investigating sensitivity results changes nclusters_pred (ndraws_pred). , skip sake brevity instead head final cv_varsel() run.","code":"# Preliminary cv_varsel() run: cvvs_fast <- cv_varsel(   refm_obj,   validate_search = FALSE,   ### Only for the sake of speed (not recommended in general):   method = \"L1\",   refit_prj = FALSE,   ###   nterms_max = 20,   ### In interactive use, we recommend not to deactivate the verbose mode:   verbose = 0   ###  ) options(projpred.plot_vsel_size_position = \"primary_x_bottom\") options(projpred.plot_vsel_text_angle = 0) plot(cvvs_fast, stats = \"mlpd\", ranking_nterms_max = NA) # Preliminary cv_varsel() run with `refit_prj = TRUE`: cvvs_fast_refit <- cv_varsel(   cvvs_fast,   ### Only for the sake of speed (not recommended in general):   nclusters_pred = 20,   ###   ### In interactive use, we recommend not to deactivate the verbose mode:   verbose = 0   ###  ) Using standard importance sampling (SIS) due to a small number of clusters. plot(cvvs_fast_refit, stats = \"mlpd\", ranking_nterms_max = NA)"},{"path":"https://mc-stan.org/projpred/dev/articles/projpred.html","id":"final-cv_varsel-run","dir":"Articles","previous_headings":"Variable selection","what":"Final cv_varsel() run","title":"projpred: Projection predictive feature selection","text":"final cv_varsel() run (validate_search = TRUE, recommended), use \\(K\\)-fold CV small number folds (K = 2) make vignette build faster. practice, recommend using either default cv_method = \"LOO\" (possibly subsampled, see argument nloo cv_varsel()) larger value K possible terms computation time. , also perform \\(K\\) reference model refits outside cv_varsel(). Although strictly necessary , helpful practice often, cv_varsel() needs re-run multiple times order try different argument settings. also illustrate projpred’s CV (.e., CV comprising search performance evaluation, refitting reference model \\(K\\) times) can parallelized, even though little use (K = 2 folds fold-wise searches performance evaluations quite fast, parallelization overhead eats runtime improvements). Note final cv_varsel() run, make use cv_varsel.vsel() (applying cv_varsel() cvvs_fast cvvs_fast_refit instead refm_obj) change nterms_max (: 9, cvvs_fast cvvs_fast_refit: 20).","code":"# Refit the reference model K times: cv_fits <- run_cvfun(   refm_obj,   ### Only for the sake of speed (not recommended in general):   K = 2   ### ) # For running projpred's CV in parallel (see cv_varsel()'s argument `parallel`): doParallel::registerDoParallel(ncores) # Final cv_varsel() run: cvvs <- cv_varsel(   refm_obj,   cv_method = \"kfold\",   cvfits = cv_fits,   ### Only for the sake of speed (not recommended in general):   method = \"L1\",   nclusters_pred = 20,   ###   nterms_max = 9,   parallel = TRUE,   ### In interactive use, we recommend not to deactivate the verbose mode:   verbose = 0   ###  ) # Tear down the CV parallelization setup: doParallel::stopImplicitCluster() foreach::registerDoSEQ()"},{"path":"https://mc-stan.org/projpred/dev/articles/projpred.html","id":"plotfinal","dir":"Articles","previous_headings":"Variable selection > Final cv_varsel() run","what":"Predictive performance plot from final cv_varsel() run","title":"projpred: Projection predictive feature selection","text":"can now select final submodel size looking predictive performance plot similar one created preliminary cv_varsel() run . default, performance statistics plotted actual scale uncertainty bars match scale, argument deltas plot.vsel() offers two options: deltas = TRUE, performance statistics plotted difference scale, .e., differences6 baseline model7 uncertainty bars match scale, deltas = \"mixed\", performance statistics (.e., point estimates) plotted actual scale, uncertainty bars visualize difference-scale uncertainty. Since difference-scale uncertainty usually helpful actual-scale uncertainty (least regard decision final submodel size), plot deltas = TRUE (deltas = \"mixed\" another good choice). also set show_cv_proportions = TRUE (via global option) illustrative purposes, becomes clearer section “Predictor ranking(s) final cv_varsel() run identification selected submodel”:","code":"options(projpred.plot_vsel_show_cv_proportions = TRUE) plot(cvvs, stats = \"mlpd\", deltas = TRUE)"},{"path":"https://mc-stan.org/projpred/dev/articles/projpred.html","id":"decision-size","dir":"Articles","previous_headings":"Variable selection > Final cv_varsel() run","what":"Decision for final submodel size","title":"projpred: Projection predictive feature selection","text":"Based final predictive performance plot, decide submodel size. Usually, aim find smallest submodel size predictive performance submodels levels close enough reference model’s predictive performance (dashed red horizontal line). Sometimes, plot may ambiguous reaching reference model’s performance, submodels’ performance may keep increasing (hence become even better reference model’s performance8). case, one find suitable trade-predictive performance (accuracy) model size (sparsity) context subject-matter knowledge. , decide submodel size 7 seems provide best trade-sparsity accuracy (size 7 smallest size submodel MLPD close enough reference model MLPD size 7 , submodel MLPD levels ). section “Predictor ranking(s) final cv_varsel() run identification selected submodel”, predictor ranking (CV) ranking proportions shown plot (submodel sizes x-axis) explained detail—also incorporated decision submodel size. suggest_size() function offered projpred may help decision submodel size, rather heuristic method needs interpreted caution (see ?suggest_size): case, heuristic gives final submodel size (7) manual decision.","code":"size_decided <- 7 suggest_size(cvvs, stat = \"mlpd\") [1] 7"},{"path":"https://mc-stan.org/projpred/dev/articles/projpred.html","id":"predictive-performance-table-from-final-cv_varsel-run","dir":"Articles","previous_headings":"Variable selection > Final cv_varsel() run","what":"Predictive performance table from final cv_varsel() run","title":"projpred: Projection predictive feature selection","text":"tabular representation plot created plot.vsel() can achieved via summary.vsel() performances(). contrast performances(), output summary.vsel() contains information just predictive performance results, also sophisticated print() method objects class vselsummary (output summary.vsel()). method print.vselsummary() also called shortcut method print.vsel() can applied object resulting varsel() cv_varsel(). Specifically, create table matching predictive performance plot closely possible (also adjust minimum number printed significant digits), may call summary.vsel() print.vselsummary() follows: generic function performances() (main method performances.vselsummary() shortcut method performances.vsel()) essentially extracts predictive performance results output summary.vsel():","code":"smmry <- summary(cvvs,                  stats = \"mlpd\",                  type = c(\"mean\", \"lower\", \"upper\"),                  deltas = TRUE) print(smmry, digits = 1) Family: gaussian  Link function: identity   Formula: y ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X11 +      X12 + X13 + X14 + X15 + X16 + X17 + X18 + X19 + X20 Observations: 100 Projection method: traditional CV method: K-fold CV with K = 2 and search included (i.e., fold-wise searches) Search method: L1 Maximum submodel size for the search: 9 Number of projected draws in the search: 1 (from clustered projection) Number of projected draws in the performance evaluation: 20 (from clustered projection) Argument `refit_prj`: TRUE  Submodel performance evaluation summary with `deltas = TRUE` and `cumulate = FALSE`:  size ranking_fulldata cv_proportions_diag   mlpd mlpd.lower mlpd.upper     0      (Intercept)                  NA -0.976      -1.05     -0.903     1               X1                 1.0 -0.786      -0.87     -0.704     2              X14                 1.0 -0.555      -0.62     -0.487     3               X5                 0.5 -0.553      -0.64     -0.469     4              X20                 0.0 -0.519      -0.61     -0.429     5               X6                 0.0 -0.208      -0.27     -0.151     6               X3                 0.0 -0.214      -0.26     -0.169     7               X8                 0.5 -0.003      -0.02      0.016     8              X11                 0.0 -0.010      -0.03      0.009     9               X7                 0.0  0.003      -0.01      0.021  Reference model performance evaluation summary with `deltas = TRUE`:       mlpd mlpd.lower mlpd.upper           0          0          0 perf <- performances(smmry) str(perf) List of 2  $ submodels      :'data.frame':    10 obs. of  4 variables:   ..$ size      : num [1:10] 0 1 2 3 4 5 6 7 8 9   ..$ mlpd      : num [1:10] -0.976 -0.786 -0.555 -0.553 -0.519 ...   ..$ mlpd.lower: num [1:10] -1.049 -0.867 -0.623 -0.637 -0.609 ...   ..$ mlpd.upper: num [1:10] -0.903 -0.704 -0.487 -0.469 -0.429 ...  $ reference_model: Named num [1:3] 0 0 0   ..- attr(*, \"names\")= chr [1:3] \"mlpd\" \"mlpd.lower\" \"mlpd.upper\"  - attr(*, \"class\")= chr \"performances\""},{"path":"https://mc-stan.org/projpred/dev/articles/projpred.html","id":"rksel","dir":"Articles","previous_headings":"Variable selection > Final cv_varsel() run","what":"Predictor ranking(s) from final cv_varsel() run and identification of the selected submodel","title":"projpred: Projection predictive feature selection","text":"indicated column name, predictor ranking column ranking_fulldata summary.vsel() output based full-data search. full-data predictor ranking also shown second line x-axis tick labels predictive performance plot section “Predictive performance plot final cv_varsel() run”. case cv_varsel() validate_search = TRUE, full-data search, also fold-wise searches, implying also fold-wise predictor rankings. predictor rankings (full-data one —available—fold-wise ones) can retrieved via ranking(): addition inspecting full-data predictor ranking, often makes sense investigate ranking proportions derived fold-wise predictor rankings (available case cv_varsel() validate_search = TRUE, ) order get sense variability ranking predictors. given predictor \\(x\\) given submodel size \\(j\\), ranking proportion proportion CV folds predictor \\(x\\) position \\(j\\) predictor ranking. compute ranking proportions, use cv_proportions(): main diagonal matrix contained column cv_proportions_diag summary.vsel() output also shown third line x-axis tick labels predictive performance plot section “Predictive performance plot final cv_varsel() run” (due show_cv_proportions = TRUE set via global option). , ranking proportions little use used K = 2 (final cv_varsel() call ) sake speed. Nevertheless, can see two CV folds agree relevant predictor term (X1) second relevant predictor term (X14). Since column names matrix returned cv_proportions() follow full-data predictor ranking, can infer X1 X14 also relevant predictor terms (order) full-data predictor ranking. see explicitly, can access element fulldata ranking() output: column ranking_fulldata summary.vsel() output (apart intercept). Note cut search nterms_max = 9 (smaller number predictor terms full model, 20 ), ranking proportions pr_rk matrix need sum 100 % (neither column-wise row-wise). transposed matrix ranking proportions can visualized via plot.cv_proportions(): Apart visualizing variability ranking predictors (, little use K = 2), plot helpful later. retrieve predictor terms final submodel (except intercept always included submodels), combine chosen submodel size 7 full-data predictor ranking: place, helpful take ranking proportions account, now cumulated fashion: plot shows two fold-wise searches (well full-data search, whose predictor ranking determines order predictors y-axis) agree set 7 relevant predictors: looking <=7 x-axis, tiles including 7th main diagonal element 100 %. (Similarly, two CV folds also agree set relevant predictor—singleton—set two relevant predictors, already observed .) Although demonstrated , cumulated ranking proportions also guided decision submodel size: plot cumulated ranking proportions, can see size 8 might unfortunate choice X11 (—cutting full-data predictor ranking size 8—selected 8th predictor final submodel) included among first 8 terms CV fold. However, since K = 2 small reliable statements regarding variability predictor ranking, take cumulated ranking proportions account made decision submodel size . real-world application, might also able incorporate full-data predictor ranking decision submodel size (usually, requires also take account variability predictor ranking, reflected —possibly cumulated—ranking proportions). example, predictors might associated different measurement costs, might want select costly predictor submodel size selected (according full-data predictor ranking, taking account might variability ranking predictors) comes considerable increase predictive performance.","code":"rk <- ranking(cvvs) ( pr_rk <- cv_proportions(rk) ) predictor size X1 X14  X5 X20  X6  X3  X8 X11 X7    1  1   0 0.0   0 0.0 0.0 0.0 0.0  0    2  0   1 0.0   0 0.0 0.0 0.0 0.0  0    3  0   0 0.5   0 0.5 0.0 0.0 0.0  0    4  0   0 0.5   0 0.0 0.5 0.0 0.0  0    5  0   0 0.0   1 0.0 0.0 0.0 0.0  0    6  0   0 0.0   0 0.5 0.0 0.5 0.0  0    7  0   0 0.0   0 0.0 0.5 0.5 0.0  0    8  0   0 0.0   0 0.0 0.0 0.0 0.0  0    9  0   0 0.0   0 0.0 0.0 0.0 0.5  0 attr(,\"class\") [1] \"cv_proportions\" rk[[\"fulldata\"]] [1] \"X1\"  \"X14\" \"X5\"  \"X20\" \"X6\"  \"X3\"  \"X8\"  \"X11\" \"X7\" plot(pr_rk) ( predictors_final <- head(rk[[\"fulldata\"]], size_decided) ) [1] \"X1\"  \"X14\" \"X5\"  \"X20\" \"X6\"  \"X3\"  \"X8\" plot(cv_proportions(rk, cumulate = TRUE))"},{"path":"https://mc-stan.org/projpred/dev/articles/projpred.html","id":"post-selection-inference","dir":"Articles","previous_headings":"","what":"Post-selection inference","title":"projpred: Projection predictive feature selection","text":"project() function returns object class projection forms basis convenient post-selection inference. following project() call, project reference model onto final submodel again9: Next, create matrix containing projected posterior draws stored depths project()’s output: matrix need post-selection inference. can used like matrix draws MCMC procedures, except doesn’t reflect typical posterior distribution, rather projected posterior distribution, .e., distribution arising deterministic projection reference model’s posterior distribution onto parameter space final submodel10. Beware case clustered projection (.e., non-NULL argument nclusters project() call), projected draws different (.e., nonconstant) weights, needs taken account performing post-selection (, generally, post-projection) inference, see as_draws_matrix.projection() (proj_linpred() proj_predict() offer similar functionality via arguments return_draws_matrix nresample_clusters, respectively11).","code":"prj <- project(   refm_obj,   predictor_terms = predictors_final,   ### In interactive use, we recommend not to deactivate the verbose mode:   verbose = 0   ### ) prj_mat <- as.matrix(prj)"},{"path":"https://mc-stan.org/projpred/dev/articles/projpred.html","id":"marginals-of-the-projected-posterior","dir":"Articles","previous_headings":"Post-selection inference","what":"Marginals of the projected posterior","title":"projpred: Projection predictive feature selection","text":"posterior package provides general way deal posterior distributions, can also applied projected posterior. example, calculate summary statistics marginals projected posterior: visualization projected posterior can achieved bayesplot package, example using mcmc_intervals() function:  Note visualize 1-dimensional marginals projected posterior . gain complete picture, visualize least 2-dimensional marginals projected posterior (.e., marginals pairs parameters). comparison, consider marginal posteriors corresponding parameters reference model:  , reference model’s marginal posteriors differ slightly marginals projected posterior. necessarily case.","code":"library(posterior) prj_drws <- as_draws_matrix(prj_mat) prj_smmry <- summarize_draws(   prj_drws,   \"median\", \"mad\", function(x) quantile(x, probs = c(0.025, 0.975)) ) # Coerce to a `data.frame` because some pkgdown versions don't print the # tibble correctly: prj_smmry <- as.data.frame(prj_smmry) print(prj_smmry, digits = 1) variable median  mad 2.5% 97.5% 1 (Intercept)   0.08 0.10 -0.1   0.3 2          X1   1.44 0.09  1.2   1.6 3         X14  -1.11 0.09 -1.3  -0.9 4          X5  -0.90 0.10 -1.1  -0.7 5         X20  -1.09 0.10 -1.3  -0.9 6          X6   0.55 0.09  0.4   0.7 7          X3   0.76 0.10  0.6   1.0 8          X8   0.39 0.10  0.2   0.6 9       sigma   1.02 0.08  0.9   1.2 library(bayesplot) bayesplot_theme_set(ggplot2::theme_bw()) mcmc_intervals(prj_mat) +   ggplot2::coord_cartesian(xlim = c(-1.5, 1.6)) refm_mat <- as.matrix(refm_fit) mcmc_intervals(refm_mat, pars = colnames(prj_mat)) +   ggplot2::coord_cartesian(xlim = c(-1.5, 1.6))"},{"path":"https://mc-stan.org/projpred/dev/articles/projpred.html","id":"predictions","dir":"Articles","previous_headings":"Post-selection inference","what":"Predictions","title":"projpred: Projection predictive feature selection","text":"Predictions final submodel can made proj_linpred() proj_predict(). start proj_linpred(). example, suppose following new observations: proj_linpred() can calculate linear predictors12 new observations dat_gauss_new. Depending argument integrated, linear predictors can averaged across projected draws (within new observation). instance, following computes expected values new observations’ predictive distributions (beware following code refers Gaussian family identity link function; families—usually come combination different link function—one typically use transform = TRUE order achieve expected values): dat_gauss_new also contained response values (.e., y values example), proj_linpred() also evaluate log predictive density (conditional projected parameter draws integrated = FALSE integrated projected parameter draws—taking logarithm—integrated = TRUE). proj_predict(), can obtain draws predictive distributions based final submodel. contrast proj_linpred(<...>, integrated = FALSE), encompasses uncertainty arising parameter estimation, also uncertainty arising observation (“sampling”) model response13. useful usually termed posterior predictive check (PPC), termed something like posterior-projection predictive check (PPPC) :  PPPC shows final projection able generate predictions similar observed response values, indicates model reasonable, least regard.","code":"( dat_gauss_new <- setNames(   as.data.frame(replicate(length(predictors_final), c(-1, 0, 1))),   predictors_final ) ) X1 X14 X5 X20 X6 X3 X8 1 -1  -1 -1  -1 -1 -1 -1 2  0   0  0   0  0  0  0 3  1   1  1   1  1  1  1 prj_linpred <- proj_linpred(prj, newdata = dat_gauss_new, integrated = TRUE) cbind(dat_gauss_new, linpred = as.vector(prj_linpred[[\"pred\"]])) X1 X14 X5 X20 X6 X3 X8    linpred 1 -1  -1 -1  -1 -1 -1 -1 0.05693269 2  0   0  0   0  0  0  0 0.07767737 3  1   1  1   1  1  1  1 0.09842204 prj_predict <- proj_predict(prj) # Using the 'bayesplot' package: ppc_dens_overlay(y = dat_gauss$y, yrep = prj_predict)"},{"path":"https://mc-stan.org/projpred/dev/articles/projpred.html","id":"modtypes","dir":"Articles","previous_headings":"","what":"Supported types of models","title":"projpred: Projection predictive feature selection","text":"principle, projection predictive variable selection requires little information form reference model. Although many aspects reference model coincide submodels “typical” reference model object used, need case “custom” reference model object used (see section “Reference model” definition “typical” “custom” reference model objects). explains general, following remarks refer submodels reference model. following throughout projpred’s documentation, term “traditional projection” used whenever projection type neither “augmented-data” “latent” (see description ). Apart gaussian() response family used vignette, projpred’s traditional projection also supports binomial()14 poisson() family. families currently supported projpred’s augmented-data projection (Weber, Glass, Vehtari 2025) binomial()15 16, brms::cumulative(), rstanarm::stan_polr() fits, brms::categorical()17. See ?extend_family (called init_refmodel()) explanation apply augmented-data projection “custom” reference model objects. “typical” reference model objects (.e., created get_refmodel.stanreg() brms::get_refmodel.brmsfit()), augmented-data projection applied automatically family supported augmented-data projection neither binomial() brms::bernoulli(). applying augmented-data projection binomial() (brms::bernoulli()) family, see ?extend_family well ?augdat_link_binom ?augdat_ilink_binom. Finally, note restrictions respect augmented-data projection; projpred throw informative error requested feature currently supported augmented-data projection. latent projection (Catalina, Bürkner, Vehtari 2021) quite general principle extending projpred’s traditional projection response families. latent projection applied setting argument latent extend_family() (called init_refmodel()) TRUE. families full latent-projection functionality (particular, resp_oscale = TRUE, .e., post-processing original response scale) currently available binomial()18 19, poisson(), brms::cumulative(), rstanarm::stan_polr() fits20. families, can try use latent projection (setting latent = TRUE) projpred tell features available make available. details concerning latent projection given corresponding latent-projection vignette. Note restrictions respect latent projection; projpred throw informative error requested feature currently supported latent projection. side predictors, projpred supports linear main effects shown vignette, also interactions, multilevel21, —experimental feature—additive22 terms. Transferring vignette complex problems straightforward (also vignette employs “typical” reference model object): Basically, code fitting reference model via rstanarm brms needs adapted. projpred code stays almost . note case multilevel additive reference models,  projpred functions slightly different options arguments. See documentation details. example, apply projpred VerbAgg dataset lme4 package, corresponding multilevel reference model binary response r2 created following code: example additive (non-multilevel) reference model, consider lasrosas.corn dataset agridat package. corresponding reference model continuous response yield created following code (note pp_check(refm_fit) gives bad PPC case, ’s still room improvement): example additive multilevel reference model, consider gumpertz.pepper dataset agridat package. corresponding reference model binary response disease created following code: case multilevel models (currently non-additive ones), projpred two global options may relevant users: projpred.mlvl_pred_new projpred.mlvl_proj_ref_new. explained detail general package documentation (available online typing ?`projpred-package`).","code":"data(\"VerbAgg\", package = \"lme4\") refm_fit <- stan_glmer(   r2 ~ btype + situ + mode + (btype + situ + mode | id),   family = binomial(),   data = VerbAgg,   QR = TRUE, refresh = 0 ) data(\"lasrosas.corn\", package = \"agridat\") # Convert `year` to a `factor` (this could also be solved by using # `factor(year)` in the formula, but we avoid that here to put more emphasis on # the demonstration of the smooth term): lasrosas.corn$year <- as.factor(lasrosas.corn$year) refm_fit <- stan_gamm4(   yield ~ year + topo + t2(nitro, bv),   family = gaussian(),   data = lasrosas.corn,   QR = TRUE, refresh = 0 ) data(\"gumpertz.pepper\", package = \"agridat\") refm_fit <- stan_gamm4(   disease ~ field + leaf + s(water),   random = ~ (1 | row) + (1 | quadrat),   family = binomial(),   data = gumpertz.pepper,   QR = TRUE, refresh = 0 )"},{"path":[]},{"path":"https://mc-stan.org/projpred/dev/articles/projpred.html","id":"non-convergence-of-predictive-performance","dir":"Articles","previous_headings":"Troubleshooting","what":"Non-convergence of predictive performance","title":"projpred: Projection predictive feature selection","text":"Sometimes, predictor ranking makes sense, increasing submodel size, predictive performance submodels approach reference model’s predictive performance submodels exhibit predictive performance stays worse reference model’s. different reasons can explain behavior (following list might exhaustive, though): reference model’s posterior may wide default ndraws_pred small. Usually, comes combination difference predictive performance comparatively small. Increasing ndraws_pred help, also increases computational cost. Refitting reference model thereby ensuring narrower posterior (usually employing stronger sparsifying prior) similar effect. non-Gaussian models, discrepancy may due fact penalized iteratively reweighted least squares (PIRLS) algorithm might convergence issues (Catalina, Bürkner, Vehtari 2021). case, latent-space approach Catalina, Bürkner, Vehtari (2021) might help, see also latent-projection vignette.","code":""},{"path":"https://mc-stan.org/projpred/dev/articles/projpred.html","id":"overfitting","dir":"Articles","previous_headings":"Troubleshooting","what":"Overfitting","title":"projpred: Projection predictive feature selection","text":"varsel() used, lack CV varsel() may lead overconfident overfitted results. case, recommend cv_varsel() instead varsel() (cv_varsel() used final results anyway). Similarly, cv_varsel() validate_search = FALSE prone overfitting cv_varsel() validate_search = TRUE.","code":""},{"path":"https://mc-stan.org/projpred/dev/articles/projpred.html","id":"issues-with-the-traditional-projection","dir":"Articles","previous_headings":"Troubleshooting","what":"Issues with the traditional projection","title":"projpred: Projection predictive feature selection","text":"multilevel binomial models, traditional projection may work properly give suboptimal results, see #353 GitHub (underlying issue described lme4 issue #682). suboptimal results, mean relevance group-level terms can underestimated. According simulation-based case study #353, latent projection might help case. multilevel Poisson models, traditional projection may take long, see #353. According simulation-based case study #353, latent projection might help case. Finally, illustrated Poisson example latent-projection vignette, latent projection can beneficial non-multilevel models (non-Gaussian) family also supported traditional projection, least case Poisson family L1 search.","code":""},{"path":"https://mc-stan.org/projpred/dev/articles/projpred.html","id":"issues-with-the-augmented-data-projection","dir":"Articles","previous_headings":"Troubleshooting","what":"Issues with the augmented-data projection","title":"projpred: Projection predictive feature selection","text":"multilevel models, augmented-data projection seems suffer issue traditional projection binomial family (see ), .e., may work properly give suboptimal results, see #353 (underlying issue probably similar one described lme4 issue #682). suboptimal results, mean relevance group-level terms can underestimated. According simulation-based case study #353, latent projection might help cases.","code":""},{"path":"https://mc-stan.org/projpred/dev/articles/projpred.html","id":"speed","dir":"Articles","previous_headings":"Troubleshooting","what":"Speed","title":"projpred: Projection predictive feature selection","text":"many ways speed projpred, general, speed-ups lead results less accurate hence considered giving preliminary results. speed-possibilities : Using cv_varsel() validate_search = FALSE instead validate_search = TRUE. case cv_method = \"LOO\"23, cv_varsel() validate_search = FALSE comparable runtime varsel(), accounts overfitting, namely induced varsel()’s -sample predictions predictive performance evaluation. However, explained section “Variable selection” (see also section “Overfitting”), cv_varsel() validate_search = FALSE prone overfitting cv_varsel() validate_search = TRUE. Using cv_varsel() subsampled PSIS-LOO CV (Magnusson et al. 2020), see argument nloo cv_varsel(). Using cv_varsel() \\(K\\)-fold CV instead PSIS-LOO CV. Whether provides speed improvement mainly depends number observations, whether PSIS-LOO CV subsampled (—yes—small argument nloo cv_varsel() set still obtaining reliable results), complexity reference model. Note PSIS-LOO CV often accurate \\(K\\)-fold CV argument K (much) smaller argument nloo cv_varsel(). Using “custom” reference model object dimension reduction technique predictor data (e.g., computing principal components original predictors, using principal components predictors fitting reference model, performing variable selection terms original predictor terms). Examples given Piironen, Paasiniemi, Vehtari (2020) Pavone et al. (2022). short example custom reference model object also given section “Examples” ?init_refmodel help. approach makes sense large number predictor variables, case aims improving runtime required fitting reference model hence improving runtime \\(K\\)-fold CV. Using varsel() argument d_test evaluating predictive performance hold-dataset instead cv_varsel()’s CV approach. Typically, hold-approach requires large amount data. Reducing nterms_max varsel() cv_varsel(). resulting predictive performance plot(s) inspected ensure search terminated early (.e., submodel performance levels ), indicate nterms_max reduced much. Reducing argument nclusters (varsel() cv_varsel()) 20 /setting nclusters_pred non-NULL (smaller 400, default ndraws_pred) value. setting nclusters_pred low nclusters (using forward search), refit_prj can instead set FALSE, see . Using L1 search (see argument method varsel() cv_varsel()) instead forward search. Note L1 search implies nclusters = 1 always supported. general, forward search accurate L1 search hence desirable (see section “Details” ?varsel ?cv_varsel detailed comparison two). issue demonstrated Poisson example latent-projection vignette related . Setting argument refit_prj (varsel() cv_varsel()) FALSE, basically means set ndraws_pred = ndraws nclusters_pred = nclusters, efficient (.e., faster) way. case L1 search, means L1-penalized projections regression coefficients used predictive performance evaluation, usually undesired (Piironen, Paasiniemi, Vehtari 2020, sec. 4). case forward search, issue exist. Parallelizing costly parts CV implied cv_varsel() (demonstrated example ; see argument parallel cv_varsel()). using project(), parallelizing projection might also help (see general package documentation available online typing ?`projpred-package`). Using varsel.vsel() cv_varsel.vsel() re-use previous search results new performance evaluation(s). helpful performance evaluation part run multiple times based search results (e.g., arguments ndraws_pred nclusters_pred varsel() cv_varsel() changed). example , illustrated cv_varsel() applied cvvs_fast instead refm_obj yield cvvs_fast_refit. example, search performance evaluation effectively run separately cv_varsel() calls yielding cvvs_fast cvvs_fast_refit, respectively. cv_varsel() refit_prj = FALSE (used cvvs_fast) almost computational cost search (performance evaluation refit_prj = FALSE almost computational cost) cv_varsel.vsel() (used cvvs_fast_refit) almost computational cost performance evaluation (search cv_varsel.vsel() computational cost previous search results vsel object re-used). Using run_cvfun() case repeated \\(K\\)-fold CV \\(K\\) reference model refits. output run_cvfun() typically used input argument cvfits cv_varsel.refmodel() (order speed improvement, output run_cvfun() needs assigned object re-used multiple cv_varsel() calls).","code":""},{"path":[]},{"path":"https://mc-stan.org/projpred/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Juho Piironen. Author. Markus Paasiniemi. Author. Alejandro Catalina. Author. Frank Weber. Author. Osvaldo Martin. Maintainer, author. Aki Vehtari. Author. Jonah Gabry. Contributor. Marco Colombo. Contributor. Paul-Christian Bürkner. Contributor. Hamada S. Badr. Contributor. Brian Sullivan. Contributor. Sölvi Rögnvaldsson. Contributor. LME4 Authors. Copyright holder.           see file 'LICENSE' details Yann McLatchie. Contributor. Juho Timonen. Contributor.","code":""},{"path":"https://mc-stan.org/projpred/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Piironen J, Paasiniemi M, Catalina , Weber F, Martin O, Vehtari (2025). “projpred: Projection Predictive Feature Selection.” R package version 2.9.1.9000, https://mc-stan.org/projpred/. Piironen J, Vehtari (2017). “Comparison Bayesian Predictive Methods Model Selection.” Statistics Computing, 27(3), 711–735. doi:10.1007/s11222-016-9649-y. Piironen J, Paasiniemi M, Vehtari (2020). “Projective Inference High-Dimensional Problems: Prediction Feature Selection.” Electronic Journal Statistics, 14(1), 2155–2197. doi:10.1214/20-EJS1711. Catalina , Bürkner P, Vehtari (2022). “Projection Predictive Inference Generalized Linear Additive Multilevel Models.” Camps-Valls G, Ruiz F, Valera (eds.), Proceedings 25th International Conference Artificial Intelligence Statistics, volume 151 series Proceedings Machine Learning Research, 4446–4461. https://proceedings.mlr.press/v151/catalina22a.html. Weber F, Glass Ä, Vehtari (2025). “Projection Predictive Variable Selection Discrete Response Families Finite Support.” Computational Statistics, 40(2), 701–721. doi:10.1007/s00180-024-01506-0. Catalina , Bürkner P, Vehtari (2021). “Latent Space Projection Predictive Inference.” doi:10.48550/arXiv.2109.04702. McLatchie Y, Rögnvaldsson S, Weber F, Vehtari (2025). “Advances Projection Predictive Inference.” Statistical Science, 40(1), 128–147. doi:10.1214/24-STS949. Magnusson M, Andersen M, Jonasson J, Vehtari (2020). “Leave-One-Cross-Validation Bayesian Model Comparison Large Data.” Chiappa S, Calandra R (eds.), Proceedings 23rd International Conference Artificial Intelligence Statistics, volume 108 series Proceedings Machine Learning Research, 341–351. https://proceedings.mlr.press/v108/magnusson20a.html.","code":"@Misc{,   title = {{{projpred}}: {{Projection}} Predictive Feature Selection},   author = {Juho Piironen and Markus Paasiniemi and Alejandro Catalina and Frank Weber and Osvaldo Martin and Aki Vehtari},   year = {2025},   note = {R package version 2.9.1.9000},   url = {https://mc-stan.org/projpred/},   encoding = {UTF-8}, } @Article{,   title = {Comparison of {{Bayesian}} Predictive Methods for Model Selection},   author = {Juho Piironen and Aki Vehtari},   year = {2017},   journal = {Statistics and Computing},   volume = {27},   number = {3},   pages = {711--735},   doi = {10.1007/s11222-016-9649-y}, } @Article{,   title = {Projective Inference in High-Dimensional Problems: {{Prediction}} and Feature Selection},   author = {Juho Piironen and Markus Paasiniemi and Aki Vehtari},   year = {2020},   journal = {Electronic Journal of Statistics},   volume = {14},   number = {1},   pages = {2155--2197},   doi = {10.1214/20-EJS1711}, } @InProceedings{,   title = {Projection Predictive Inference for Generalized Linear and Additive Multilevel Models},   booktitle = {Proceedings of {{The}} 25th {{International Conference}} on {{Artificial Intelligence}} and {{Statistics}}},   author = {Alejandro Catalina and Paul-Christian Bürkner and Aki Vehtari},   editor = {Gustau Camps-Valls and Francisco J. R. Ruiz and Isabel Valera},   year = {2022},   month = {28--30 Mar},   series = {Proceedings of {{Machine Learning Research}}},   volume = {151},   pages = {4446--4461},   publisher = {{PMLR}},   url = {https://proceedings.mlr.press/v151/catalina22a.html},   encoding = {UTF-8}, } @Article{,   title = {Projection Predictive Variable Selection for Discrete Response Families with Finite Support},   author = {Frank Weber and Änne Glass and Aki Vehtari},   year = {2025},   volume = {40},   number = {2},   pages = {701--721},   journal = {Computational Statistics},   doi = {10.1007/s00180-024-01506-0},   encoding = {UTF-8}, } @Misc{,   title = {Latent Space Projection Predictive Inference},   author = {Alejandro Catalina and Paul Bürkner and Aki Vehtari},   year = {2021},   publisher = {{arXiv}},   doi = {10.48550/arXiv.2109.04702},   encoding = {UTF-8}, } @Article{,   title = {Advances in Projection Predictive Inference},   author = {Yann McLatchie and Sölvi Rögnvaldsson and Frank Weber and Aki Vehtari},   year = {2025},   journal = {Statistical Science},   volume = {40},   number = {1},   pages = {128--147},   doi = {10.1214/24-STS949},   encoding = {UTF-8}, } @InProceedings{,   title = {Leave-One-Out Cross-Validation for {{Bayesian}} Model Comparison in Large Data},   booktitle = {Proceedings of {{The}} 23rd {{International Conference}} on {{Artificial Intelligence}} and {{Statistics}}},   author = {Måns Magnusson and Michael Riis Andersen and Johan Jonasson and Aki Vehtari},   editor = {Silvia Chiappa and Roberto Calandra},   year = {2020},   month = {26--28 Aug},   series = {Proceedings of {{Machine Learning Research}}},   volume = {108},   pages = {341--351},   publisher = {{PMLR}},   url = {https://proceedings.mlr.press/v108/magnusson20a.html},   encoding = {UTF-8}, }"},{"path":"https://mc-stan.org/projpred/dev/index.html","id":"projpred-","dir":"","previous_headings":"","what":"Projection Predictive Feature Selection","title":"Projection Predictive Feature Selection","text":"R package projpred performs projection predictive variable selection various regression models. Usually, reference model rstanarm brms fit, custom reference models can also used. Details supported model types given section “Supported types models” main vignette1. details cite projpred, see projpred citation info CRAN2. references (including earlier work projpred based ) given section “Introduction” main vignette. vignettes3 illustrate use projpred functions conjunction. Details projpred functions well shorter examples may found documentation4.","code":""},{"path":"https://mc-stan.org/projpred/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Projection Predictive Feature Selection","text":"two ways installing projpred: CRAN GitHub. GitHub version might recent CRAN version, CRAN version might stable.","code":""},{"path":"https://mc-stan.org/projpred/dev/index.html","id":"from-cran","dir":"","previous_headings":"Installation","what":"From CRAN","title":"Projection Predictive Feature Selection","text":"","code":"install.packages(\"projpred\")"},{"path":"https://mc-stan.org/projpred/dev/index.html","id":"from-github","dir":"","previous_headings":"Installation","what":"From GitHub","title":"Projection Predictive Feature Selection","text":"requires devtools package, necessary, following code also install devtools (CRAN): save time, may omit build_vignettes = TRUE.","code":"if (!requireNamespace(\"devtools\", quietly = TRUE)) {   install.packages(\"devtools\") } devtools::install_github(\"stan-dev/projpred\", build_vignettes = TRUE)"},{"path":"https://mc-stan.org/projpred/dev/index.html","id":"contributing-to-projpred","dir":"","previous_headings":"","what":"Contributing to projpred","title":"Projection Predictive Feature Selection","text":"welcome contributions! projpred package active development. find bugs ideas new features (us implement) please open issue GitHub. See CONTRIBUTING.md details.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/as.matrix.projection.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract projected parameter draws and coerce to matrix — as.matrix.projection","title":"Extract projected parameter draws and coerce to matrix — as.matrix.projection","text":".matrix() method projection objects (returned project(), possibly elements list). extracts projected parameter draws returns matrix. case different (.e., nonconstant) weights projected draws, see as_draws_matrix.projection() better solution.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/as.matrix.projection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract projected parameter draws and coerce to matrix — as.matrix.projection","text":"","code":"# S3 method for class 'projection' as.matrix(x, nm_scheme = NULL, allow_nonconst_wdraws_prj = FALSE, ...)"},{"path":"https://mc-stan.org/projpred/dev/reference/as.matrix.projection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract projected parameter draws and coerce to matrix — as.matrix.projection","text":"x object class projection (returned project(), possibly elements list). nm_scheme naming scheme columns output matrix. Either NULL, \"rstanarm\", \"brms\", NULL chooses \"rstanarm\" \"brms\" based class reference model fit (uses \"rstanarm\" reference model fit unknown class). allow_nonconst_wdraws_prj single logical value indicating whether allow projected draws different (.e., nonconstant) weights (TRUE) (FALSE). CAUTION: Expert use set TRUE, weights projected draws stored attribute wdraws_prj handling attribute requires special care (e.g., subsetting returned matrix). ... Currently ignored.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/as.matrix.projection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract projected parameter draws and coerce to matrix — as.matrix.projection","text":"\\(S_{\\mathrm{prj}} \\times Q\\) matrix projected draws, \\(S_{\\mathrm{prj}}\\) denoting number projected draws \\(Q\\) number parameters. allow_nonconst_wdraws_prj set TRUE, weights projected draws stored attribute wdraws_prj. (allow_nonconst_wdraws_prj FALSE, projected draws nonconstant weights cause error.)","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/as.matrix.projection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract projected parameter draws and coerce to matrix — as.matrix.projection","text":"case augmented-data projection multilevel submodel brms::categorical() reference model, multilevel parameters (therefore also names) slightly differ brms reference model fit (see section \"Augmented-data projection\" extend_family()'s documentation).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/as.matrix.projection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract projected parameter draws and coerce to matrix — as.matrix.projection","text":"","code":"# Data: dat_gauss <- data.frame(y = df_gaussian$y, df_gaussian$x)  # The `stanreg` fit which will be used as the reference model (with small # values for `chains` and `iter`, but only for technical reasons in this # example; this is not recommended in general): fit <- rstanarm::stan_glm(   y ~ X1 + X2 + X3 + X4 + X5, family = gaussian(), data = dat_gauss,   QR = TRUE, chains = 2, iter = 500, refresh = 0, seed = 9876 )  # Projection onto an arbitrary combination of predictor terms (with a small # value for `ndraws`, but only for the sake of speed in this example; this # is not recommended in general): prj <- project(fit, predictor_terms = c(\"X1\", \"X3\", \"X5\"), ndraws = 21,                seed = 9182)  # Applying the as.matrix() generic to the output of project() dispatches to # the projpred::as.matrix.projection() method: prj_mat <- as.matrix(prj)  # Since the draws have all the same weight here, we can treat them like # ordinary MCMC draws, e.g., we can summarize them using the `posterior` # package: if (requireNamespace(\"posterior\", quietly = TRUE)) {   print(posterior::summarize_draws(     posterior::as_draws_matrix(prj_mat),     \"median\", \"mad\", function(x) quantile(x, probs = c(0.025, 0.975))   )) } #> # A tibble: 5 × 5 #>   variable    median   mad `2.5%` `97.5%` #>   <chr>        <dbl> <dbl>  <dbl>   <dbl> #> 1 (Intercept)  0.207 0.202 -0.269   0.594 #> 2 X1           1.70  0.155  1.40    1.97  #> 3 X3           0.924 0.266  0.560   1.45  #> 4 X5          -1.21  0.111 -1.53   -0.602 #> 5 sigma        2.01  0.183  1.83    2.35  # Or visualize them using the `bayesplot` package: if (requireNamespace(\"bayesplot\", quietly = TRUE)) {   print(bayesplot::mcmc_intervals(prj_mat)) }"},{"path":"https://mc-stan.org/projpred/dev/reference/as_draws_matrix.projection.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract projected parameter draws and coerce to draws_matrix (see package posterior) — as_draws_matrix.projection","title":"Extract projected parameter draws and coerce to draws_matrix (see package posterior) — as_draws_matrix.projection","text":"posterior::as_draws() posterior::as_draws_matrix() methods projection objects (returned project(), possibly elements list). extract projected parameter draws return draws_matrix. case different (.e., nonconstant) weights projected draws, draws_matrix allows safer handling weights (safer contrast matrix returned .matrix.projection()), particular providing natural input posterior::resample_draws() (see section \"Examples\" ).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/as_draws_matrix.projection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract projected parameter draws and coerce to draws_matrix (see package posterior) — as_draws_matrix.projection","text":"","code":"# S3 method for class 'projection' as_draws_matrix(x, ...)  # S3 method for class 'projection' as_draws(x, ...)"},{"path":"https://mc-stan.org/projpred/dev/reference/as_draws_matrix.projection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract projected parameter draws and coerce to draws_matrix (see package posterior) — as_draws_matrix.projection","text":"x object class projection (returned project(), possibly elements list). ... Arguments passed .matrix.projection(), except allow_nonconst_wdraws_prj.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/as_draws_matrix.projection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract projected parameter draws and coerce to draws_matrix (see package posterior) — as_draws_matrix.projection","text":"\\(S_{\\mathrm{prj}} \\times Q\\) draws_matrix (see posterior::draws_matrix()) projected draws, \\(S_{\\mathrm{prj}}\\) denoting number projected draws \\(Q\\) number parameters. projected draws nonconstant weights, posterior::weight_draws() applied internally.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/as_draws_matrix.projection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract projected parameter draws and coerce to draws_matrix (see package posterior) — as_draws_matrix.projection","text":"case augmented-data projection multilevel submodel brms::categorical() reference model, multilevel parameters (therefore also names) slightly differ brms reference model fit (see section \"Augmented-data projection\" extend_family()'s documentation).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/as_draws_matrix.projection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract projected parameter draws and coerce to draws_matrix (see package posterior) — as_draws_matrix.projection","text":"","code":"# Data: dat_gauss <- data.frame(y = df_gaussian$y, df_gaussian$x)  # The `stanreg` fit which will be used as the reference model (with small # values for `chains` and `iter`, but only for technical reasons in this # example; this is not recommended in general): fit <- rstanarm::stan_glm(   y ~ X1 + X2 + X3 + X4 + X5, family = gaussian(), data = dat_gauss,   QR = TRUE, chains = 2, iter = 500, refresh = 0, seed = 9876 )  # Projection onto an arbitrary combination of predictor terms (with a small # value for `nclusters`, but only for illustrative purposes; this is not # recommended in general): prj <- project(fit, predictor_terms = c(\"X1\", \"X3\", \"X5\"), nclusters = 5,                seed = 9182)  # Applying the posterior::as_draws_matrix() generic to the output of # project() dispatches to the projpred::as_draws_matrix.projection() # method: prj_draws <- posterior::as_draws_matrix(prj)  # Resample the projected draws according to their weights: set.seed(3456) prj_draws_resampled <- posterior::resample_draws(prj_draws, ndraws = 1000)  # The values from the following two objects should be the same (in general, # this only holds approximately): print(proportions(table(rownames(prj_draws_resampled)))) #>  #>     1     2     3     4     5  #> 0.226 0.214 0.186 0.212 0.162  print(weights(prj_draws)) #> [1] 0.226 0.214 0.186 0.212 0.162  # Treat the resampled draws like ordinary draws, e.g., summarize them: print(posterior::summarize_draws(   prj_draws_resampled,   \"median\", \"mad\", function(x) quantile(x, probs = c(0.025, 0.975)) )) #> # A tibble: 5 × 5 #>   variable    median    mad  `2.5%` `97.5%` #>   <chr>        <dbl>  <dbl>   <dbl>   <dbl> #> 1 (Intercept)  0.188 0.0841  0.0742   0.317 #> 2 X1           1.67  0.126   1.49     1.75  #> 3 X3           0.869 0.218   0.704    1.04  #> 4 X5          -1.19  0.189  -1.32    -0.990 #> 5 sigma        2.10  0.0185  2.09     2.12  # Or visualize them using the `bayesplot` package: if (requireNamespace(\"bayesplot\", quietly = TRUE)) {   print(bayesplot::mcmc_intervals(prj_draws_resampled)) }"},{"path":"https://mc-stan.org/projpred/dev/reference/augdat-internals.html","id":null,"dir":"Reference","previous_headings":"","what":"Augmented-data projection: Internals — augdat-internals","title":"Augmented-data projection: Internals — augdat-internals","text":"augmented-data projection makes extensive use augmented-rows matrices augmented-length vectors. following, \\(N\\), \\(C_{\\mathrm{cat}}\\), \\(C_{\\mathrm{lat}}\\), \\(S_{\\mathrm{ref}}\\), \\(S_{\\mathrm{prj}}\\) help topic refmodel-init-get used. Furthermore, let \\(C\\) denote either \\(C_{\\mathrm{cat}}\\) \\(C_{\\mathrm{lat}}\\), whichever appropriate context used (e.g., ref_predfun's output, \\(C = C_{\\mathrm{lat}}\\)). Similarly, let \\(S\\) denote either \\(S_{\\mathrm{ref}}\\) \\(S_{\\mathrm{prj}}\\), whichever appropriate context used. augmented-rows matrix matrix \\(N \\cdot C\\) rows \\(C\\) blocks \\(N\\) rows, .e., \\(N\\) observations nested \\(C\\) (possibly latent) response categories. ordered response categories, \\(C\\) (possibly latent) response categories (.e., row blocks) sorted increasingly. columns augmented-rows matrix correspond \\(S\\) parameter draws, just like traditional projection. augmented-rows matrix class augmat (inheriting classes matrix array) needs value \\(C\\) stored attribute called ndiscrete. augmented-length vector (class augvec) vector resulting subsetting augmented-rows matrix extract single column thereby dropping dimensions.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/augdat_ilink_binom.html","id":null,"dir":"Reference","previous_headings":"","what":"Inverse-link function for augmented-data projection with binomial family — augdat_ilink_binom","title":"Inverse-link function for augmented-data projection with binomial family — augdat_ilink_binom","text":"function supplied extend_family()'s argument augdat_ilink case augmented-data projection binomial() family.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/augdat_ilink_binom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inverse-link function for augmented-data projection with binomial family — augdat_ilink_binom","text":"","code":"augdat_ilink_binom(eta_arr, link = \"logit\")"},{"path":"https://mc-stan.org/projpred/dev/reference/augdat_ilink_binom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inverse-link function for augmented-data projection with binomial family — augdat_ilink_binom","text":"eta_arr array described section \"Augmented-data projection\" extend_family()'s documentation. link argument link binomial().","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/augdat_ilink_binom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inverse-link function for augmented-data projection with binomial family — augdat_ilink_binom","text":"array described section \"Augmented-data projection\" extend_family()'s documentation.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/augdat_link_binom.html","id":null,"dir":"Reference","previous_headings":"","what":"Link function for augmented-data projection with binomial family — augdat_link_binom","title":"Link function for augmented-data projection with binomial family — augdat_link_binom","text":"function supplied extend_family()'s argument augdat_link case augmented-data projection binomial() family.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/augdat_link_binom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Link function for augmented-data projection with binomial family — augdat_link_binom","text":"","code":"augdat_link_binom(prb_arr, link = \"logit\")"},{"path":"https://mc-stan.org/projpred/dev/reference/augdat_link_binom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Link function for augmented-data projection with binomial family — augdat_link_binom","text":"prb_arr array described section \"Augmented-data projection\" extend_family()'s documentation. link argument link binomial().","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/augdat_link_binom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Link function for augmented-data projection with binomial family — augdat_link_binom","text":"array described section \"Augmented-data projection\" extend_family()'s documentation.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/break_up_matrix_term.html","id":null,"dir":"Reference","previous_headings":"","what":"Break up matrix terms — break_up_matrix_term","title":"Break up matrix terms — break_up_matrix_term","text":"Sometimes can terms formula refer matrix instead single predictor. function breaks matrix term individual predictors handle separately, probably intention user.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/break_up_matrix_term.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Break up matrix terms — break_up_matrix_term","text":"","code":"break_up_matrix_term(formula, data)"},{"path":"https://mc-stan.org/projpred/dev/reference/break_up_matrix_term.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Break up matrix terms — break_up_matrix_term","text":"formula formula valid model. data original data.frame matrix predictor.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/break_up_matrix_term.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Break up matrix terms — break_up_matrix_term","text":"list containing expanded formula expanded data.frame.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/cl_agg.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted averaging within clusters of parameter draws — cl_agg","title":"Weighted averaging within clusters of parameter draws — cl_agg","text":"function aggregates \\(S\\) parameter draws clustered \\(S_{\\mathrm{cl}}\\) clusters averaging across draws belong cluster. averaging can done weighted fashion.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/cl_agg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weighted averaging within clusters of parameter draws — cl_agg","text":"","code":"cl_agg(   draws,   cl = seq_len(nrow(draws)),   wdraws = rep(1, nrow(draws)),   eps_wdraws = 0 )"},{"path":"https://mc-stan.org/projpred/dev/reference/cl_agg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted averaging within clusters of parameter draws — cl_agg","text":"draws \\(S \\times P\\) matrix parameter draws, \\(P\\) denoting number parameters. cl numeric vector length \\(S\\), giving cluster indices draws. cluster indices need values set \\(\\{1,   ..., S_{\\mathrm{cl}}\\}\\), except draws dropped (e.g., thinning), case NA needs provided positions cl corresponding draws. wdraws numeric vector length \\(S\\), giving weights draws. matter whether normalized (.e., sum 1) internally, weights normalized sum 1 within cluster. Draws dropped (e.g., thinning) can (must necessarily) NA wdraws. eps_wdraws positive numeric value (typically small) used improve numerical stability: weights draws within cluster multiplied 1 - eps_wdraws. default 0 fine cases; argument exists help cases numerical instabilities occur (must detected user; function detect numerical instabilities ).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/cl_agg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted averaging within clusters of parameter draws — cl_agg","text":"\\(S_{\\mathrm{cl}} \\times P\\) matrix aggregated parameter draws.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/cl_agg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weighted averaging within clusters of parameter draws — cl_agg","text":"","code":"set.seed(323) S <- 100L P <- 3L draws <- matrix(rnorm(S * P), nrow = S, ncol = P) # Clustering example: S_cl <- 10L cl_draws <- sample.int(S_cl, size = S, replace = TRUE) draws_cl <- cl_agg(draws, cl = cl_draws) # Clustering example with nonconstant `wdraws`: w_draws <- rgamma(S, shape = 4) draws_cl <- cl_agg(draws, cl = cl_draws, wdraws = w_draws) # Thinning example (implying constant `wdraws`): S_th <- 50L idxs_thin <- round(seq(1, S, length.out = S_th)) th_draws <- rep(NA, S) th_draws[idxs_thin] <- seq_len(S_th) draws_th <- cl_agg(draws, cl = th_draws)"},{"path":"https://mc-stan.org/projpred/dev/reference/cv-indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Create cross-validation folds — cv-indices","title":"Create cross-validation folds — cv-indices","text":"helper functions create cross-validation (CV) folds, .e., split indices 1 n K subsets (\"folds\") \\(K\\)-fold CV. functions potentially useful creating input arguments cvfits cvfun init_refmodel() (argument cvfits cv_varsel.refmodel()). Function cvfolds() deprecated; please use cv_folds() instead (apart name, ). return value cv_folds() cv_ids() different, see details.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/cv-indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create cross-validation folds — cv-indices","text":"","code":"cv_folds(n, K, seed = NA)  cvfolds(n, K, seed = NA)  cv_ids(n, K, out = c(\"foldwise\", \"indices\"), seed = NA)"},{"path":"https://mc-stan.org/projpred/dev/reference/cv-indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create cross-validation folds — cv-indices","text":"n Number observations. K Number folds. Must least 2 exceed n. seed Pseudorandom number generation (PRNG) seed results can obtained needed. Passed argument seed set.seed(), can also NA call set.seed() . NA, PRNG state reset (state calling cv_folds() cv_ids()) upon exiting cv_folds() cv_ids(). Format output, either \"foldwise\" \"indices\". See details.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/cv-indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create cross-validation folds — cv-indices","text":"cv_folds() returns vector length n element integer 1 K denoting fold corresponding data point belongs . return value cv_ids() depends argument. = \"foldwise\", return value list K elements, list elements tr ts giving training test indices, respectively, corresponding fold. = \"indices\", return value list elements tr ts list K elements giving training test indices, respectively, fold.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/cv-indices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create cross-validation folds — cv-indices","text":"","code":"n <- 100 set.seed(1234) y <- rnorm(n) cv <- cv_ids(n, K = 5) # Mean within the test set of each fold: cvmeans <- sapply(cv, function(fold) mean(y[fold$ts]))"},{"path":"https://mc-stan.org/projpred/dev/reference/cv_proportions.html","id":null,"dir":"Reference","previous_headings":"","what":"Ranking proportions from fold-wise predictor rankings — cv_proportions","title":"Ranking proportions from fold-wise predictor rankings — cv_proportions","text":"Calculates ranking proportions fold-wise predictor rankings cross-validation (CV) fold-wise searches. given predictor \\(x\\) given submodel size \\(j\\), ranking proportion proportion CV folds predictor \\(x\\) position \\(j\\) predictor ranking. ranking proportions helpful investigating variability predictor ranking, can also cumulated across submodel sizes. cumulated ranking proportions helpful comes model selection.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/cv_proportions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ranking proportions from fold-wise predictor rankings — cv_proportions","text":"","code":"cv_proportions(object, ...)  # S3 method for class 'ranking' cv_proportions(object, cumulate = FALSE, ...)  # S3 method for class 'vsel' cv_proportions(object, ...)"},{"path":"https://mc-stan.org/projpred/dev/reference/cv_proportions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ranking proportions from fold-wise predictor rankings — cv_proportions","text":"object cv_proportions.ranking(): object class ranking (returned ranking()). cv_proportions.vsel(): object class vsel (returned varsel() cv_varsel()) ranking() applied internally calling cv_proportions.ranking(). ... cv_proportions.vsel(): arguments passed ranking.vsel() cv_proportions.ranking(). cv_proportions.ranking(): currently ignored. cumulate single logical value indicating whether ranking proportions cumulated across increasing submodel sizes (TRUE) (FALSE).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/cv_proportions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ranking proportions from fold-wise predictor rankings — cv_proportions","text":"numeric matrix containing ranking proportions. matrix nterms_max rows nterms_max columns, nterms_max specified (possibly implicit) ranking() call. rows correspond submodel sizes columns predictor terms (sorted according full-data predictor ranking). cumulate FALSE, returned matrix class cv_proportions. cumulate TRUE, returned matrix classes cv_proportions_cumul cv_proportions (order). Note cumulate FALSE, values returned matrix need sum 1 (column-wise row-wise) nterms_max (see ) equal full model size. Likewise, cumulate TRUE, value 1 needs occur column returned matrix nterms_max equal full model size. cv_proportions() function applicable ranking object includes fold-wise predictor rankings (.e., based vsel object created cv_varsel() validate_search = TRUE). ranking object contains full-data predictor ranking (.e., based vsel object created varsel() cv_varsel(), latter validate_search = FALSE), error thrown case, fold-wise predictor rankings calculate ranking proportions.","code":""},{"path":[]},{"path":"https://mc-stan.org/projpred/dev/reference/cv_proportions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ranking proportions from fold-wise predictor rankings — cv_proportions","text":"","code":"# For an example, see `?plot.cv_proportions`."},{"path":"https://mc-stan.org/projpred/dev/reference/cv_varsel.html","id":null,"dir":"Reference","previous_headings":"","what":"Run search and performance evaluation with cross-validation — cv_varsel","title":"Run search and performance evaluation with cross-validation — cv_varsel","text":"Run search part evaluation part projection predictive variable selection. search part determines predictor ranking (also known solution path), .e., best submodel submodel size (number predictor terms). evaluation part determines predictive performance submodels along predictor ranking. contrast varsel(), cv_varsel() performs cross-validation (CV) running search part training data CV fold separately (exception explained section \"Note\" ) running evaluation part corresponding test set CV fold. special method cv_varsel.vsel() re-uses search results earlier cv_varsel() (varsel()) run, illustrated main vignette.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/cv_varsel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run search and performance evaluation with cross-validation — cv_varsel","text":"","code":"cv_varsel(object, ...)  # Default S3 method cv_varsel(object, ...)  # S3 method for class 'vsel' cv_varsel(   object,   cv_method = object$cv_method %||% \"LOO\",   nloo = object$nloo,   K = object$K %||% if (!inherits(object, \"datafit\")) 5 else 10,   cvfits = object$cvfits,   validate_search = object$validate_search %||% TRUE,   ... )  # S3 method for class 'refmodel' cv_varsel(   object,   method = \"forward\",   cv_method = if (!inherits(object, \"datafit\")) \"LOO\" else \"kfold\",   ndraws = NULL,   nclusters = 20,   ndraws_pred = 400,   nclusters_pred = NULL,   refit_prj = !inherits(object, \"datafit\"),   nterms_max = NULL,   penalty = NULL,   verbose = getOption(\"projpred.verbose\", as.integer(interactive())),   nloo = if (cv_method == \"LOO\") object$nobs else NULL,   K = if (!inherits(object, \"datafit\")) 5 else 10,   cvfits = object$cvfits,   search_control = NULL,   lambda_min_ratio = 1e-05,   nlambda = 150,   thresh = 1e-06,   validate_search = TRUE,   seed = NA,   search_terms = NULL,   search_out = NULL,   parallel = getOption(\"projpred.parallel_cv\", FALSE),   ... )"},{"path":"https://mc-stan.org/projpred/dev/reference/cv_varsel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run search and performance evaluation with cross-validation — cv_varsel","text":"object object class refmodel (returned get_refmodel() init_refmodel()) object can passed argument object get_refmodel(). ... cv_varsel.default(): Arguments passed get_refmodel() well cv_varsel.refmodel(). cv_varsel.vsel(): Arguments passed cv_varsel.refmodel(). cv_varsel.refmodel(): Arguments passed divergence minimizer (see argument div_minimizer init_refmodel() well section \"Draw-wise divergence minimizers\" projpred-package) refitting submodels performance evaluation (refit_prj TRUE). cv_method CV method, either \"LOO\" \"kfold\". \"LOO\" case, Pareto-smoothed importance sampling leave-one-CV (PSIS-LOO CV) performed, avoids refitting reference model nloo times (contrast standard LOO-CV). \"kfold\" case, \\(K\\)-fold CV performed. See also section \"Note\" . nloo relevant cv_method = \"LOO\" validate_search = TRUE. nloo > 0 smaller number observations, full LOO-CV (.e., PSIS-LOO CV validate_search = TRUE nloo = n n denotes number observations) approximated subsampled LOO-CV, .e., combining fast (.e., validate_search = FALSE) LOO result selected models nloo leave-one-searches using difference estimator simple random sampling (SRS) without replacement (WOR) (Magnusson et al., 2020). Smaller nloo values lead faster computation, higher uncertainty evaluation part. NULL, observations used (default). Note performance statistic \"auc\" (see argument stats summary.vsel() plot.vsel()) supported case subsampled LOO-CV. Furthermore, option \"best\" argument baseline summary.vsel() plot.vsel() supported case subsampled LOO-CV. K relevant cv_method = \"kfold\" cvfits NULL (case reference model objects created get_refmodel.stanreg() brms::get_refmodel.brmsfit()). Number folds \\(K\\)-fold CV. cvfits relevant cv_method = \"kfold\". argument cvfits init_refmodel(), repeated output run_cvfun() can inserted straightforwardly. validate_search single logical value indicating whether cross-validate also search part, .e., whether run search separately CV fold (TRUE) (FALSE). FALSE, computation faster, predictive performance estimates selected submodels optimistically biased. However, fast biased estimates can useful obtain initial information usefulness projection predictive variable selection. method method search part. Possible options \"forward\" forward search \"L1\" L1 search. See also section \"Details\" . ndraws Number posterior draws used search part. Ignored nclusters NULL case L1 search (L1 search always uses single cluster). (nclusters ndraws) NULL, number posterior draws reference model used ndraws. See also section \"Details\" . nclusters Number clusters posterior draws used search part. Ignored case L1 search (L1 search always uses single cluster). meaning NULL, see argument ndraws. See also section \"Details\" . ndraws_pred relevant refit_prj TRUE. Number posterior draws used evaluation part. Ignored nclusters_pred NULL. (nclusters_pred ndraws_pred) NULL, number posterior draws reference model used ndraws_pred. See also section \"Details\" . nclusters_pred relevant refit_prj TRUE. Number clusters posterior draws used evaluation part. meaning NULL, see argument ndraws_pred. See also section \"Details\" . refit_prj evaluation part, projections onto submodels along predictor ranking performed using ndraws_pred draws nclusters_pred clusters (TRUE) projections search part, used ndraws draws nclusters clusters, re-used (FALSE)? nterms_max Maximum submodel size (number predictor terms) search continued. NULL, min(19, D) used D number terms reference model (search_terms, supplied). Note nterms_max count intercept, use nterms_max = 0 intercept-model. (Correspondingly, D count intercept.) penalty relevant L1 search. numeric vector determining relative penalties costs predictors. value 0 means predictors cost therefore selected first, whereas Inf means predictors never selected. NULL, 1 used predictor. verbose single integer value set \\(\\{0, 1, 2, 3,   4\\}\\) (varsel(), \\(3\\) \\(4\\) effect), indicating much information () print computations. Higher values indicate information printed, 0 deactivates verbose mode. Internally, argument verbose coerced integer via .integer(), technically, single logical value single numeric value work well. search_control list \"control\" arguments (.e., tuning parameters) search. case forward search, arguments passed divergence minimizer (see argument div_minimizer init_refmodel() well section \"Draw-wise divergence minimizers\" projpred-package). case forward search, NULL causes ... used performance evaluation, also search. case L1 search, possible arguments : lambda_min_ratio: Ratio smallest largest lambda L1-penalized search (default: 1e-5). parameter essentially determines long search carried , .e., large submodels explored. need change unless program gives warning . nlambda: Number values lambda grid L1-penalized search (default: 150). need change unless program gives warning . thresh: Convergence threshold computing L1 path (default: 1e-6). Usually, need change . lambda_min_ratio Deprecated (please use search_control instead). relevant L1 search. Ratio smallest largest lambda L1-penalized search. parameter essentially determines long search carried , .e., large submodels explored. need change unless program gives warning . nlambda Deprecated (please use search_control instead). relevant L1 search. Number values lambda grid L1-penalized search. need change unless program gives warning . thresh Deprecated (please use search_control instead). relevant L1 search. Convergence threshold computing L1 path. Usually, need change . seed Pseudorandom number generation (PRNG) seed results can obtained needed. Passed argument seed set.seed(), can also NA call set.seed() . NA, PRNG state reset (state calling cv_varsel()) upon exiting cv_varsel(). , seed used clustering reference model's posterior draws (!.null(nclusters) !.null(nclusters_pred)), subsampling PSIS-LOO CV folds (nloo smaller number observations), sampling folds \\(K\\)-fold CV, drawing new group-level effects predicting multilevel submodel (however, yet case GAMM). search_terms relevant forward search. custom character vector predictor term blocks consider search. Section \"Details\" describes precisely \"predictor term block\" means. intercept (\"1\") always included internally via union(), difference including explicitly omitting . default search_terms considers terms reference model's formula. search_out Intended internal use. parallel single logical value indicating whether run costly parts CV parallel (TRUE) (FALSE). See also section \"Note\" well section \"Parallelization\" projpred-package.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/cv_varsel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run search and performance evaluation with cross-validation — cv_varsel","text":"object class vsel. elements object meant accessed directly instead via helper functions (see main vignette projpred-package).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/cv_varsel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run search and performance evaluation with cross-validation — cv_varsel","text":"Arguments ndraws, nclusters, nclusters_pred, ndraws_pred automatically truncated number posterior draws reference model (1 datafits). Using less draws clusters ndraws, nclusters, nclusters_pred, ndraws_pred posterior draws reference model may result slightly inaccurate projection performance. Increasing arguments affects computation time linearly. argument method, restrictions: reference model multilevel additive formula terms reference model set augmented-data projection, forward search available. Furthermore, argument search_terms requires forward search take effect. L1 search faster forward search, forward search may accurate. Furthermore, forward search may find sparser model comparable performance found L1 search, may also overfit predictors added. overfit can detected running search validation (see cv_varsel()). L1 search may select interaction term involved lower-order interaction terms (including main-effect terms) selected. projpred versions > 2.6.0, resulting predictor ranking automatically modified lower-order interaction terms come interaction term, conceptually undesired, choose forward search instead. elements search_terms character vector need individual predictor terms. Instead, can building blocks consisting several predictor terms connected + symbol. understand building blocks work, important know projpred's forward search works: starts empty vector chosen later contain already selected predictor terms. , search iterates model sizes \\(j \\\\{0, ..., J\\}\\) (\\(J\\) denoting maximum submodel size, counting intercept). candidate models model size \\(j\\) constructed elements search_terms yield model size \\(j\\) combined chosen predictor terms. Note sometimes, may candidate models model size \\(j\\). Also note internally, search_terms expanded include intercept (\"1\"), first step search (model size 0) always consists intercept-model candidate. search_terms example, consider reference model formula y ~ x1 + x2 + x3. , ensure x1 always included candidate models, specify search_terms = c(\"x1\", \"x1 + x2\", \"x1 + x3\", \"x1 + x2 + x3\") (, simpler way leads results, search_terms = c(\"x1\", \"x1 + x2\", \"x1 + x3\"), helper function force_search_terms() exists). search start y ~ 1 candidate model size 0. model size 1, y ~ x1 candidate. model size 2, y ~ x1 + x2 y ~ x1 + x3 two candidates. last model size 3, y ~ x1 + x2 + x3 candidate. another example, exclude x1 search, specify search_terms = c(\"x2\", \"x3\", \"x2 + x3\") (, simpler way leads results, search_terms = c(\"x2\", \"x3\")).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/cv_varsel.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Run search and performance evaluation with cross-validation — cv_varsel","text":"validate_search FALSE, search included CV single full-data search run. number observations large, fast PSIS-LOO CV along full-data search path likely accurate. number observations small moderate, fast PSIS-LOO CV along full-data search path likely optimistic bias middle search path. result can used guide actions optimistic bias can greatly reduced using validate_search = TRUE. PSIS uses Pareto-\\(\\hat{k}\\) diagnostic assess reliability PSIS-LOO CV. Global option projpred.warn_psis (default TRUE) controls whether Pareto-\\(\\hat{k}\\) diagnostics may result warnings. See loo::loo-glossary interpret Pareto-\\(\\hat{k}\\) values warning thresholds. projpred support usually recommended moment-matching (see loo::loo_moment_match() brms::loo_moment_match()), mixture importance sampling (vignette(\"loo2-mixis\", package=\"loo\")), reloo-ing (brms::reloo()). reference model PSIS-LOO CV Pareto-\\(\\hat{k}\\) values good, high Pareto-\\(\\hat{k}\\) values projected models, can try increasing number draws used PSIS-LOO CV (ndraws case refit_prj = FALSE; ndraws_pred case refit_prj = TRUE). increasing number draws help reference model PSIS-LOO CV Pareto-\\(\\hat{k}\\) values high, reference model PSIS-LOO CV results change substantially using moment-matching, mixture importance sampling, reloo-ing, recommend use \\(K\\)-fold CV within projpred. PSIS-LOO CV, projpred calls loo::psis() (, exceptionally, loo::sis(), see ) r_eff = NA. problem extreme autocorrelation MCMC iterations reference model built. cases however, reference model used anyway, expect projpred's r_eff = NA problem. PSIS used number draws clusters small. cases, projpred resorts standard importance sampling (SIS) shows message . Throughout documentation, term \"PSIS\" used even though fact, projpred resorts SIS special cases. SIS used, check reference model PSIS-LOO CV Pareto-\\(\\hat{k}\\) values good. parallel = TRUE, costly parts projpred's CV can run parallel. Costly parts fold-wise searches performance evaluations case validate_search = TRUE. (Note case \\(K\\)-fold CV, \\(K\\) reference model refits affected argument parallel; projpred's CV affected.) parallelization powered foreach package. Thus, parallel (sequential) backend compatible foreach can used, e.g., backends packages doParallel, doMPI, doFuture. GLMs, CV parallelization work reliably, models (GLMMs), may lead excessive memory usage turn may crash R session (Unix systems, setting appropriate memory limit via unix::rlimit_as() may avoid crashing whole machine). However, problem excessive memory usage less pronounced CV parallelization projection parallelization described projpred-package. regard, CV parallelization recommended projection parallelization.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/cv_varsel.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Run search and performance evaluation with cross-validation — cv_varsel","text":"Magnusson, Måns, Michael Riis Andersen, Johan Jonasson, Aki Vehtari. 2020. \"Leave-One-Cross-Validation Bayesian Model Comparison Large Data.\" Proceedings 23rd International Conference Artificial Intelligence Statistics, edited Silvia Chiappa Roberto Calandra, 108:341–351. Proceedings Machine Learning Research. PMLR. https://proceedings.mlr.press/v108/magnusson20a.html. McLatchie, Yann, Sölvi Rögnvaldsson, Frank Weber, Aki Vehtari. 2025. \"Advances Projection Predictive Inference.\" Statistical Science, 40 (1):128–147. doi:10.1214/24-STS949 . Piironen, Juho, Markus Paasiniemi, Aki Vehtari. 2020. \"Projective Inference High-Dimensional Problems: Prediction Feature Selection.\" Electronic Journal Statistics, 14 (1):2155–2197. doi:10.1214/20-EJS1711 . Vehtari, Aki, Andrew Gelman, Jonah Gabry. 2017. \"Practical Bayesian Model Evaluation Using Leave-One-Cross-Validation WAIC.\" Statistics Computing, 27 (5):1413–32. doi:10.1007/s11222-016-9696-4 . Vehtari, Aki, Daniel Simpson, Andrew Gelman, Yuling Yao, Jonah Gabry. 2024. \"Pareto Smoothed Importance Sampling.\" Journal Machine Learning Research, 25 (72):1–58. https://jmlr.org/papers/v25/19-556.html.","code":""},{"path":[]},{"path":"https://mc-stan.org/projpred/dev/reference/cv_varsel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run search and performance evaluation with cross-validation — cv_varsel","text":"","code":"# Data: dat_gauss <- data.frame(y = df_gaussian$y, df_gaussian$x)  # The `stanreg` fit which will be used as the reference model (with small # values for `chains` and `iter`, but only for technical reasons in this # example; this is not recommended in general): fit <- rstanarm::stan_glm(   y ~ X1 + X2 + X3 + X4 + X5, family = gaussian(), data = dat_gauss,   QR = TRUE, chains = 2, iter = 1000, refresh = 0, seed = 9876 )  # Run cv_varsel() (with L1 search and small values for `K`, `nterms_max`, and # `nclusters_pred`, but only for the sake of speed in this example; this is # not recommended in general): cvvs <- cv_varsel(fit, method = \"L1\", cv_method = \"kfold\", K = 2,                   nterms_max = 3, nclusters_pred = 10, seed = 5555) #> Fitting model 1 out of 2 #> Fitting model 2 out of 2 # Now see, for example, `?print.vsel`, `?plot.vsel`, `?suggest_size.vsel`, # and `?ranking` for possible post-processing functions."},{"path":"https://mc-stan.org/projpred/dev/reference/df_binom.html","id":null,"dir":"Reference","previous_headings":"","what":"Binomial toy example — df_binom","title":"Binomial toy example — df_binom","text":"Binomial toy example","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/df_binom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Binomial toy example — df_binom","text":"","code":"df_binom"},{"path":"https://mc-stan.org/projpred/dev/reference/df_binom.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Binomial toy example — df_binom","text":"simulated classification dataset containing 100 observations. y response, 0 1. x predictors, 30 total.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/df_binom.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Binomial toy example — df_binom","text":"https://web.stanford.edu/~hastie/glmnet/glmnetData/BNExample.RData","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/df_gaussian.html","id":null,"dir":"Reference","previous_headings":"","what":"Gaussian toy example — df_gaussian","title":"Gaussian toy example — df_gaussian","text":"Gaussian toy example","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/df_gaussian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gaussian toy example — df_gaussian","text":"","code":"df_gaussian"},{"path":"https://mc-stan.org/projpred/dev/reference/df_gaussian.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Gaussian toy example — df_gaussian","text":"simulated regression dataset containing 100 observations. y response, real-valued. x predictors, 20 total. Mean SD approximately 0 1, respectively.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/df_gaussian.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Gaussian toy example — df_gaussian","text":"https://web.stanford.edu/~hastie/glmnet/glmnetData/QSExample.RData","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/do_call.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute a function call — do_call","title":"Execute a function call — do_call","text":"Execute function call similar .call(), without deparsing function arguments.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/do_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute a function call — do_call","text":"","code":"do_call(what, args, pkg = NULL)"},{"path":"https://mc-stan.org/projpred/dev/reference/do_call.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute a function call — do_call","text":"Either function non-empty character string naming function called. args list arguments function call. names attribute args gives argument names. pkg Optional name package search function character string.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/do_call.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute a function call — do_call","text":"result (evaluated) function call.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/extend_family.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend a family — extend_family","title":"Extend a family — extend_family","text":"function adds internally required elements object class family (see, e.g., family()). called internally init_refmodel(), rarely need call .","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/extend_family.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extend a family — extend_family","text":"","code":"extend_family(   family,   latent = FALSE,   latent_y_unqs = NULL,   latent_ilink = NULL,   latent_ll_oscale = NULL,   latent_ppd_oscale = NULL,   augdat_y_unqs = NULL,   augdat_link = NULL,   augdat_ilink = NULL,   augdat_args_link = list(),   augdat_args_ilink = list(),   ... )"},{"path":"https://mc-stan.org/projpred/dev/reference/extend_family.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extend a family — extend_family","text":"family object class family. latent single logical value indicating whether use latent projection (TRUE) (FALSE). Note setting latent = TRUE causes arguments starting augdat_ ignored. latent_y_unqs relevant latent projection original response space finite support (.e., original response values may regarded categories), case needs character vector unique response values (assigned family$cats internally) may left NULL (projpred try infer family$cats). See also section \"Latent projection\" . latent_ilink relevant latent projection, case needs inverse-link function. original response family binomial() poisson() family, latent_ilink can NULL, case internal default used. Can also NULL cases, internal default based family$linkinv used might work families. See also section \"Latent projection\" . latent_ll_oscale relevant latent projection, case needs function computing response-scale (latent-scale) log-likelihood values. !.null(family$cats) (taking latent_y_unqs account) original response family binomial() poisson() family, latent_ll_oscale can NULL, case internal default used. Can also NULL cases, downstream functions limited functionality (message thrown extend_family() state exactly available). See also section \"Latent projection\" . latent_ppd_oscale relevant latent projection, case needs function sampling response values given latent predictors transformed response scale using latent_ilink. !.null(family$cats) (taking latent_y_unqs account) original response family binomial() poisson() family, latent_ppd_oscale can NULL, case internal default used. Can also NULL cases, downstream functions limited functionality (message thrown extend_family() state exactly available). See also section \"Latent projection\" . Note although function abbreviation \"PPD\" name (stands \"posterior predictive distribution\"), projpred currently uses proj_predict(), .e., sampling better termed posterior-projection predictive distribution (PPPD). augdat_y_unqs relevant augmented-data projection, case needs character vector unique response values (assigned family$cats internally) may left NULL family$cats already non-NULL. See also section \"Augmented-data projection\" . augdat_link relevant augmented-data projection, case needs link function. Use NULL traditional projection. See also section \"Augmented-data projection\" . augdat_ilink relevant augmented-data projection, case needs inverse-link function. Use NULL traditional projection. See also section \"Augmented-data projection\" . augdat_args_link relevant augmented-data projection, case may named list arguments pass function supplied augdat_link. augdat_args_ilink relevant augmented-data projection, case may named list arguments pass function supplied augdat_ilink. ... Ignored (exists swallow arguments might passed function).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/extend_family.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extend a family — extend_family","text":"family object extended way needed projpred.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/extend_family.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extend a family — extend_family","text":"following, \\(N\\), \\(C_{\\mathrm{cat}}\\), \\(C_{\\mathrm{lat}}\\), \\(S_{\\mathrm{ref}}\\), \\(S_{\\mathrm{prj}}\\) help topic refmodel-init-get used. Note \\(N\\) necessarily denote number original observations; can also refer new observations. Furthermore, let \\(S\\) denote either \\(S_{\\mathrm{ref}}\\) \\(S_{\\mathrm{prj}}\\), whichever appropriate context used.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/extend_family.html","id":"augmented-data-projection","dir":"Reference","previous_headings":"","what":"Augmented-data projection","title":"Extend a family — extend_family","text":"first input, functions supplied arguments augdat_link augdat_ilink accept: augdat_link: \\(S \\times N \\times C_{\\mathrm{cat}}\\) array containing probabilities response categories. order response categories family$cats (see argument augdat_y_unqs). augdat_ilink: \\(S \\times N \\times C_{\\mathrm{lat}}\\) array containing linear predictors. return value functions needs : augdat_link: \\(S \\times N \\times C_{\\mathrm{lat}}\\) array containing linear predictors. augdat_ilink: \\(S \\times N \\times C_{\\mathrm{cat}}\\) array containing probabilities response categories. order response categories family$cats (see argument augdat_y_unqs). augmented-data projection, response vector resulting extract_model_data (see init_refmodel()) coerced factor (using .factor()) multiple places throughout package. Inside init_refmodel(), levels factor identical family$cats (applying extend_family() inside init_refmodel()). Everywhere else, levels subset <refmodel>$family$cats (<refmodel> object resulting init_refmodel()). See argument augdat_y_unqs control family$cats. ordinal brms families, aware submodels (onto reference model projected) currently following restrictions: discrimination parameter disc supported (.e., constant value 1). thresholds \"flexible\" (see brms::brmsfamily()). thresholds vary across levels factor-like variable (see argument gr brms::resp_thres()). \"probit_approx\" link replaced \"probit\". brms::categorical() family, aware : multilevel submodels, group-level effects allowed correlated different response categories. multilevel submodels, mclogit versions < 0.9.4 may throw error '' (<number> x 1) must square. Updating mclogit version >= 0.9.4 fix .","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/extend_family.html","id":"latent-projection","dir":"Reference","previous_headings":"","what":"Latent projection","title":"Extend a family — extend_family","text":"function supplied argument latent_ilink needs prototype   : lpreds accepts \\(S \\times N\\) matrix containing linear predictors. cl_ref accepts numeric vector length \\(S_{\\mathrm{ref}}\\), containing projpred's internal cluster indices draws. wdraws_ref accepts numeric vector length \\(S_{\\mathrm{ref}}\\), containing weights draws. weights treated normalized (.e., necessarily sum 1). return value latent_ilink needs contain linear predictors transformed original response space, following structure: .null(family$cats) (taking latent_y_unqs account): \\(S \\times N\\) matrix. !.null(family$cats) (taking latent_y_unqs account): \\(S \\times N \\times C_{\\mathrm{cat}}\\) array. case, latent_ilink needs return probabilities (response categories given family$cats, taking latent_y_unqs account). function supplied argument latent_ll_oscale needs prototype   : ilpreds accepts return value latent_ilink. dis accepts vector length \\(S\\) containing dispersion parameter draws. y_oscale accepts vector length \\(N\\) containing response values original response scale. wobs accepts numeric vector length \\(N\\) containing observation weights. cl_ref accepts input argument cl_ref latent_ilink. wdraws_ref accepts input argument wdraws_ref latent_ilink. return value latent_ll_oscale needs \\(S \\times N\\) matrix containing response-scale (latent-scale) log-likelihood values \\(N\\) observations inputs. function supplied argument latent_ppd_oscale needs prototype   : ilpreds_resamp accepts return value latent_ilink, possibly resampled (clustered) draws (see argument nresample_clusters proj_predict()). dis_resamp accepts vector length dim(ilpreds_resamp)[1] containing dispersion parameter draws, possibly resampled (way draws ilpreds_resamp, see also argument idxs_prjdraws). wobs accepts numeric vector length \\(N\\) containing observation weights. cl_ref accepts input argument cl_ref latent_ilink. wdraws_ref accepts input argument wdraws_ref latent_ilink. idxs_prjdraws accepts numeric vector length dim(ilpreds_resamp)[1] containing resampled indices projected draws (.e., indices values set \\(\\{1, ..., \\texttt{dim(ilpreds)[1]}\\}\\) ilpreds denotes return value latent_ilink). return value latent_ppd_oscale needs \\(\\texttt{dim(ilpreds\\_resamp)[1]} \\times N\\) matrix containing response-scale (latent-scale) draws posterior(-projection) predictive distributions \\(N\\) observations inputs. bodies three functions involve parameter draws reference model projected (e.g., latent_ilink, thresholds ordinal model), cl_agg() provided helper function aggregating reference model draws way draws aggregated first argument functions (e.g., lpreds case latent_ilink). fact, weights passed argument wdraws_ref nonconstant case cv_varsel() cv_method = \"LOO\" validate_search = TRUE. case, weights passed argument PSIS-LOO CV weights one observation. Note although argument wdraws_ref suffix _ref, wdraws_ref necessarily obtain weights initial reference model's posterior draws: case cv_varsel() cv_method = \"kfold\", weights may refer one \\(K\\) reference model refits (case, constant anyway). family$cats NULL (taking latent_y_unqs account), response vector resulting extract_model_data (see init_refmodel()) coerced factor (using .factor()) multiple places throughout package. Inside init_refmodel(), levels factor identical family$cats (applying extend_family() inside init_refmodel()). Everywhere else, levels subset <refmodel>$family$cats (<refmodel> object resulting init_refmodel()).","code":"latent_ilink(lpreds, cl_ref, wdraws_ref = rep(1, length(cl_ref))) latent_ll_oscale(ilpreds, dis, y_oscale, wobs = rep(1, length(y_oscale)),                  cl_ref, wdraws_ref = rep(1, length(cl_ref))) latent_ppd_oscale(ilpreds_resamp, dis_resamp, wobs, cl_ref,                   wdraws_ref = rep(1, length(cl_ref)), idxs_prjdraws)"},{"path":"https://mc-stan.org/projpred/dev/reference/extra-families.html","id":null,"dir":"Reference","previous_headings":"","what":"Extra family objects — extra-families","title":"Extra family objects — extra-families","text":"Family objects set default family objects.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/extra-families.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extra family objects — extra-families","text":"","code":"Student_t(link = \"identity\", nu = 3)"},{"path":"https://mc-stan.org/projpred/dev/reference/extra-families.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extra family objects — extra-families","text":"link Name link function. contrast default family objects, character string . nu Degrees freedom Student-\\(t\\) distribution.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/extra-families.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extra family objects — extra-families","text":"family object analogous described family.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/extra-families.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Extra family objects — extra-families","text":"Support Student_t() family still experimental.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/force_search_terms.html","id":null,"dir":"Reference","previous_headings":"","what":"Force search terms — force_search_terms","title":"Force search terms — force_search_terms","text":"helper function construct input argument search_terms varsel() cv_varsel() certain predictor terms forced selected first whereas predictor terms optional (.e., subject variable selection, inclusion \"forced\" terms).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/force_search_terms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Force search terms — force_search_terms","text":"","code":"force_search_terms(forced_terms, optional_terms)"},{"path":"https://mc-stan.org/projpred/dev/reference/force_search_terms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Force search terms — force_search_terms","text":"forced_terms character vector predictor terms selected first. optional_terms character vector predictor terms subject variable selection inclusion \"forced\" terms.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/force_search_terms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Force search terms — force_search_terms","text":"character vector may used input argument search_terms varsel() cv_varsel().","code":""},{"path":[]},{"path":"https://mc-stan.org/projpred/dev/reference/force_search_terms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Force search terms — force_search_terms","text":"","code":"# Data: dat_gauss <- data.frame(y = df_gaussian$y, df_gaussian$x)  # The `stanreg` fit which will be used as the reference model (with small # values for `chains` and `iter`, but only for technical reasons in this # example; this is not recommended in general): fit <- rstanarm::stan_glm(   y ~ X1 + X2 + X3 + X4 + X5, family = gaussian(), data = dat_gauss,   QR = TRUE, chains = 2, iter = 500, refresh = 0, seed = 9876 )  # We will force X1 and X2 to be selected first: search_terms_forced <- force_search_terms(   forced_terms = paste0(\"X\", 1:2),   optional_terms = paste0(\"X\", 3:5) )  # Run varsel() (here without cross-validation and with small values for # `nterms_max`, `nclusters`, and `nclusters_pred`, but only for the sake of # speed in this example; this is not recommended in general): vs <- varsel(fit, nclusters = 5, nclusters_pred = 10,              search_terms = search_terms_forced, seed = 5555) # Now see, for example, `?print.vsel`, `?plot.vsel`, `?suggest_size.vsel`, # and `?ranking` for possible post-processing functions."},{"path":"https://mc-stan.org/projpred/dev/reference/internal-global-options.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal global options — internal-global-options","title":"Internal global options — internal-global-options","text":"following global options internal use: projpred.mssg_ndraws, projpred.mssg_cut_search, projpred.mssg_time, projpred.warn_wobs_ppd, projpred.warn_additive_experimental, projpred.warn_allrandom_dis, projpred.warn_instable_projections, projpred.warn_cvrefbuilder_NULL, projpred.warn_kfold_refits: single logical value indicating whether throw certain messages warnings (depending midfix mssg warn, respectively). exact meaning global options, see occurrences codebase. exception projpred.warn_allrandom_dis, global options currently used unit tests deactivate messages warnings. Global option projpred.warn_instable_projections also used (invisibly) latent vignette suppress corresponding warnings illustrating underlying issue (instable projections). projpred.additional_checks: single logical value indicating whether run additional checks necessary run users call corresponding projpred functions. Currently, checks activated unit tests. projpred.glm_fitter: character string naming function used submodel fitter non-multilevel, non-additive projections. Currently, experimental feature allowed values \"fit_glm_ridge_callback\" (default) \"fit_glm_callback\". projpred.gaussian_not_as_generalized: single logical value indicating whether treat gaussian() family family generalized linear model (.e., glm() typically used model fitting function outside projpred), family explicit linear model (.e., lm() typically used model fitting function outside projpred). also holds models multilevel terms (lme4 offers lme4::glmer() lme4::lmer()). Currently, experimental feature. projpred.PQL: single logical value indicating whether use MASS::glmmPQL() submodel fitter multilevel (non-additive) projections (see GitHub issue #207 GitHub pull request #353). Currently, experimental feature.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/mesquite.html","id":null,"dir":"Reference","previous_headings":"","what":"Mesquite data set — mesquite","title":"Mesquite data set — mesquite","text":"mesquite bushes yields dataset Gelman Hill (2006) (https://sites.stat.columbia.edu/gelman/arm/).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/mesquite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mesquite data set — mesquite","text":"","code":"mesquite"},{"path":"https://mc-stan.org/projpred/dev/reference/mesquite.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Mesquite data set — mesquite","text":"response variable total weight (grams) photosynthetic material derived actual harvesting bush. predictor variables : diam1 diameter canopy (leafy area bush) meters, measured along longer axis bush. diam2 canopy diameter measured along shorter axis. canopy height height canopy. total height total height bush. density plant unit density (# primary stems per plant unit). group group measurements (0 first group, 1 second group).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/mesquite.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mesquite data set — mesquite","text":"https://sites.stat.columbia.edu/gelman/arm/examples/mesquite/mesquite.dat","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/mesquite.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Mesquite data set — mesquite","text":"Gelman, Andrew, Jennifer Hill. 2006. Data Analysis Using Regression Multilevel/Hierarchical Models. Cambridge, UK: Cambridge University Press. doi:10.1017/CBO9780511790942 .","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/performances.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictive performance results — performances","title":"Predictive performance results — performances","text":"Retrieves predictive performance summaries running varsel() cv_varsel(). summaries computed summary.vsel(), main method performances() performances.vselsummary() (objects class vselsummary returned summary.vsel()). shortcut method, performances.vsel() provided well (objects class vsel returned varsel() cv_varsel()). graphical representation, see plot.vsel().","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/performances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictive performance results — performances","text":"","code":"performances(object, ...)  # S3 method for class 'vselsummary' performances(object, ...)  # S3 method for class 'vsel' performances(object, ...)"},{"path":"https://mc-stan.org/projpred/dev/reference/performances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictive performance results — performances","text":"object object retrieve predictive performance results. Possible classes may inferred names corresponding methods (see also description). ... performances.vsel(): arguments passed summary.vsel(). performances.vselsummary(): currently ignored.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/performances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predictive performance results — performances","text":"object class performances list following elements: submodels: predictive performance results submodels, data.frame. reference_model: predictive performance results reference model, named vector.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/performances.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predictive performance results — performances","text":"","code":"# Data: dat_gauss <- data.frame(y = df_gaussian$y, df_gaussian$x)  # The `stanreg` fit which will be used as the reference model (with small # values for `chains` and `iter`, but only for technical reasons in this # example; this is not recommended in general): fit <- rstanarm::stan_glm(   y ~ X1 + X2 + X3 + X4 + X5, family = gaussian(), data = dat_gauss,   QR = TRUE, chains = 2, iter = 500, refresh = 0, seed = 9876 )  # Run varsel() (here without cross-validation, with L1 search, and with small # values for `nterms_max` and `nclusters_pred`, but only for the sake of # speed in this example; this is not recommended in general): vs <- varsel(fit, method = \"L1\", nterms_max = 3, nclusters_pred = 10,              seed = 5555) print(performances(vs)) #> $submodels #>   size      elpd  elpd.se   elpd.diff elpd.diff.se #> 1    0 -249.1981 5.256908 -39.1341918     5.759373 #> 2    1 -230.5763 5.621175 -20.5123784     4.479675 #> 3    2 -219.8008 6.029368  -9.7369536     3.363230 #> 4    3 -210.5013 6.559977  -0.4374522     0.896227 #>  #> $reference_model #>        elpd     elpd.se  #> -210.063880    6.562731  #>  #> attr(,\"class\") #> [1] \"performances\""},{"path":"https://mc-stan.org/projpred/dev/reference/plot.cv_proportions.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot ranking proportions from fold-wise predictor rankings — plot.cv_proportions","title":"Plot ranking proportions from fold-wise predictor rankings — plot.cv_proportions","text":"Plots ranking proportions (see cv_proportions()) fold-wise predictor rankings cross-validation fold-wise searches. visualization transposed matrix returned cv_proportions(). proportions printed text inside colored tiles rounded whole percentage points (plotted proportions rounded).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/plot.cv_proportions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot ranking proportions from fold-wise predictor rankings — plot.cv_proportions","text":"","code":"# S3 method for class 'cv_proportions' plot(   x,   text_angle = getOption(\"projpred.plot_cv_proportions_text_angle\", NULL),   ... )  # S3 method for class 'ranking' plot(x, ...)"},{"path":"https://mc-stan.org/projpred/dev/reference/plot.cv_proportions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot ranking proportions from fold-wise predictor rankings — plot.cv_proportions","text":"x plot.cv_proportions(): object class cv_proportions (returned cv_proportions(), possibly cumulate = TRUE). plot.ranking(): object class ranking (returned ranking()) cv_proportions() applied internally calling plot.cv_proportions(). text_angle Passed argument angle ggplot2::element_text() y-axis tick labels. case long predictor names, text_angle = 45 might helpful (example). ... plot.ranking(): arguments passed cv_proportions.ranking() plot.cv_proportions(). plot.cv_proportions(): currently ignored.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/plot.cv_proportions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot ranking proportions from fold-wise predictor rankings — plot.cv_proportions","text":"ggplot2 plotting object (class gg ggplot).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/plot.cv_proportions.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot ranking proportions from fold-wise predictor rankings — plot.cv_proportions","text":"Idea original code Aki Vehtari. Slight modifications original code Frank Weber, Yann McLatchie, Sölvi Rögnvaldsson. Final implementation projpred Frank Weber.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/plot.cv_proportions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot ranking proportions from fold-wise predictor rankings — plot.cv_proportions","text":"","code":"# Data: dat_gauss <- data.frame(y = df_gaussian$y, df_gaussian$x)  # The `stanreg` fit which will be used as the reference model (with small # values for `chains` and `iter`, but only for technical reasons in this # example; this is not recommended in general): fit <- rstanarm::stan_glm(   y ~ X1 + X2 + X3 + X4 + X5, family = gaussian(), data = dat_gauss,   QR = TRUE, chains = 2, iter = 1000, refresh = 0, seed = 9876 )  # Run cv_varsel() (with L1 search and small values for `K`, `nterms_max`, and # `nclusters_pred`, but only for the sake of speed in this example; this is # not recommended in general): cvvs <- cv_varsel(fit, method = \"L1\", cv_method = \"kfold\", K = 2,                   nterms_max = 3, nclusters_pred = 10, seed = 5555) #> Fitting model 1 out of 2 #> Fitting model 2 out of 2  # Extract predictor rankings: rk <- ranking(cvvs)  # Compute ranking proportions: pr_rk <- cv_proportions(rk)  # Visualize the ranking proportions: gg_pr_rk <- plot(pr_rk) print(gg_pr_rk)   # Since the object returned by plot.cv_proportions() is a standard ggplot2 # plotting object, you can modify the plot easily, e.g., to remove the # legend: print(gg_pr_rk + ggplot2::theme(legend.position = \"none\"))"},{"path":"https://mc-stan.org/projpred/dev/reference/plot.vsel.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot predictive performance — plot.vsel","title":"Plot predictive performance — plot.vsel","text":"plot() method vsel objects (returned varsel() cv_varsel()). visualizes predictive performance reference model (possibly also \"baseline\" model) submodels along full-data predictor ranking. Basic information (CV) variability ranking predictors included well (available; inferred cv_proportions()). tabular representation, see summary.vsel() performances().","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/plot.vsel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot predictive performance — plot.vsel","text":"","code":"# S3 method for class 'vsel' plot(   x,   nterms_max = NULL,   stats = \"elpd\",   deltas = FALSE,   alpha = 2 * pnorm(-1),   baseline = if (!inherits(x$refmodel, \"datafit\")) \"ref\" else \"best\",   thres_elpd = NA,   resp_oscale = TRUE,   point_size = getOption(\"projpred.plot_vsel_point_size\", 3),   bar_thickness = getOption(\"projpred.plot_vsel_bar_thickness\", 1),   ranking_nterms_max = getOption(\"projpred.plot_vsel_ranking_nterms_max\", NULL),   ranking_abbreviate = getOption(\"projpred.plot_vsel_ranking_abbreviate\", FALSE),   ranking_abbreviate_args = getOption(\"projpred.plot_vsel_ranking_abbreviate_args\",     list()),   ranking_repel = getOption(\"projpred.plot_vsel_ranking_repel\", NULL),   ranking_repel_args = getOption(\"projpred.plot_vsel_ranking_repel_args\", list()),   ranking_colored = getOption(\"projpred.plot_vsel_ranking_colored\", FALSE),   show_cv_proportions = getOption(\"projpred.plot_vsel_show_cv_proportions\", FALSE),   cumulate = FALSE,   text_angle = getOption(\"projpred.plot_vsel_text_angle\", 45),   size_position = getOption(\"projpred.plot_vsel_size_position\", \"primary_x_top\"),   ... )"},{"path":"https://mc-stan.org/projpred/dev/reference/plot.vsel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot predictive performance — plot.vsel","text":"x object class vsel (returned varsel() cv_varsel()). nterms_max Maximum submodel size (number predictor terms) performance statistics calculated. Using NULL effectively length(ranking(object)$fulldata). Note nterms_max count intercept, use nterms_max = 0 intercept-model. plot.vsel(), nterms_max must least 1. stats One character strings determining performance statistics (.e., utilities losses) estimate based observations evaluation (\"test\") set (case cross-validation, observations partitioned multiple test sets; case varsel() d_test = NULL, observations test set training set). Available statistics : \"elpd\": expected log (pointwise) predictive density (new dataset) (ELPD). Estimated sum observation-specific log predictive density values (predictive density values —possibly weighted—average across parameter draws). corresponding uncertainty interval, normal approximation used. \"mlpd\": mean log predictive density (MLPD), , ELPD divided number observations. corresponding uncertainty interval, normal approximation used. \"gmpd\": geometric mean predictive density (GMPD), , exp() MLPD. GMPD especially helpful discrete response families (, GMPD bounded zero one). corresponding standard error, delta method used. corresponding uncertainty interval type \"exponentiated normal approximation\" uncertainty interval bounds exponentiated uncertainty interval bounds MLPD. \"mse\": mean squared error (available situations mentioned section \"Details\" ). corresponding uncertainty interval, log-normal approximation used deltas FALSE normal approximation used deltas TRUE (\"mixed\", case plot.vsel()). \"rmse\": root mean squared error (available situations mentioned section \"Details\" ). corresponding standard error, delta method used. corresponding uncertainty interval, log-normal approximation used deltas FALSE normal approximation used deltas TRUE (\"mixed\", case plot.vsel()). \"R2\": R-squared, .e., coefficient determination (available situations mentioned section \"Details\" ). corresponding standard error, delta method used. corresponding uncertainty interval, normal approximation used. \"acc\" (alias, \"pctcorr\"): classification accuracy (available situations mentioned section \"Details\" ). \"classification accuracy\", mean proportion correctly classified observations. , response category (\"class\") highest probability (probabilities model-based) taken prediction (\"classification\") observation. corresponding uncertainty interval, normal approximation used. \"auc\": area ROC curve (available situations mentioned section \"Details\" ). corresponding standard error lower upper uncertainty interval bounds, bootstrapping used. supported case subsampled LOO-CV (see argument nloo cv_varsel()). deltas May set FALSE, TRUE, \"mixed\". FALSE, submodel performance statistics plotted actual scale uncertainty bars match scale. TRUE, submodel statistics plotted relatively baseline model (see argument baseline) uncertainty bars match scale. GMPD, term \"relatively\" refers ratio vs. baseline model (.e., submodel statistic divided baseline model statistic). stats, \"relatively\" refers difference baseline model (.e., submodel statistic minus baseline model statistic). set \"mixed\", deltas = FALSE point estimates combined uncertainty bars deltas = TRUE plot. alpha number determining (nominal) coverage 1 - alpha uncertainty intervals. example, case normal-approximation uncertainty interval, alpha = 2 * pnorm(-1) corresponds uncertainty interval stretching one standard error either side point estimate. baseline summary.vsel(): relevant deltas TRUE. plot.vsel(): Always relevant. Either \"ref\" \"best\", indicating whether baseline reference model best submodel found (terms stats[1]), respectively. case subsampled LOO-CV, baseline = \"best\" supported. thres_elpd relevant (stats %% c(\"elpd\", \"mlpd\", \"gmpd\")). threshold ELPD difference (taking submodel's ELPD minus baseline model's ELPD) submodel's ELPD considered close enough baseline model's ELPD. equivalent rule applied case MLPD GMPD. See suggest_size() formalization. Supplying NA deactivates . resp_oscale relevant latent projection. single logical value indicating whether calculate performance statistics original response scale (TRUE) latent scale (FALSE). point_size Passed argument size ggplot2::geom_point() controls size points. bar_thickness Passed argument linewidth ggplot2::geom_linerange() controls thickness uncertainty bars. ranking_nterms_max Maximum submodel size (number predictor terms) predictor names corresponding ranking proportions added x-axis. Using NULL effectively using nterms_max. Using NA causes predictor names corresponding ranking proportions omitted, requires size_position = \"primary_x_bottom\". Note ranking_nterms_max count intercept, ranking_nterms_max = 1 corresponds submodel consisting first (non-intercept) predictor term. ranking_abbreviate single logical value indicating whether predictor names full-data predictor ranking abbreviated abbreviate() (TRUE) (FALSE). See also argument ranking_abbreviate_args section \"Value\". ranking_abbreviate_args list arguments (except names.arg) passed abbreviate() case ranking_abbreviate = TRUE. ranking_repel Either NULL, \"text\", \"label\". NULL, full-data predictor ranking corresponding ranking proportions placed x-axis. \"text\" \"label\", placed within plotting area, using ggrepel::geom_text_repel() ggrepel::geom_label_repel(), respectively. See also argument ranking_repel_args. ranking_repel_args list arguments (except mapping) passed ggrepel::geom_text_repel() ggrepel::geom_label_repel() case ranking_repel = \"text\" ranking_repel = \"label\", respectively. ranking_colored single logical value indicating whether points uncertainty bars gradient-colored according CV ranking proportions (TRUE, currently works show_cv_proportions TRUE well) (FALSE). CV ranking proportions may cumulated (see argument cumulate). Note point uncertainty bar submodel size 0 (.e., intercept-model) always colored gray intercept forced selected predictors selected (words, reason submodel size 0, question variability across CV folds appropriate first place). show_cv_proportions single logical value indicating whether CV ranking proportions (see cv_proportions()) displayed (TRUE) (FALSE). cumulate Passed argument cumulate cv_proportions(). Affects ranking proportions given x-axis (full-data predictor ranking). text_angle Passed argument angle ggplot2::element_text() x-axis tick labels. Note default argument angle ggplot2::element_text() NULL (implies rotation) whereas use default text_angle = 45 . text_angle > 0 (< 0), x-axis text automatically right-aligned (left-aligned). -90 < text_angle && text_angle < 90 && text_angle != 0, x-axis text also top-aligned. controlling text_angle via global option projpred.plot_vsel_text_angle, keep mind global option set NULL treated like unset global option, options(projpred.plot_vsel_text_angle = NULL) result text_angle = 45, text_angle = 0. size_position single character string specifying position submodel sizes. Either \"primary_x_bottom\" including x-axis tick labels, \"primary_x_top\" putting x-axis (current default), \"secondary_x\" putting secondary x-axis. Currently, \"primary_x_top\" \"secondary_x\" may combined ranking_nterms_max = NA (.e., \"primary_x_bottom\" works ranking_nterms_max = NA). ... Arguments passed internal function used bootstrapping (applicable; see argument stats). Currently, relevant arguments B (number bootstrap samples, defaulting 2000) seed (see set.seed(), defaulting NA set.seed() called within function ).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/plot.vsel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot predictive performance — plot.vsel","text":"ggplot2 plotting object (class gg ggplot). ranking_abbreviate TRUE, output abbreviate() stored attribute called projpred_ranking_abbreviated (allow abbreviations easily mapped back original predictor names).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/plot.vsel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot predictive performance — plot.vsel","text":"stats options \"mse\", \"rmse\", \"R2\" available : traditional projection, latent projection resp_oscale = FALSE, latent projection resp_oscale = TRUE combination <refmodel>$family$cats NULL. stats option \"acc\" (= \"pctcorr\") available : binomial() family case traditional projection, families case augmented-data projection, binomial() family (original response scale) case latent projection resp_oscale = TRUE combination <refmodel>$family$cats NULL, families (original response scale) case latent projection resp_oscale = TRUE combination <refmodel>$family$cats NULL. stats option \"auc\" available : binomial() family case traditional projection, binomial() family (original response scale) case latent projection resp_oscale = TRUE combination <refmodel>$family$cats NULL. Note stats option \"auc\" supported case subsampled LOO-CV (see argument nloo cv_varsel()).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/plot.vsel.html","id":"horizontal-lines","dir":"Reference","previous_headings":"","what":"Horizontal lines","title":"Plot predictive performance — plot.vsel","text":"long reference model's performance computable, always shown plot dashed red horizontal line. baseline = \"best\", baseline model's performance shown dotted black horizontal line. !.na(thres_elpd) (stats %% c(\"elpd\", \"mlpd\", \"gmpd\")), value supplied thres_elpd (automatically adapted internally case MLPD GMPD deltas = FALSE deltas = \"mixed\") shown dot-dashed gray horizontal line reference model , baseline = \"best\", long-dashed green horizontal line baseline model.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/plot.vsel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot predictive performance — plot.vsel","text":"","code":"# Data: dat_gauss <- data.frame(y = df_gaussian$y, df_gaussian$x)  # The `stanreg` fit which will be used as the reference model (with small # values for `chains` and `iter`, but only for technical reasons in this # example; this is not recommended in general): fit <- rstanarm::stan_glm(   y ~ X1 + X2 + X3 + X4 + X5, family = gaussian(), data = dat_gauss,   QR = TRUE, chains = 2, iter = 500, refresh = 0, seed = 9876 )  # Run varsel() (here without cross-validation, with L1 search, and with small # values for `nterms_max` and `nclusters_pred`, but only for the sake of # speed in this example; this is not recommended in general): vs <- varsel(fit, method = \"L1\", nterms_max = 3, nclusters_pred = 10,              seed = 5555) print(plot(vs))"},{"path":"https://mc-stan.org/projpred/dev/reference/pred-projection.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictions from a submodel (after projection) — pred-projection","title":"Predictions from a submodel (after projection) — pred-projection","text":"projection reference model onto submodel, linear predictors (original new dataset) based submodel can calculated proj_linpred(). linear predictors can also transformed response scale averaged across projected parameter draws. Furthermore, proj_linpred() returns corresponding log predictive density values (original new) dataset contains response values. proj_predict() function draws predictive distributions (one distribution observation original new dataset) submodel reference model projected onto. projection performed yet, functions call project() internally perform projection. functions can also handle multiple submodels (objects class vsel objects returned project() call object class vsel; see project()).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/pred-projection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictions from a submodel (after projection) — pred-projection","text":"","code":"proj_linpred(   object,   newdata = NULL,   offsetnew = NULL,   weightsnew = NULL,   filter_nterms = NULL,   transform = FALSE,   integrated = FALSE,   allow_nonconst_wdraws_prj = return_draws_matrix,   return_draws_matrix = FALSE,   .seed = NA,   ... )  proj_predict(   object,   newdata = NULL,   offsetnew = NULL,   weightsnew = NULL,   filter_nterms = NULL,   nresample_clusters = 1000,   return_draws_matrix = FALSE,   .seed = NA,   resp_oscale = TRUE,   ... )"},{"path":"https://mc-stan.org/projpred/dev/reference/pred-projection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictions from a submodel (after projection) — pred-projection","text":"object object returned project() object can passed argument object project(). newdata Passed argument newdata reference model's extract_model_data function (see init_refmodel()). Provides predictor (possibly also response) data new (old) observations. May also NULL using original dataset. NULL, NAs trigger error. offsetnew Passed argument orhs reference model's extract_model_data function (see init_refmodel()). Used get offsets new (old) observations. weightsnew Passed argument wrhs reference model's extract_model_data function (see init_refmodel()). Used get weights new (old) observations. filter_nterms applies object object returned project(). case, filter_nterms can used filter object elements (submodels) number predictor terms filter_nterms. Therefore, needs numeric vector NULL. NULL, use submodels. transform proj_linpred() . single logical value indicating whether linear predictor transformed response scale using inverse-link function (TRUE) (FALSE). case latent projection, argument transform similar spirit argument resp_oscale functions affects scale output elements pred lpd (see sections \"Details\" \"Value\" ). integrated proj_linpred() . single logical value indicating whether output averaged across projected posterior draws (TRUE) (FALSE). allow_nonconst_wdraws_prj relevant proj_linpred() integrated FALSE. single logical value indicating whether allow projected draws different (.e., nonconstant) weights (TRUE) (FALSE). return_draws_matrix TRUE, allow_nonconst_wdraws_prj internally set TRUE well. CAUTION: Expert use set TRUE, weights projected draws stored attributes wdraws_prj handling attributes requires special care (e.g., subsetting returned matrices). return_draws_matrix single logical value indicating whether return object (case proj_predict()) objects (case proj_linpred()) class draws_matrix (see posterior::draws_matrix()). case proj_linpred() projected draws nonconstant weights (well integrated FALSE), posterior::weight_draws() applied internally. .seed Pseudorandom number generation (PRNG) seed results can obtained needed. Passed argument seed set.seed(), can also NA call set.seed() . NA, PRNG state reset (state calling proj_linpred() proj_predict()) upon exiting proj_linpred() proj_predict(). , .seed used drawing new group-level effects case multilevel submodel (however, yet case GAMM) drawing predictive distributions submodel(s) case proj_predict(). clustered projection performed, proj_predict(), .seed also used drawing set projected clusters posterior draws (see argument nresample_clusters). project() called internally seed = NA (seed lazily evaluated expression uses PRNG), .seed also affects PRNG usage . ... Arguments passed project() object already object returned project(). nresample_clusters proj_predict() clustered projection (nonconstant weights projected draws) . Number draws return predictive distributions submodel(s). confused argument nclusters project(): nresample_clusters gives number draws (replacement) set clustered posterior draws projection (set determined argument nclusters project()). resp_oscale relevant latent projection. single logical value indicating whether draw posterior-projection predictive distributions original response scale (TRUE) latent scale (FALSE).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/pred-projection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predictions from a submodel (after projection) — pred-projection","text":"following, \\(S_{\\mathrm{prj}}\\), \\(N\\), \\(C_{\\mathrm{cat}}\\), \\(C_{\\mathrm{lat}}\\) help topic refmodel-init-get used. (proj_linpred() integrated = TRUE, \\(S_{\\mathrm{prj}} = 1\\).) Furthermore, let \\(C\\) denote either \\(C_{\\mathrm{cat}}\\) (transform = TRUE) \\(C_{\\mathrm{lat}}\\) (transform = FALSE). , prediction done one submodel (.e., length(nterms) == 1 || !.null(predictor_terms) explicit implicit call project(), see argument object): proj_linpred() returns list following elements: Element pred contains actual predictions, .e., linear predictors, possibly transformed response scale (depending argument transform). Element lpd non-NULL newdata NULL newdata contains response values corresponding column. case, contains log predictive density values (conditional projected parameter draws integrated = FALSE averaged across projected parameter draws integrated = TRUE). case () traditional projection, (ii) latent projection transform = FALSE, (iii) latent projection transform = TRUE <refmodel>$family$cats (<refmodel> object resulting init_refmodel(); see also extend_family()'s argument latent_y_unqs) NULL, elements \\(S_{\\mathrm{prj}} \\times N\\) matrices (converted —possibly weighted—draws_matrix argument return_draws_matrix TRUE, see description argument). case () augmented-data projection (ii) latent projection transform = TRUE <refmodel>$family$cats NULL, pred \\(S_{\\mathrm{prj}} \\times N \\times C\\) array (argument return_draws_matrix TRUE, array \"compressed\" \\(S_{\\mathrm{prj}} \\times (N \\cdot C)\\) matrix—columns consisting \\(C\\) blocks \\(N\\) rows—converted —possibly weighted—draws_matrix) lpd \\(S_{\\mathrm{prj}} \\times       N\\) matrix (converted —possibly weighted—draws_matrix argument return_draws_matrix TRUE). return_draws_matrix FALSE allow_nonconst_wdraws_prj TRUE integrated FALSE projected draws nonconstant weights, list elements weights draws stored attribute wdraws_prj. (return_draws_matrix, allow_nonconst_wdraws_prj, integrated FALSE, projected draws nonconstant weights cause error.) proj_predict() returns \\(S_{\\mathrm{prj}} \\times N\\) matrix predictions \\(S_{\\mathrm{prj}}\\) denotes nresample_clusters case clustered projection (, generally, case projected draws nonconstant weights). argument return_draws_matrix TRUE, returned matrix converted draws_matrix (see posterior::draws_matrix()). case () augmented-data projection (ii) latent projection resp_oscale =   TRUE <refmodel>$family$cats NULL, returned matrix (draws_matrix) attribute called cats (character vector response categories) values matrix (draws_matrix) predicted indices response categories (indices refer order response categories attribute cats). prediction done one submodel, output returned submodel, giving named list one element submodel (names list numbers predictor terms submodels counting intercept, ).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/pred-projection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predictions from a submodel (after projection) — pred-projection","text":"Currently, proj_predict() ignores observation weights equal 1. corresponding warning thrown case. case latent projection transform = FALSE: Output element pred contains linear predictors without modifications may due original response distribution (e.g., brms::cumulative() model, ordered thresholds taken account). Output element lpd contains latent log predictive density values, .e., corresponding latent Gaussian distribution. newdata NULL, requires latent response values supplied column called .<response_name> newdata <response_name> needs replaced name original response variable (<response_name> contained parentheses, stripped init_refmodel(); see left-hand side formula(<refmodel>)). technical reasons, existence column <response_name> newdata another requirement (even though .<response_name> actually used).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/pred-projection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predictions from a submodel (after projection) — pred-projection","text":"","code":"# Data: dat_gauss <- data.frame(y = df_gaussian$y, df_gaussian$x)  # The `stanreg` fit which will be used as the reference model (with small # values for `chains` and `iter`, but only for technical reasons in this # example; this is not recommended in general): fit <- rstanarm::stan_glm(   y ~ X1 + X2 + X3 + X4 + X5, family = gaussian(), data = dat_gauss,   QR = TRUE, chains = 2, iter = 500, refresh = 0, seed = 9876 )  # Projection onto an arbitrary combination of predictor terms (with a small # value for `ndraws`, but only for the sake of speed in this example; this # is not recommended in general): prj <- project(fit, predictor_terms = c(\"X1\", \"X3\", \"X5\"), ndraws = 21,                seed = 9182)  # Predictions (at the training points) from the submodel onto which the # reference model was projected: prjl <- proj_linpred(prj) prjp <- proj_predict(prj, .seed = 7364)"},{"path":"https://mc-stan.org/projpred/dev/reference/predict.refmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictions or log posterior predictive densities from a reference model — predict.refmodel","title":"Predictions or log posterior predictive densities from a reference model — predict.refmodel","text":"predict() method refmodel objects (returned get_refmodel() init_refmodel()). offers three types output based reference model new (old) observations: Either linear predictor link scale, linear predictor transformed response scale, log posterior predictive density.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/predict.refmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictions or log posterior predictive densities from a reference model — predict.refmodel","text":"","code":"# S3 method for class 'refmodel' predict(   object,   newdata = NULL,   ynew = NULL,   offsetnew = NULL,   weightsnew = NULL,   type = \"response\",   ... )"},{"path":"https://mc-stan.org/projpred/dev/reference/predict.refmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictions or log posterior predictive densities from a reference model — predict.refmodel","text":"object object class refmodel (returned get_refmodel() init_refmodel()). newdata Passed argument newdata reference model's extract_model_data function (see init_refmodel()). Provides predictor (possibly also response) data new (old) observations. May also NULL using original dataset. NULL, NAs trigger error. ynew NULL, needs vector new (old) response values. See also section \"Value\" . case () augmented-data projection (ii) latent projection type = \"response\" object$family$cats NULL, ynew internally coerced factor (using .factor()). levels factor subset object$family$cats (see extend_family()'s arguments augdat_y_unqs latent_y_unqs, respectively). offsetnew Passed argument orhs reference model's extract_model_data function (see init_refmodel()). Used get offsets new (old) observations. weightsnew Passed argument wrhs reference model's extract_model_data function (see init_refmodel()). Used get weights new (old) observations. type Usually relevant .null(ynew), latent projection, also affects !.null(ynew) case (see ). scale predictions returned, either \"link\" \"response\" (see predict.glm() note predict.refmodel() adhere typical R convention default prediction link scale). scales, predictions averaged across posterior draws. case latent projection, argument type similar spirit argument resp_oscale functions: () .null(ynew), argument type affects predictions described . case, note type = \"link\" yields linear predictors without modifications may due original response distribution (e.g., brms::cumulative() model, ordered thresholds taken account). (ii) !.null(ynew), argument type also affects scale log posterior predictive densities (type = \"response\" original response scale, type = \"link\" latent Gaussian scale). ... Currently ignored.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/predict.refmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predictions or log posterior predictive densities from a reference model — predict.refmodel","text":"following, \\(N\\), \\(C_{\\mathrm{cat}}\\), \\(C_{\\mathrm{lat}}\\) help topic refmodel-init-get used. Furthermore, let \\(C\\) denote either \\(C_{\\mathrm{cat}}\\) (type = \"response\") \\(C_{\\mathrm{lat}}\\) (type = \"link\"). , .null(ynew), returned object contains reference model's predictions (scale depending argument type) : length-\\(N\\) vector case () traditional projection, (ii) latent projection type = \"link\", (iii) latent projection type = \"response\" object$family$cats NULL; \\(N \\times C\\) matrix case () augmented-data projection (ii) latent projection type = \"response\" object$family$cats NULL. !.null(ynew), returned object length-\\(N\\) vector log posterior predictive densities evaluated ynew.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/predict.refmodel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predictions or log posterior predictive densities from a reference model — predict.refmodel","text":"Argument weightsnew relevant !.null(ynew). case multilevel reference model, group-level effects new group levels drawn randomly (multivariate) Gaussian distribution. setting projpred.mlvl_pred_new TRUE, group levels newdata (even already exist original dataset) treated new group levels (.null(newdata), group levels original dataset considered new group levels case).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/predictor_terms.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictor terms used in a project() run — predictor_terms","title":"Predictor terms used in a project() run — predictor_terms","text":"projection object (returned project(), possibly elements list), function extracts combination predictor terms onto projection performed.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/predictor_terms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictor terms used in a project() run — predictor_terms","text":"","code":"predictor_terms(object, ...)  # S3 method for class 'projection' predictor_terms(object, ...)"},{"path":"https://mc-stan.org/projpred/dev/reference/predictor_terms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictor terms used in a project() run — predictor_terms","text":"object object class projection (returned project(), possibly elements list) retrieve predictor terms. ... Currently ignored.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/predictor_terms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predictor terms used in a project() run — predictor_terms","text":"character vector predictor terms.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/predictor_terms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predictor terms used in a project() run — predictor_terms","text":"","code":"# Data: dat_gauss <- data.frame(y = df_gaussian$y, df_gaussian$x)  # The `stanreg` fit which will be used as the reference model (with small # values for `chains` and `iter`, but only for technical reasons in this # example; this is not recommended in general): fit <- rstanarm::stan_glm(   y ~ X1 + X2 + X3 + X4 + X5, family = gaussian(), data = dat_gauss,   QR = TRUE, chains = 2, iter = 500, refresh = 0, seed = 9876 )  # Projection onto an arbitrary combination of predictor terms (with a small # value for `nclusters`, but only for the sake of speed in this example; # this is not recommended in general): prj <- project(fit, predictor_terms = c(\"X1\", \"X3\", \"X5\"), nclusters = 10,                seed = 9182) print(predictor_terms(prj)) # gives `c(\"X1\", \"X3\", \"X5\")` #> [1] \"X1\" \"X3\" \"X5\""},{"path":"https://mc-stan.org/projpred/dev/reference/print.projection.html","id":null,"dir":"Reference","previous_headings":"","what":"Print information about project() output — print.projection","title":"Print information about project() output — print.projection","text":"print() method objects class projection. method mainly exists avoid cluttering console printing objects accidentally.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/print.projection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print information about project() output — print.projection","text":"","code":"# S3 method for class 'projection' print(x, ...)"},{"path":"https://mc-stan.org/projpred/dev/reference/print.projection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print information about project() output — print.projection","text":"x object class projection (returned project(), possibly elements list). ... Currently ignored.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/print.projection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print information about project() output — print.projection","text":"input object x (invisible).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/print.refmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Print information about a reference model object — print.refmodel","title":"Print information about a reference model object — print.refmodel","text":"print() method reference model objects (objects class refmodel). method mainly exists avoid cluttering console printing objects accidentally.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/print.refmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print information about a reference model object — print.refmodel","text":"","code":"# S3 method for class 'refmodel' print(x, ...)"},{"path":"https://mc-stan.org/projpred/dev/reference/print.refmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print information about a reference model object — print.refmodel","text":"x object class refmodel (returned get_refmodel() init_refmodel()). ... Currently ignored.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/print.refmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print information about a reference model object — print.refmodel","text":"input object x (invisible).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/print.vsel.html","id":null,"dir":"Reference","previous_headings":"","what":"Print results (summary) of a varsel() or cv_varsel() run — print.vsel","title":"Print results (summary) of a varsel() or cv_varsel() run — print.vsel","text":"print() method vsel objects (returned varsel() cv_varsel()). displays summary varsel() cv_varsel() run first calling summary.vsel() print.vselsummary().","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/print.vsel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print results (summary) of a varsel() or cv_varsel() run — print.vsel","text":"","code":"# S3 method for class 'vsel' print(x, digits = getOption(\"projpred.digits\", 2), ...)"},{"path":"https://mc-stan.org/projpred/dev/reference/print.vsel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print results (summary) of a varsel() or cv_varsel() run — print.vsel","text":"x object class vsel (returned varsel() cv_varsel()). digits Passed argument digits print.vselsummary(). ... Arguments passed summary.vsel().","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/print.vsel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print results (summary) of a varsel() or cv_varsel() run — print.vsel","text":"output summary.vsel() (invisible).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/print.vselsummary.html","id":null,"dir":"Reference","previous_headings":"","what":"Print summary of a varsel() or cv_varsel() run — print.vselsummary","title":"Print summary of a varsel() or cv_varsel() run — print.vselsummary","text":"print() method summary objects created summary.vsel(). displays summary results varsel() cv_varsel() run.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/print.vselsummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print summary of a varsel() or cv_varsel() run — print.vselsummary","text":"","code":"# S3 method for class 'vselsummary' print(x, digits = getOption(\"projpred.digits\", 2), ...)"},{"path":"https://mc-stan.org/projpred/dev/reference/print.vselsummary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print summary of a varsel() or cv_varsel() run — print.vselsummary","text":"x object class vselsummary. digits Passed print.data.frame() (table containing submodel performance evaluation results) print.default() (vector containing reference model performance evaluation results). ... Arguments passed print.data.frame() (table containing submodel performance evaluation results) print.default() (vector containing reference model performance evaluation results).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/print.vselsummary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print summary of a varsel() or cv_varsel() run — print.vselsummary","text":"output summary.vsel() (invisible).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/print.vselsummary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print summary of a varsel() or cv_varsel() run — print.vselsummary","text":"submodel predictive performance table printed (towards) bottom, column ranking_fulldata contains full-data predictor ranking column cv_proportions_diag contains main diagonal matrix returned cv_proportions() (cumulate set summary.vsel() call created x). retrieve fold-wise predictor rankings, use ranking() function, possibly followed cv_proportions() computing ranking proportions (can visualized plot.cv_proportions()).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/project.html","id":null,"dir":"Reference","previous_headings":"","what":"Projection onto submodel(s) — project","title":"Projection onto submodel(s) — project","text":"Project posterior reference model onto parameter space single submodel consisting specific combination predictor terms (variable selection) onto parameter space single multiple submodels specific sizes.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Projection onto submodel(s) — project","text":"","code":"project(   object,   nterms = NULL,   solution_terms = predictor_terms,   predictor_terms = NULL,   refit_prj = TRUE,   ndraws = 400,   nclusters = NULL,   seed = NA,   verbose = getOption(\"projpred.verbose\", as.integer(interactive())),   ... )"},{"path":"https://mc-stan.org/projpred/dev/reference/project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Projection onto submodel(s) — project","text":"object object can used input get_refmodel() (particular, objects class refmodel). nterms relevant object class vsel (returned varsel() cv_varsel()). Ignored !.null(predictor_terms). Number terms submodel (corresponding combination predictor terms taken object). numeric vector, projection performed element vector. NULL (.null(predictor_terms)), value suggested suggest_size() taken (default arguments suggest_size(), implying suggested size based ELPD). Note nterms count intercept, use nterms = 0 intercept-model. solution_terms Deprecated. Please use argument predictor_terms instead. predictor_terms NULL, needs character vector predictor terms submodel onto projection performed. Argument nterms ignored case. object class vsel, predictor_terms must NULL. refit_prj single logical value indicating whether fit submodels () (TRUE) —object class vsel—re-use submodel fits full-data search run creating object (FALSE). object class vsel, refit_prj must TRUE. See also section \"Details\" . ndraws relevant refit_prj TRUE. Number posterior draws projected. Ignored nclusters NULL reference model class datafit (case one cluster used). (nclusters ndraws) NULL, number posterior draws reference model used ndraws. See also section \"Details\" . nclusters relevant refit_prj TRUE. Number clusters posterior draws projected. Ignored reference model class datafit (case one cluster used). meaning NULL, see argument ndraws. See also section \"Details\" . seed Pseudorandom number generation (PRNG) seed results can obtained needed. Passed argument seed set.seed(), can also NA call set.seed() . NA, PRNG state reset (state calling project()) upon exiting project(). , seed used clustering reference model's posterior draws (!.null(nclusters)) drawing new group-level effects predicting multilevel submodel (however, yet case GAMM) global option projpred.mlvl_pred_new set TRUE. (prediction takes place calculating output elements dis ce.) verbose single integer value set \\(\\{0, 1, 2\\}\\) (!.null(predictor_terms), \\(1\\) \\(2\\) effect), indicating much information () print computations. Higher values indicate information printed, 0 deactivates verbose mode. Internally, argument verbose coerced integer via .integer(), technically, single logical value single numeric value work well. ... Arguments passed get_refmodel() (get_refmodel() actually used; see argument object) well divergence minimizer (refit_prj TRUE).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Projection onto submodel(s) — project","text":"projection performed onto single submodel (.e., length(nterms) == 1 || !.null(predictor_terms)), object class projection list containing following elements: dis Projected draws dispersion parameter. ce cross-entropy part Kullback-Leibler (KL) divergence reference model submodel. families, actual cross-entropy, reduced one terms cancel calculating KL divergence dropped. case Gaussian family, reduced cross-entropy modified, yielding merely proxy. wdraws_prj Weights projected draws. predictor_terms character vector submodel's predictor terms. outdmin list containing submodel fits (one fit per projected draw). return value div_minimizer function (see init_refmodel()), except project() used object class vsel based L1 search well refit_prj = FALSE, case output internal L1-penalized divergence minimizer. cl_ref numeric vector length equal number posterior draws reference model, containing cluster indices draws. wdraws_ref numeric vector length equal number posterior draws reference model, giving weights draws. weights treated normalized (.e., necessarily sum 1). const_wdraws_prj single logical value indicating whether projected draws constant weights (TRUE) (FALSE). refmodel reference model object. projection performed onto one submodel, output returned submodel, giving list one element submodel. elements object class projection meant accessed directly instead via helper functions (see main vignette projpred-package; see also as_draws_matrix.projection(), argument return_draws_matrix proj_linpred(), argument nresample_clusters proj_predict() intended use weights stored element wdraws_prj).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/project.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Projection onto submodel(s) — project","text":"Arguments ndraws nclusters automatically truncated number posterior draws reference model (1 datafits). Using less draws clusters ndraws nclusters posterior draws reference model may result slightly inaccurate projection performance. Increasing arguments affects computation time linearly. refit_prj = FALSE (possible object class vsel), project() retrieves submodel fits full-data search run creating object. Usually, search relies rather coarse clustering thinning reference model's posterior draws (default, varsel() cv_varsel() use nclusters = 20). Consequently, project() refit_prj = FALSE inherits coarse clustering thinning.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Projection onto submodel(s) — project","text":"","code":"# Data: dat_gauss <- data.frame(y = df_gaussian$y, df_gaussian$x)  # The `stanreg` fit which will be used as the reference model (with small # values for `chains` and `iter`, but only for technical reasons in this # example; this is not recommended in general): fit <- rstanarm::stan_glm(   y ~ X1 + X2 + X3 + X4 + X5, family = gaussian(), data = dat_gauss,   QR = TRUE, chains = 2, iter = 500, refresh = 0, seed = 9876 )  # Run varsel() (here without cross-validation, with L1 search, and with small # values for `nterms_max` and `nclusters_pred`, but only for the sake of # speed in this example; this is not recommended in general): vs <- varsel(fit, method = \"L1\", nterms_max = 3, nclusters_pred = 10,              seed = 5555)  # Projection onto the best submodel with 2 predictor terms (with a small # value for `nclusters`, but only for the sake of speed in this example; # this is not recommended in general): prj_from_vs <- project(vs, nterms = 2, nclusters = 10, seed = 9182)  # Projection onto an arbitrary combination of predictor terms (with a small # value for `nclusters`, but only for the sake of speed in this example; # this is not recommended in general): prj <- project(fit, predictor_terms = c(\"X1\", \"X3\", \"X5\"), nclusters = 10,                seed = 9182)"},{"path":"https://mc-stan.org/projpred/dev/reference/projpred-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Projection predictive feature selection — projpred-package","title":"Projection predictive feature selection — projpred-package","text":"R package projpred performs projection predictive variable (\"feature\") selection various regression models. recommend read README file (available enhanced formatting online) main vignette (topic = \"projpred\", also available online) continuing .","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/projpred-package.html","id":"terminology","dir":"Reference","previous_headings":"","what":"Terminology","title":"Projection predictive feature selection — projpred-package","text":"Throughout whole package documentation, use term \"submodel\" kinds candidate models onto reference model projected. custom reference models, candidate models need actual submodels reference model, case (even custom reference models), candidate models always actual submodels full formula used search procedure. regard, correct speak submodels, even case custom reference model. following model type abbreviations used multiple places throughout documentation: GLM (generalized linear model), GLMM (generalized linear multilevel—\"mixed\"—model), GAM (generalized additive model), GAMM (generalized additive multilevel—\"mixed\"—model). Note term \"generalized\" includes Gaussian family well.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/projpred-package.html","id":"draw-wise-divergence-minimizers","dir":"Reference","previous_headings":"","what":"Draw-wise divergence minimizers","title":"Projection predictive feature selection — projpred-package","text":"projection reference model onto submodel, projpred currently relies following functions draw-wise divergence minimizers (words, workhorse functions employed projpred's internal default div_minimizer functions, see init_refmodel()): Submodel without multilevel additive terms: traditional (latent) projection (augmented-data projection case binomial() brms::bernoulli() family): internal C++ function basically serves purpose lm() gaussian() family glm() families. returned object inherits class subfit. Possible tuning parameters internal C++ function : regul (amount ridge regularization; default: 1e-4), thresh_conv (convergence threshold; default: 1e-7), qa_updates_max (maximum number quadratic approximation updates; default: 100, fixed 1 case Gaussian family identity link), ls_iter_max (maximum number line search iterations; default: 30, fixed 1 case Gaussian family identity link), normalize (single logical value indicating whether scale predictors internally returned regression coefficient estimates back-adjusted appropriately; default: TRUE), beta0_init (single numeric value giving starting value intercept centered predictors; default: 0), beta_init (numeric vector giving starting values regression coefficients; default: vector 0s). augmented-data projection: MASS::polr() (returned object inherits class polr) brms::cumulative() family rstanarm::stan_polr() fits, nnet::multinom() (returned object inherits class multinom) brms::categorical() family. Submodel multilevel additive terms: traditional (latent) projection (augmented-data projection case binomial() brms::bernoulli() family): lme4::lmer() (returned object inherits class lmerMod) gaussian() family, lme4::glmer() (returned object inherits class glmerMod) families. augmented-data projection: ordinal::clmm() (returned object inherits class clmm) brms::cumulative() family, mclogit::mblogit() (returned object inherits class mmblogit) brms::categorical() family. Submodel without multilevel additive terms: mgcv::gam() (returned object inherits class gam). Submodel multilevel additive terms: gamm4::gamm4() (within projpred, returned object inherits class gamm4).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/projpred-package.html","id":"verbosity-messages-warnings-errors","dir":"Reference","previous_headings":"","what":"Verbosity, messages, warnings, errors","title":"Projection predictive feature selection — projpred-package","text":"Global option projpred.verbose may used specifying value passed argument verbose project(), varsel(), cv_varsel(). default, projpred catches messages warnings draw-wise divergence minimizers throws unique collection performing draw-wise divergence minimizations (.e., draw-wise projections). can deactivated setting global option projpred.warn_proj_drawwise FALSE. Furthermore, default, projpred checks convergence draw-wise divergence minimizers throws warning seem converged. warning thrown warning message global option projpred.warn_proj_drawwise (see ) can deactivated setting global option projpred.check_convergence FALSE.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/projpred-package.html","id":"parallelization","dir":"Reference","previous_headings":"","what":"Parallelization","title":"Projection predictive feature selection — projpred-package","text":"projection reference model onto submodel can run parallel (across projected draws). powered foreach package. Thus, parallel (sequential) backend compatible foreach can used, e.g., backends packages doParallel, doMPI, doFuture. Using global option projpred.parallel_proj_trigger, number projected draws parallelization applied (even parallel backend registered) can modified. \"trigger\" threshold exists computational overhead parallelization makes projection parallelization useful sufficiently large number projected draws. default, projection parallelization turned , can also achieved supplying Inf (NULL) option projpred.parallel_proj_trigger. Note recommend projection parallelization Windows experience, parallelization overhead larger , causing parallel run take longer sequential run. Also note projection parallelization works well submodels GLMs (hence also latent projection submodel multilevel additive predictor terms), types submodels, fitted submodel objects quite big, —running parallel—may lead excessive memory usage turn may crash R session (Unix systems, setting appropriate memory limit via unix::rlimit_as() may avoid crashing whole machine). Thus, currently recommend parallelizing projections onto submodels GLMs (context, latent projection onto submodel without multilevel without additive terms may regarded projection onto submodel GLM). However, cv_varsel(), also CV parallelization (.e., parallelization projpred's cross-validation) can activated via argument parallel (turn can controlled via global option projpred.parallel_cv). CV parallelization, global option projpred.export_to_workers may set character vector names objects export global environment parallel workers. parallelization (either projection CV), progression updates can received via progressr package. works doFuture backend used parallelization, e.g., via doFuture::registerDoFuture() future::plan(future::multisession, workers = 4). case, progressr package can used, e.g., calling progressr::handlers(global = TRUE) running projection CV parallel. projpred package also offers global option projpred.use_progressr controlling whether use progressr package (TRUE FALSE), since global option defaults requireNamespace(\"progressr\", quietly = TRUE) && interactive() && identical(foreach::getDoParName(), \"doFuture\"), usually need set user.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/projpred-package.html","id":"multilevel-models-integrating-out-group-level-effects","dir":"Reference","previous_headings":"","what":"Multilevel models: \"Integrating out\" group-level effects","title":"Projection predictive feature selection — projpred-package","text":"case multilevel models, projpred offers two global options \"integrating \" group-level effects: projpred.mlvl_pred_new projpred.mlvl_proj_ref_new. setting projpred.mlvl_pred_new TRUE (default FALSE), prediction time, projpred treat group levels existing training data new group levels, implying group-level effects drawn randomly (multivariate) Gaussian distribution. concerns , reference model (.e., ) submodel. Furthermore, setting projpred.mlvl_pred_new TRUE causes .matrix.projection() as_draws_matrix.projection() omit projected group-level effects (group levels original dataset). setting projpred.mlvl_proj_ref_new TRUE (default FALSE), projection time, reference model's fitted values (submodels fit ) computed treating group levels original dataset new group levels, implying group-level effects drawn randomly (multivariate) Gaussian distribution (long reference model multilevel model, —custom reference models—need case). also affects latent response values latent projection correspondingly. Setting projpred.mlvl_pred_new TRUE makes sense, e.g., prediction task group level treated new one. Typically, setting projpred.mlvl_proj_ref_new TRUE makes sense projpred.mlvl_pred_new already set TRUE. case, default FALSE projpred.mlvl_proj_ref_new ensures projection time, submodels fit best possible fitted values reference model, setting projpred.mlvl_proj_ref_new TRUE make sense group-level effects integrated completely.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/projpred-package.html","id":"memory-usage","dir":"Reference","previous_headings":"","what":"Memory usage","title":"Projection predictive feature selection — projpred-package","text":"setting global option projpred.run_gc TRUE, projpred call gc() places (e.g., size forward search passes ) free memory. gc() calls always necessary reduce peak memory usage, add runtime (hence default FALSE global option).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/projpred-package.html","id":"other-notes","dir":"Reference","previous_headings":"","what":"Other notes","title":"Projection predictive feature selection — projpred-package","text":"Global option projpred.digits controls arguments digits print.vselsummary() print.vsel(). several global options control arguments plot.vsel() plot.cv_proportions() globally, see section \"Usage\" help pages two functions. Global option projpred.warn_L1_interactions may set FALSE deactivate warning L1 search selected interaction term involved lower-order interaction terms (including main-effect terms) selected (case predictor ranking automatically modified projpred lower-order interaction terms come interaction term). examples executed called via example(). execute , code copied pasted manually console.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/projpred-package.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Projection predictive feature selection — projpred-package","text":"init_refmodel(), get_refmodel() setting object containing information reference model, submodels, projection carried . Explicit calls init_refmodel() get_refmodel() rarely needed. varsel(), cv_varsel() running search part evaluation part projection predictive variable selection, possibly cross-validation (CV). summary.vsel(), print.vsel(), plot.vsel(), suggest_size.vsel(), ranking(), cv_proportions(), plot.cv_proportions(), performances() post-processing results varsel() cv_varsel(). project() projecting reference model onto submodel(s). Typically, follows variable selection, can also applied directly (without variable selection). .matrix.projection() as_draws_matrix.projection() extracting projected parameter draws. proj_linpred(), proj_predict() making predictions submodel (projecting reference model onto ).","code":""},{"path":[]},{"path":"https://mc-stan.org/projpred/dev/reference/projpred-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Projection predictive feature selection — projpred-package","text":"Maintainer: Osvaldo Martin aloctavodia@gmail.com Authors: Juho Piironen juho.t.piironen@gmail.com Markus Paasiniemi Alejandro Catalina alecatfel@gmail.com Frank Weber Aki Vehtari contributors: Jonah Gabry [contributor] Marco Colombo [contributor] Paul-Christian Bürkner [contributor] Hamada S. Badr [contributor] Brian Sullivan [contributor] Sölvi Rögnvaldsson [contributor] LME4 Authors (see file 'LICENSE' details) [copyright holder] Yann McLatchie [contributor] Juho Timonen [contributor]","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/ranking.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictor ranking(s) — ranking","title":"Predictor ranking(s) — ranking","text":"Extracts predictor ranking(s) object class vsel (returned varsel() cv_varsel()). predictor ranking simply character vector predictor terms ranked predictive relevance (relevant term first). case, objects class vsel contain predictor ranking based full-data search. object class vsel based cross-validation (CV) fold-wise searches (.e., created cv_varsel() validate_search = TRUE), also contains fold-wise predictor rankings.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/ranking.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictor ranking(s) — ranking","text":"","code":"ranking(object, ...)  # S3 method for class 'vsel' ranking(object, nterms_max = NULL, ...)"},{"path":"https://mc-stan.org/projpred/dev/reference/ranking.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictor ranking(s) — ranking","text":"object object retrieve predictor ranking(s). Possible classes may inferred names corresponding methods (see also description). ... Currently ignored. nterms_max Maximum submodel size (number predictor terms) predictor ranking(s), .e., submodel size cut predictor ranking(s). Using NULL effectively setting nterms_max full model size, .e., means cut predictor ranking(s) . Note nterms_max count intercept, nterms_max = 1 corresponds submodel consisting first (non-intercept) predictor term.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/ranking.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predictor ranking(s) — ranking","text":"object class ranking list following elements: fulldata: predictor ranking full-data search. foldwise: predictor rankings fold-wise searches form character matrix (available object based CV fold-wise searches, otherwise element foldwise NULL). rows matrix correspond CV folds columns submodel sizes. row contains predictor ranking search CV fold.","code":""},{"path":[]},{"path":"https://mc-stan.org/projpred/dev/reference/ranking.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predictor ranking(s) — ranking","text":"","code":"# For an example, see `?plot.cv_proportions`."},{"path":"https://mc-stan.org/projpred/dev/reference/refmodel-init-get.html","id":null,"dir":"Reference","previous_headings":"","what":"Reference model and more general information — refmodel-init-get","title":"Reference model and more general information — refmodel-init-get","text":"Function get_refmodel() generic function whose methods usually call init_refmodel() underlying workhorse (may also used directly without call get_refmodel()). , get_refmodel() init_refmodel(), create object containing information needed projection predictive variable selection, namely reference model, submodels, projection carried . sake simplicity, documentation may refer resulting object also \"reference model\" \"reference model object\", even though also contains information submodels projection. \"typical\" reference model object created get_refmodel.stanreg() brms::get_refmodel.brmsfit(), either implicitly call top-level function project(), varsel(), cv_varsel() explicitly call get_refmodel(). non-\"typical\" reference model objects called \"custom\" reference model objects. arguments \\(K\\)-fold cross-validation (\\(K\\)-fold CV) ; see cv_varsel() use \\(K\\)-fold CV projpred.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/refmodel-init-get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reference model and more general information — refmodel-init-get","text":"","code":"get_refmodel(object, ...)  # S3 method for class 'refmodel' get_refmodel(object, ...)  # S3 method for class 'vsel' get_refmodel(object, ...)  # S3 method for class 'projection' get_refmodel(object, ...)  # Default S3 method get_refmodel(object, family = NULL, ...)  # S3 method for class 'stanreg' get_refmodel(object, latent = FALSE, dis = NULL, ...)  init_refmodel(   object,   data,   formula,   family,   ref_predfun = NULL,   div_minimizer = NULL,   proj_predfun = NULL,   extract_model_data = NULL,   cvfun = NULL,   cvfits = NULL,   dis = NULL,   cvrefbuilder = NULL,   called_from_cvrefbuilder = FALSE,   ... )"},{"path":"https://mc-stan.org/projpred/dev/reference/refmodel-init-get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reference model and more general information — refmodel-init-get","text":"object init_refmodel(), object functions arguments extract_model_data ref_predfun can applied , NULL object treated specially (see section \"Value\" ). get_refmodel.default(), object function family() can applied order retrieve family (argument family NULL), additionally properties required init_refmodel(). non-default methods get_refmodel(), object corresponding class. ... get_refmodel.default() get_refmodel.stanreg(): arguments passed init_refmodel(). get_refmodel() generic: arguments passed appropriate method. init_refmodel(): arguments passed extend_family() (apart family). family object class family representing observation model (.e., distributional family response) submodels. (However, link inverse-link function family also used quantities like predictions fitted values related reference model.) May NULL get_refmodel.default() case family retrieved object. custom reference models, family coincide family reference model (reference model possesses formal family ). typical reference models, however, families coincide. Furthermore, latent projection exception family family submodels (case, family submodels gaussian() family). latent single logical value indicating whether use latent projection (TRUE) (FALSE). Note setting latent = TRUE causes arguments starting augdat_ ignored. dis vector posterior draws reference model's dispersion parameter —precisely—posterior values reference model's parameter-conditional predictive variance (assuming variance observations). May NULL submodels dispersion parameter submodels dispersion parameter, object NULL (case 0 used dis). Note gaussian() family, dis standard deviation, variance. data data.frame containing data use projection predictive variable selection. contrasts attributes dataset's columns silently removed. custom reference models, columns data necessarily coincide dataset used fitting reference model, keep mind row-subset data used argument newdata ref_predfun \\(K\\)-fold CV. formula full formula use search procedure. custom reference models, necessarily coincide reference model's formula. general information formulas R, see formula. information possible right-hand side (.e., predictor) terms formula , see main vignette section \"Formula terms\" . multilevel formulas, see also package lme4 (particular, functions lme4::lmer() lme4::glmer()). additive formulas, see also packages mgcv (particular, function mgcv::gam()) gamm4 (particular, function gamm4::gamm4()). ref_predfun Prediction function linear predictor reference model, including offsets (existing). See also section \"Arguments ref_predfun, proj_predfun, div_minimizer\" . object NULL, ref_predfun ignored internal default used instead. div_minimizer function minimizing Kullback-Leibler (KL) divergence reference model submodel (.e., performing projection reference model onto submodel). output div_minimizer used, e.g., proj_predfun's argument fits. See also section \"Arguments ref_predfun, proj_predfun, div_minimizer\" . proj_predfun Prediction function linear predictor submodel onto reference model projected. See also section \"Arguments ref_predfun, proj_predfun, div_minimizer\" . extract_model_data function fetching variables (response, observation weights, offsets) original dataset (supplied argument data) new dataset. May NULL using internal default essentially corresponds y_wobs_offs(). See also section \"Argument extract_model_data\" . cvfun \\(K\\)-fold CV . function , given fold indices vector, fits reference model separately fold returns \\(K\\) model fits list. object NULL, cvfun may NULL using internal default. one cvfits cvfun needs provided (\\(K\\)-fold CV). Note cvfits takes precedence cvfun, .e., provided, cvfits used. cvfits \\(K\\)-fold CV . list containing \\(K\\) reference model refits reference model objects created. list needs attribute called folds, consisting integer vector giving fold indices (one fold index per observation). one cvfits cvfun needs provided (\\(K\\)-fold CV). Note cvfits takes precedence cvfun, .e., provided, cvfits used. cvrefbuilder \\(K\\)-fold CV . function , given reference model fit fold \\(k \\\\{1, ..., K\\}\\), returns object type init_refmodel() . reference model fit fold \\(k\\) \\(k\\)-th element return value cvfun \\(k\\)-th element list supplied cvfits (either init_refmodel() cv_varsel.refmodel()), extended elements omitted (containing indices left-observations fold) projpred_k (containing integer \\(k\\)) \\(k\\)-th element list (otherwise, omitted projpred_k appended attributes). Argument cvrefbuilder may NULL using internal default: get_refmodel() object NULL function calling init_refmodel() appropriately (assumption dis = 0) object NULL. called_from_cvrefbuilder single logical value indicating whether init_refmodel() called cvrefbuilder function (TRUE) (FALSE). Currently, TRUE causes warnings suppressed (warnings need thrown \\(K\\) reference model objects sufficient throw original reference model object ). argument mainly internal use, may also helpful users custom cvrefbuilder function.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/refmodel-init-get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reference model and more general information — refmodel-init-get","text":"object can passed functions take reference model fit first argument, varsel(), cv_varsel(), project(), proj_linpred(), proj_predict(). Usually, returned object class refmodel. However, object NULL, returned object class datafit well class refmodel (datafit first). Objects class datafit handled differently several places throughout package. elements returned object meant accessed directly instead via downstream functions (see functions mentioned well predict.refmodel()).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/refmodel-init-get.html","id":"formula-terms","dir":"Reference","previous_headings":"","what":"Formula terms","title":"Reference model and more general information — refmodel-init-get","text":"Although bad practice (general), reference model lacking intercept can used within projpred. However, always projected onto submodels include intercept. reason even true intercept reference model zero, need hold submodels. multilevel (group-level) terms, function calls right-hand side | character (e.g., (1 | gr(group_variable)), possible brms) currently allowed projpred. additive models (still experimental feature), mgcv::s() mgcv::t2() currently supported smooth terms. Furthermore, need called without arguments apart predictor names (symbols). example, smoothing effect predictor x, s(x) t2(x) allowed. another example, smoothing joint effect two predictors x z, s(x, z) t2(x, z) allowed (analogously higher-order joint effects, e.g., three predictors). Note smooth terms need included formula (random argument rstanarm::stan_gamm4(), example).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/refmodel-init-get.html","id":"arguments-ref-predfun-proj-predfun-and-div-minimizer","dir":"Reference","previous_headings":"","what":"Arguments ref_predfun, proj_predfun, and div_minimizer","title":"Reference model and more general information — refmodel-init-get","text":"Arguments ref_predfun, proj_predfun, div_minimizer may NULL using internal default (see projpred-package functions used default divergence minimizers). Otherwise, let \\(N\\) denote number observations (case CV, may reduced fold), \\(S_{\\mathrm{ref}}\\) number posterior draws reference model's parameters, \\(S_{\\mathrm{prj}}\\) number draws parameters submodel reference model projected onto (short: number projected draws). augmented-data projection, let \\(C_{\\mathrm{cat}}\\) denote number response categories, \\(C_{\\mathrm{lat}}\\) number latent response categories (typically equals \\(C_{\\mathrm{cat}} - 1\\)), define \\(N_{\\mathrm{augcat}} := N \\cdot C_{\\mathrm{cat}}\\) well \\(N_{\\mathrm{auglat}} := N \\cdot C_{\\mathrm{lat}}\\). functions supplied arguments need following prototypes: ref_predfun: ref_predfun(fit, newdata = NULL) : fit accepts reference model fit given argument object (possibly refitted subset observations, done \\(K\\)-fold CV). newdata accepts either NULL (using original dataset, typically stored fit) data new observations (least form data.frame). proj_predfun: proj_predfun(fits, newdata) : fits accepts list length \\(S_{\\mathrm{prj}}\\) containing number submodel fits. list returned project() output element outdmin (turn return value div_minimizer, except project() used object class vsel based L1 search well refit_prj = FALSE). newdata accepts data new observations (least form data.frame). div_minimizer need specific prototype, needs able called following arguments: formula accepts either standard formula single response (\\(S_{\\mathrm{prj}} = 1\\) case augmented-data projection) formula \\(S_{\\mathrm{prj}} >     1\\) response variables cbind()-ed left-hand side case projection performed response variables separately. data accepts data.frame used projection. case traditional latent projection, dataset \\(N\\) rows. case augmented-data projection, dataset \\(N_{\\mathrm{augcat}}\\) rows. family accepts object class family. weights accepts either observation weights (least form numeric vector) NULL (using vector ones weights). projpred_var accepts \\(N \\times S_{\\mathrm{prj}}\\) matrix predictive variances (necessary projpred's internal GLM fitter) case traditional latent projection \\(N_{\\mathrm{augcat}} \\times S_{\\mathrm{prj}}\\) matrix (containing NAs) case augmented-data projection. projpred_ws_aug accepts \\(N \\times S_{\\mathrm{prj}}\\) matrix expected values response case traditional latent projection \\(N_{\\mathrm{augcat}} \\times     S_{\\mathrm{prj}}\\) matrix probabilities response categories case augmented-data projection. ... accepts arguments specified user (projpred). return value functions needs : ref_predfun: traditional latent projection, \\(N \\times S_{\\mathrm{ref}}\\) matrix; augmented-data projection, \\(S_{\\mathrm{ref}} \\times N \\times C_{\\mathrm{lat}}\\) array (exception augmented-data projection binomial() family case ref_predfun needs return \\(N \\times S_{\\mathrm{ref}}\\) matrix just like traditional projection array constructed internal wrapper function). proj_predfun: traditional latent projection, \\(N \\times S_{\\mathrm{prj}}\\) matrix; augmented-data projection, \\(N \\times C_{\\mathrm{lat}} \\times S_{\\mathrm{prj}}\\) array. div_minimizer: list length \\(S_{\\mathrm{prj}}\\) containing number submodel fits.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/refmodel-init-get.html","id":"argument-extract-model-data","dir":"Reference","previous_headings":"","what":"Argument extract_model_data","title":"Reference model and more general information — refmodel-init-get","text":"function supplied argument extract_model_data needs prototype   : object accepts reference model fit given argument object (possibly refitted subset observations, done \\(K\\)-fold CV). newdata accepts data new observations (least form data.frame). wrhs accepts least () right-hand side formula consisting variable newdata containing observation weights (ii) NULL using observation weights corresponding newdata (typically, observation weights stored column newdata; model fitted without observation weights, vector ones used). orhs accepts least () right-hand side formula consisting variable newdata containing offsets (ii) NULL using offsets corresponding newdata (typically, offsets stored column newdata; model fitted without offsets, vector zeros used). extract_y accepts single logical value indicating whether output element y (see ) shall NULL (TRUE) (FALSE). return value extract_model_data needs list elements y, weights, offset, numeric vector containing data response, observation weights, offsets, respectively. exception y may also NULL (depending argument extract_y), non-numeric vector, factor. weights offsets returned extract_model_data assumed hold reference model well submodels. , arguments wrhs orhs assumed defaults NULL. possible use defaults NULL, strongly recommend use NULL. defaults NULL used, need imply behaviors described items \"(ii)\" (see descriptions wrhs orhs).","code":"extract_model_data(object, newdata, wrhs = NULL, orhs = NULL,                    extract_y = TRUE)"},{"path":"https://mc-stan.org/projpred/dev/reference/refmodel-init-get.html","id":"augmented-data-projection","dir":"Reference","previous_headings":"","what":"Augmented-data projection","title":"Reference model and more general information — refmodel-init-get","text":"custom reference model augmented-data projection needed, see also extend_family(). augmented-data projection, response vector resulting extract_model_data internally coerced factor (using .factor()). levels factor identical family$cats (applying extend_family() internally; see extend_family()'s argument augdat_y_unqs). Note response-specific offsets (.e., one length-\\(N\\) offset vector per response category) supported projpred yet. far, offsets across response categories supported. case brms::categorical() family, offsets currently supported . Currently, object = NULL (.e., datafit; see section \"Value\") supported case augmented-data projection.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/refmodel-init-get.html","id":"latent-projection","dir":"Reference","previous_headings":"","what":"Latent projection","title":"Reference model and more general information — refmodel-init-get","text":"custom reference model latent projection needed, see also extend_family(). latent projection, family$cats (applying extend_family() internally; see extend_family()'s argument latent_y_unqs) currently must NULL original (.e., non-latent) response factor. Conversely, family$cats (applying extend_family()) non-NULL, response vector resulting extract_model_data internally coerced factor (using .factor()). levels factor identical non-NULL element family$cats. Currently, object = NULL (.e., datafit; see section \"Value\") supported case latent projection.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/refmodel-init-get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reference model and more general information — refmodel-init-get","text":"","code":"# Data: dat_gauss <- data.frame(y = df_gaussian$y, df_gaussian$x)  # The `stanreg` fit which will be used as the reference model (with small # values for `chains` and `iter`, but only for technical reasons in this # example; this is not recommended in general): fit <- rstanarm::stan_glm(   y ~ X1 + X2 + X3 + X4 + X5, family = gaussian(), data = dat_gauss,   QR = TRUE, chains = 2, iter = 500, refresh = 0, seed = 9876 )  # Define the reference model object explicitly: ref <- get_refmodel(fit) print(class(ref)) # gives `\"refmodel\"` #> [1] \"refmodel\" # Now see, for example, `?varsel`, `?cv_varsel`, and `?project` for # possible post-processing functions. Most of the post-processing functions # call get_refmodel() internally at the beginning, so you will rarely need # to call get_refmodel() yourself.  # A custom reference model object which may be used in a variable selection # where the candidate predictors are not a subset of those used for the # reference model's predictions: ref_cust <- init_refmodel(   fit,   data = dat_gauss,   formula = y ~ X6 + X7,   family = gaussian(),   cvfun = function(folds) {     kfold(       fit, K = max(folds), save_fits = TRUE, folds = folds, cores = 1     )$fits[, \"fit\"]   },   dis = as.matrix(fit)[, \"sigma\"],   cvrefbuilder = function(cvfit) {     init_refmodel(cvfit,                   data = dat_gauss[-cvfit$omitted, , drop = FALSE],                   formula = y ~ X6 + X7,                   family = gaussian(),                   dis = as.matrix(cvfit)[, \"sigma\"],                   called_from_cvrefbuilder = TRUE)   } ) # Now, the post-processing functions mentioned above (for example, # varsel(), cv_varsel(), and project()) may be applied to `ref_cust`."},{"path":"https://mc-stan.org/projpred/dev/reference/run_cvfun.html","id":null,"dir":"Reference","previous_headings":"","what":"Create cvfits from cvfun — run_cvfun","title":"Create cvfits from cvfun — run_cvfun","text":"helper function can used create input cv_varsel.refmodel()'s argument cvfits running first cv_folds() reference model object's cvfun (see init_refmodel()). helpful \\(K\\)-fold CV run multiple times based \\(K\\) reference model refits.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/run_cvfun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create cvfits from cvfun — run_cvfun","text":"","code":"run_cvfun(object, ...)  # Default S3 method run_cvfun(object, ...)  # S3 method for class 'refmodel' run_cvfun(   object,   K = if (!inherits(object, \"datafit\")) 5 else 10,   folds = NULL,   seed = NA,   ... )"},{"path":"https://mc-stan.org/projpred/dev/reference/run_cvfun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create cvfits from cvfun — run_cvfun","text":"object object class refmodel (returned get_refmodel() init_refmodel()) object can passed argument object get_refmodel(). ... run_cvfun.default(): Arguments passed get_refmodel(). run_cvfun.refmodel(): Currently ignored. K Number folds. Must least 2 exceed number observations. Ignored folds NULL. folds Either NULL determining CV folds automatically via cv_folds() (using argument K) numeric (fact, integer) vector giving fold index observation. latter case, argument K ignored. seed Pseudorandom number generation (PRNG) seed results can obtained needed. Passed argument seed set.seed(), can also NA call set.seed() . NA, PRNG state reset (state calling run_cvfun()) upon exiting run_cvfun().","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/run_cvfun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create cvfits from cvfun — run_cvfun","text":"object can used input cv_varsel.refmodel()'s argument cvfits.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/run_cvfun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create cvfits from cvfun — run_cvfun","text":"","code":"# Data: dat_gauss <- data.frame(y = df_gaussian$y, df_gaussian$x)  # The `stanreg` fit which will be used as the reference model (with small # values for `chains` and `iter`, but only for technical reasons in this # example; this is not recommended in general): fit <- rstanarm::stan_glm(   y ~ X1 + X2 + X3 + X4 + X5, family = gaussian(), data = dat_gauss,   QR = TRUE, chains = 2, iter = 500, refresh = 0, seed = 9876 )  # Define the reference model object explicitly (not really necessary here # because the get_refmodel() call is quite fast in this example, but in # general, this approach is faster than defining the reference model object # multiple times implicitly): ref <- get_refmodel(fit)  # Run the reference model object's `cvfun` (with a small value for `K`, but # only for the sake of speed in this example; this is not recommended in # general): cv_fits <- run_cvfun(ref, K = 2, seed = 184) #> Fitting model 1 out of 2 #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Fitting model 2 out of 2 #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess  # Run cv_varsel() (with L1 search and small values for `nterms_max` and # `nclusters_pred`, but only for the sake of speed in this example; this is # not recommended in general) and use `cv_fits` there: cvvs_L1 <- cv_varsel(ref, method = \"L1\", cv_method = \"kfold\",                      cvfits = cv_fits, nterms_max = 3, nclusters_pred = 10,                      seed = 5555) # Now see, for example, `?print.vsel`, `?plot.vsel`, `?suggest_size.vsel`, # and `?ranking` for possible post-processing functions.  # The purpose of run_cvfun() is to create an object that can be used in # multiple cv_varsel() calls, e.g., to check the sensitivity to the search # method (L1 or forward): cvvs_fw <- cv_varsel(ref, method = \"forward\", cv_method = \"kfold\",                      cvfits = cv_fits, nterms_max = 3, nclusters = 5,                      nclusters_pred = 10, seed = 5555)  # Stratified K-fold CV is straightforward: n_strat <- 3L set.seed(692) # Some example strata: strat_fac <- sample(paste0(\"lvl\", seq_len(n_strat)), size = nrow(dat_gauss),                     replace = TRUE,                     prob = diff(c(0, pnorm(seq_len(n_strat - 1L) - 0.5), 1))) table(strat_fac) #> strat_fac #> lvl1 lvl2 lvl3  #>   70   24    6  # Use loo::kfold_split_stratified() to create the folds vector: folds_strat <- loo::kfold_split_stratified(K = 2, x = strat_fac) table(folds_strat, strat_fac) #>            strat_fac #> folds_strat lvl1 lvl2 lvl3 #>           1   35   12    3 #>           2   35   12    3 # Call run_cvfun(), but this time with argument `folds` instead of `K` (here, # specifying argument `seed` would not be necessary because of the set.seed() # call above, but we specify it nonetheless for the sake of generality): cv_fits_strat <- run_cvfun(ref, folds = folds_strat, seed = 391) #> Fitting model 1 out of 2 #> Fitting model 2 out of 2 # Now use `cv_fits_strat` analogously to `cv_fits` from above."},{"path":"https://mc-stan.org/projpred/dev/reference/solution_terms.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the full-data solution path from a varsel() or cv_varsel() run or the predictor combination from a project() run — solution_terms","title":"Retrieve the full-data solution path from a varsel() or cv_varsel() run or the predictor combination from a project() run — solution_terms","text":"solution_terms.vsel() method retrieves solution path full-data search (vsel objects returned varsel() cv_varsel()). solution_terms.projection() method retrieves predictor combination onto projection performed (projection objects returned project(), possibly elements list). methods (hence also solution_terms() generic) deprecated removed future release. Please use ranking() instead solution_terms.vsel() (ranking()'s output element fulldata contains full-data predictor ranking extracted solution_terms.vsel(); ranking()'s output element foldwise contains fold-wise predictor rankings—available—previously accessible via built-function) predictor_terms() instead solution_terms.projection().","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/solution_terms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the full-data solution path from a varsel() or cv_varsel() run or the predictor combination from a project() run — solution_terms","text":"","code":"solution_terms(object, ...)  # S3 method for class 'vsel' solution_terms(object, ...)  # S3 method for class 'projection' solution_terms(object, ...)"},{"path":"https://mc-stan.org/projpred/dev/reference/solution_terms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the full-data solution path from a varsel() or cv_varsel() run or the predictor combination from a project() run — solution_terms","text":"object object retrieve predictor terms. Possible classes may inferred names corresponding methods (see also description). ... Currently ignored.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/solution_terms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the full-data solution path from a varsel() or cv_varsel() run or the predictor combination from a project() run — solution_terms","text":"character vector predictor terms.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/suggest_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Suggest submodel size — suggest_size","title":"Suggest submodel size — suggest_size","text":"function can suggest appropriate submodel size based decision rule described section \"Details\" . Note decision quite heuristic interpreted caution. recommended examine results via plot.vsel(), cv_proportions(), plot.cv_proportions(), /summary.vsel() make final decision based appropriate problem hand.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/suggest_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Suggest submodel size — suggest_size","text":"","code":"suggest_size(object, ...)  # S3 method for class 'vsel' suggest_size(   object,   stat = \"elpd\",   pct = 0,   type = \"upper\",   thres_elpd = NA,   warnings = TRUE,   ... )"},{"path":"https://mc-stan.org/projpred/dev/reference/suggest_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Suggest submodel size — suggest_size","text":"object object class vsel (returned varsel() cv_varsel()). ... Arguments passed summary.vsel(), except object, stats (set stat), type, deltas (set TRUE). See section \"Details\" important arguments may passed . stat Performance statistic (.e., utility loss) used decision. See argument stats summary.vsel() plot.vsel() possible choices. pct number giving proportion (percents) relative null model utility one willing sacrifice. See section \"Details\" information. type Either \"upper\" \"lower\" determining whether decision based upper lower uncertainty interval bound, respectively. See section \"Details\" information. thres_elpd relevant stat %% c(\"elpd\", \"mlpd\", \"gmpd\")). threshold ELPD difference (taking submodel's ELPD minus baseline model's ELPD) submodel's ELPD considered close enough baseline model's ELPD. equivalent rule applied case MLPD GMPD. See section \"Details\" formalization. Supplying NA deactivates . warnings Mainly internal use. single logical value indicating whether throw warnings automatic suggestion fails. Usually reason set FALSE.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/suggest_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Suggest submodel size — suggest_size","text":"single numeric value, giving suggested submodel size (NA suggestion failed). intercept counted suggest_size(), suggested size zero stands intercept-model.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/suggest_size.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Suggest submodel size — suggest_size","text":"general (beware special cases ), suggested model size smallest model size \\(j \\\\{0, 1, ...,   \\texttt{nterms\\_max}\\}\\) either lower upper bound (depending argument type) uncertainty interval (nominal coverage 1 - alpha; see argument alpha summary.vsel()) \\(U_j - U_{\\mathrm{base}}\\) (\\(U_j\\) denoting \\(j\\)-th submodel's true utility \\(U_{\\mathrm{base}}\\) denoting baseline model's true utility) falls (equal ) $$\\texttt{pct} \\cdot (u_0 -   u_{\\mathrm{base}})$$ \\(u_0\\) denotes null model's estimated utility \\(u_{\\mathrm{base}}\\) baseline model's estimated utility. baseline model either reference model best submodel found (see argument baseline summary.vsel()). , loss statistics like root mean squared error (RMSE) mean squared error (MSE) converted utilities multiplying -1, call suggest_size(object, stat = \"rmse\", type = \"upper\") finds smallest model size whose upper uncertainty interval bound negative RMSE MSE exceeds (equal ) cutoff (, equivalently, lower uncertainty interval bound RMSE MSE —equal —cutoff). done make interpretation argument type regardless argument stat. geometric mean predictive density (GMPD), decision rule applied log() scale. words, true GMPD denoted \\(U^\\ast_j\\) \\(j\\)-th submodel \\(U^\\ast_{\\mathrm{base}}\\) baseline model (\\(U_j\\) \\(U_{\\mathrm{base}}\\) given \\(U_j = \\log(U^\\ast_j)\\) \\(U_{\\mathrm{base}} = \\log(U^\\ast_{\\mathrm{base}})\\)), suggest_size() yields smallest model size whose lower upper (depending argument type) uncertainty interval bound \\(\\frac{U^\\ast_j}{U^\\ast_{\\mathrm{base}}}\\) exceeds (equal ) $$(\\frac{u^\\ast_0}{u^\\ast_{\\mathrm{base}}})^{\\texttt{pct}}$$ \\(u^\\ast_0\\) denotes null model's estimated GMPD \\(u^\\ast_{\\mathrm{base}}\\) baseline model's estimated GMPD. !.na(thres_elpd) stat = \"elpd\", decision rule extended: suggested model size smallest model size \\(j\\) fulfilling rule \\(u_j - u_{\\mathrm{base}} >   \\texttt{thres\\_elpd}\\). Correspondingly, case stat = \"mlpd\" (!.na(thres_elpd)), suggested model size smallest model size \\(j\\) fulfilling rule \\(u_j -   u_{\\mathrm{base}} > \\frac{\\texttt{thres\\_elpd}}{N}\\) \\(N\\) denoting number observations. Correspondingly, case stat = \"gmpd\" (!.na(thres_elpd)), suggested model size smallest model size \\(j\\) fulfilling rule \\(\\frac{u^\\ast_j}{u^\\ast_{\\mathrm{base}}} >   \\exp(\\frac{\\texttt{thres\\_elpd}}{N})\\). example (disregarding special extensions case !.na(thres_elpd) stat %% c(\"elpd\", \"mlpd\", \"gmpd\")), alpha = 2 * pnorm(-1), pct = 0, type = \"upper\" means select smallest model size upper bound 1 - 2 * pnorm(-1) (approximately 68.3 %) uncertainty interval \\(U_j -   U_{\\mathrm{base}}\\) (\\(\\frac{U^\\ast_j}{U^\\ast_{\\mathrm{base}}}\\) case GMPD) exceeds (equal ) zero (one case GMPD), (stat performance statistic normal-approximation uncertainty interval used, see argument stats summary.vsel() plot.vsel()), submodel's utility estimate one standard error smaller baseline model's utility estimate (standard error referring utility difference). Apart two summary.vsel() arguments mentioned (alpha baseline), resp_oscale another important summary.vsel() argument may passed via ....","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/suggest_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Suggest submodel size — suggest_size","text":"","code":"# Data: dat_gauss <- data.frame(y = df_gaussian$y, df_gaussian$x)  # The `stanreg` fit which will be used as the reference model (with small # values for `chains` and `iter`, but only for technical reasons in this # example; this is not recommended in general): fit <- rstanarm::stan_glm(   y ~ X1 + X2 + X3 + X4 + X5, family = gaussian(), data = dat_gauss,   QR = TRUE, chains = 2, iter = 500, refresh = 0, seed = 9876 )  # Run varsel() (here without cross-validation, with L1 search, and with small # values for `nterms_max` and `nclusters_pred`, but only for the sake of # speed in this example; this is not recommended in general): vs <- varsel(fit, method = \"L1\", nterms_max = 3, nclusters_pred = 10,              seed = 5555) print(suggest_size(vs)) #> [1] 3"},{"path":"https://mc-stan.org/projpred/dev/reference/summary.vsel.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of a varsel() or cv_varsel() run — summary.vsel","title":"Summary of a varsel() or cv_varsel() run — summary.vsel","text":"summary() method vsel objects (returned varsel() cv_varsel()). Apart general information varsel() cv_varsel() run, shows full-data predictor ranking, basic information (CV) variability ranking predictors (available; inferred cv_proportions()), estimates user-specified predictive performance statistics. graphical representation, see plot.vsel(). extracting predictive performance results printed bottom output created summary() method, see performances().","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/summary.vsel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of a varsel() or cv_varsel() run — summary.vsel","text":"","code":"# S3 method for class 'vsel' summary(   object,   nterms_max = NULL,   stats = \"elpd\",   type = c(\"mean\", \"se\", \"diff\", \"diff.se\"),   deltas = FALSE,   alpha = 2 * pnorm(-1),   baseline = if (!inherits(object$refmodel, \"datafit\")) \"ref\" else \"best\",   resp_oscale = TRUE,   cumulate = FALSE,   ... )"},{"path":"https://mc-stan.org/projpred/dev/reference/summary.vsel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of a varsel() or cv_varsel() run — summary.vsel","text":"object object class vsel (returned varsel() cv_varsel()). nterms_max Maximum submodel size (number predictor terms) performance statistics calculated. Using NULL effectively length(ranking(object)$fulldata). Note nterms_max count intercept, use nterms_max = 0 intercept-model. plot.vsel(), nterms_max must least 1. stats One character strings determining performance statistics (.e., utilities losses) estimate based observations evaluation (\"test\") set (case cross-validation, observations partitioned multiple test sets; case varsel() d_test = NULL, observations test set training set). Available statistics : \"elpd\": expected log (pointwise) predictive density (new dataset) (ELPD). Estimated sum observation-specific log predictive density values (predictive density values —possibly weighted—average across parameter draws). corresponding uncertainty interval, normal approximation used. \"mlpd\": mean log predictive density (MLPD), , ELPD divided number observations. corresponding uncertainty interval, normal approximation used. \"gmpd\": geometric mean predictive density (GMPD), , exp() MLPD. GMPD especially helpful discrete response families (, GMPD bounded zero one). corresponding standard error, delta method used. corresponding uncertainty interval type \"exponentiated normal approximation\" uncertainty interval bounds exponentiated uncertainty interval bounds MLPD. \"mse\": mean squared error (available situations mentioned section \"Details\" ). corresponding uncertainty interval, log-normal approximation used deltas FALSE normal approximation used deltas TRUE (\"mixed\", case plot.vsel()). \"rmse\": root mean squared error (available situations mentioned section \"Details\" ). corresponding standard error, delta method used. corresponding uncertainty interval, log-normal approximation used deltas FALSE normal approximation used deltas TRUE (\"mixed\", case plot.vsel()). \"R2\": R-squared, .e., coefficient determination (available situations mentioned section \"Details\" ). corresponding standard error, delta method used. corresponding uncertainty interval, normal approximation used. \"acc\" (alias, \"pctcorr\"): classification accuracy (available situations mentioned section \"Details\" ). \"classification accuracy\", mean proportion correctly classified observations. , response category (\"class\") highest probability (probabilities model-based) taken prediction (\"classification\") observation. corresponding uncertainty interval, normal approximation used. \"auc\": area ROC curve (available situations mentioned section \"Details\" ). corresponding standard error lower upper uncertainty interval bounds, bootstrapping used. supported case subsampled LOO-CV (see argument nloo cv_varsel()). type One items \"mean\", \"se\", \"lower\", \"upper\", \"diff\", \"diff.lower\", \"diff.upper\", \"diff.se\" indicating compute item stats (mean, standard error, lower upper uncertainty interval bounds, mean difference corresponding statistic reference model, lower upper uncertainty interval bound difference, standard error difference, respectively; note GMPD, \"diff\", \"diff.lower\", \"diff.upper\", \"diff.se\" actually refer ratio vs. reference model, difference). uncertainty interval bounds belong uncertainty intervals (nominal) coverage 1 - alpha. Items \"diff\", \"diff.lower\", \"diff.upper\", \"diff.se\" supported deltas FALSE. deltas May set FALSE TRUE. FALSE, submodel performance statistics estimated actual scale. TRUE, submodel statistics estimated relatively baseline model (see argument baseline). GMPD, term \"relatively\" refers ratio vs. baseline model (.e., submodel statistic divided baseline model statistic). stats, \"relatively\" refers difference baseline model (.e., submodel statistic minus baseline model statistic). alpha number determining (nominal) coverage 1 - alpha uncertainty intervals. example, case normal-approximation uncertainty interval, alpha = 2 * pnorm(-1) corresponds uncertainty interval stretching one standard error either side point estimate. baseline summary.vsel(): relevant deltas TRUE. plot.vsel(): Always relevant. Either \"ref\" \"best\", indicating whether baseline reference model best submodel found (terms stats[1]), respectively. case subsampled LOO-CV, baseline = \"best\" supported. resp_oscale relevant latent projection. single logical value indicating whether calculate performance statistics original response scale (TRUE) latent scale (FALSE). cumulate Passed argument cumulate cv_proportions(). Affects column cv_proportions_diag summary table. ... Arguments passed internal function used bootstrapping (applicable; see argument stats). Currently, relevant arguments B (number bootstrap samples, defaulting 2000) seed (see set.seed(), defaulting NA set.seed() called within function ).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/summary.vsel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of a varsel() or cv_varsel() run — summary.vsel","text":"object class vselsummary. elements object meant accessed directly instead via helper functions (print.vselsummary() performances.vselsummary()).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/summary.vsel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary of a varsel() or cv_varsel() run — summary.vsel","text":"stats options \"mse\", \"rmse\", \"R2\" available : traditional projection, latent projection resp_oscale = FALSE, latent projection resp_oscale = TRUE combination <refmodel>$family$cats NULL. stats option \"acc\" (= \"pctcorr\") available : binomial() family case traditional projection, families case augmented-data projection, binomial() family (original response scale) case latent projection resp_oscale = TRUE combination <refmodel>$family$cats NULL, families (original response scale) case latent projection resp_oscale = TRUE combination <refmodel>$family$cats NULL. stats option \"auc\" available : binomial() family case traditional projection, binomial() family (original response scale) case latent projection resp_oscale = TRUE combination <refmodel>$family$cats NULL. Note stats option \"auc\" supported case subsampled LOO-CV (see argument nloo cv_varsel()).","code":""},{"path":[]},{"path":"https://mc-stan.org/projpred/dev/reference/summary.vsel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of a varsel() or cv_varsel() run — summary.vsel","text":"","code":"# Data: dat_gauss <- data.frame(y = df_gaussian$y, df_gaussian$x)  # The `stanreg` fit which will be used as the reference model (with small # values for `chains` and `iter`, but only for technical reasons in this # example; this is not recommended in general): fit <- rstanarm::stan_glm(   y ~ X1 + X2 + X3 + X4 + X5, family = gaussian(), data = dat_gauss,   QR = TRUE, chains = 2, iter = 500, refresh = 0, seed = 9876 )  # Run varsel() (here without cross-validation, with L1 search, and with small # values for `nterms_max` and `nclusters_pred`, but only for the sake of # speed in this example; this is not recommended in general): vs <- varsel(fit, method = \"L1\", nterms_max = 3, nclusters_pred = 10,              seed = 5555) print(summary(vs), digits = 1) #>  #> Family: gaussian  #> Link function: identity  #>  #> Formula: y ~ X1 + X2 + X3 + X4 + X5 #> Observations: 100 #> Projection method: traditional #> Search method: L1 #> Maximum submodel size for the search: 3 #> Number of projected draws in the search: 1 (from clustered projection) #> Number of projected draws in the performance evaluation: 10 (from clustered projection) #> Argument `refit_prj`: TRUE #>  #> Submodel performance evaluation summary with `deltas = FALSE` and `cumulate = FALSE`: #>  size ranking_fulldata cv_proportions_diag elpd elpd.se elpd.diff elpd.diff.se #>     0      (Intercept)                  NA -249       5     -39.1          5.8 #>     1               X1                  NA -231       6     -20.5          4.5 #>     2               X5                  NA -220       6      -9.7          3.4 #>     3               X3                  NA -211       7      -0.4          0.9 #>  #> Reference model performance evaluation summary with `deltas = FALSE`: #>    elpd elpd.se  #>    -210       7"},{"path":"https://mc-stan.org/projpred/dev/reference/varsel.html","id":null,"dir":"Reference","previous_headings":"","what":"Run search and performance evaluation without cross-validation — varsel","title":"Run search and performance evaluation without cross-validation — varsel","text":"Run search part evaluation part projection predictive variable selection. search part determines predictor ranking (also known solution path), .e., best submodel submodel size (number predictor terms). evaluation part determines predictive performance submodels along predictor ranking. special method varsel.vsel() re-uses search results earlier varsel() (cv_varsel()) run, illustrated main vignette.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/varsel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run search and performance evaluation without cross-validation — varsel","text":"","code":"varsel(object, ...)  # Default S3 method varsel(object, ...)  # S3 method for class 'vsel' varsel(object, ...)  # S3 method for class 'refmodel' varsel(   object,   d_test = NULL,   method = \"forward\",   ndraws = NULL,   nclusters = 20,   ndraws_pred = 400,   nclusters_pred = NULL,   refit_prj = !inherits(object, \"datafit\"),   nterms_max = NULL,   verbose = getOption(\"projpred.verbose\", as.integer(interactive())),   search_control = NULL,   lambda_min_ratio = 1e-05,   nlambda = 150,   thresh = 1e-06,   penalty = NULL,   search_terms = NULL,   search_out = NULL,   seed = NA,   ... )"},{"path":"https://mc-stan.org/projpred/dev/reference/varsel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run search and performance evaluation without cross-validation — varsel","text":"object object class refmodel (returned get_refmodel() init_refmodel()) object can passed argument object get_refmodel(). ... varsel.default(): Arguments passed get_refmodel() well varsel.refmodel(). varsel.vsel(): Arguments passed varsel.refmodel(). varsel.refmodel(): Arguments passed divergence minimizer (see argument div_minimizer init_refmodel() well section \"Draw-wise divergence minimizers\" projpred-package) refitting submodels performance evaluation (refit_prj TRUE). d_test list structure outlined section \"Argument d_test\" , providing test data evaluating predictive performance submodels well reference model. NULL, training data used. method method search part. Possible options \"forward\" forward search \"L1\" L1 search. See also section \"Details\" . ndraws Number posterior draws used search part. Ignored nclusters NULL case L1 search (L1 search always uses single cluster). (nclusters ndraws) NULL, number posterior draws reference model used ndraws. See also section \"Details\" . nclusters Number clusters posterior draws used search part. Ignored case L1 search (L1 search always uses single cluster). meaning NULL, see argument ndraws. See also section \"Details\" . ndraws_pred relevant refit_prj TRUE. Number posterior draws used evaluation part. Ignored nclusters_pred NULL. (nclusters_pred ndraws_pred) NULL, number posterior draws reference model used ndraws_pred. See also section \"Details\" . nclusters_pred relevant refit_prj TRUE. Number clusters posterior draws used evaluation part. meaning NULL, see argument ndraws_pred. See also section \"Details\" . refit_prj evaluation part, projections onto submodels along predictor ranking performed using ndraws_pred draws nclusters_pred clusters (TRUE) projections search part, used ndraws draws nclusters clusters, re-used (FALSE)? nterms_max Maximum submodel size (number predictor terms) search continued. NULL, min(19, D) used D number terms reference model (search_terms, supplied). Note nterms_max count intercept, use nterms_max = 0 intercept-model. (Correspondingly, D count intercept.) verbose single integer value set \\(\\{0, 1, 2, 3,   4\\}\\) (varsel(), \\(3\\) \\(4\\) effect), indicating much information () print computations. Higher values indicate information printed, 0 deactivates verbose mode. Internally, argument verbose coerced integer via .integer(), technically, single logical value single numeric value work well. search_control list \"control\" arguments (.e., tuning parameters) search. case forward search, arguments passed divergence minimizer (see argument div_minimizer init_refmodel() well section \"Draw-wise divergence minimizers\" projpred-package). case forward search, NULL causes ... used performance evaluation, also search. case L1 search, possible arguments : lambda_min_ratio: Ratio smallest largest lambda L1-penalized search (default: 1e-5). parameter essentially determines long search carried , .e., large submodels explored. need change unless program gives warning . nlambda: Number values lambda grid L1-penalized search (default: 150). need change unless program gives warning . thresh: Convergence threshold computing L1 path (default: 1e-6). Usually, need change . lambda_min_ratio Deprecated (please use search_control instead). relevant L1 search. Ratio smallest largest lambda L1-penalized search. parameter essentially determines long search carried , .e., large submodels explored. need change unless program gives warning . nlambda Deprecated (please use search_control instead). relevant L1 search. Number values lambda grid L1-penalized search. need change unless program gives warning . thresh Deprecated (please use search_control instead). relevant L1 search. Convergence threshold computing L1 path. Usually, need change . penalty relevant L1 search. numeric vector determining relative penalties costs predictors. value 0 means predictors cost therefore selected first, whereas Inf means predictors never selected. NULL, 1 used predictor. search_terms relevant forward search. custom character vector predictor term blocks consider search. Section \"Details\" describes precisely \"predictor term block\" means. intercept (\"1\") always included internally via union(), difference including explicitly omitting . default search_terms considers terms reference model's formula. search_out Intended internal use. seed Pseudorandom number generation (PRNG) seed results can obtained needed. Passed argument seed set.seed(), can also NA call set.seed() . NA, PRNG state reset (state calling varsel()) upon exiting varsel(). , seed used clustering reference model's posterior draws (!.null(nclusters) !.null(nclusters_pred)) drawing new group-level effects predicting multilevel submodel (however, yet case GAMM).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/varsel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run search and performance evaluation without cross-validation — varsel","text":"object class vsel. elements object meant accessed directly instead via helper functions (see main vignette projpred-package).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/varsel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run search and performance evaluation without cross-validation — varsel","text":"Arguments ndraws, nclusters, nclusters_pred, ndraws_pred automatically truncated number posterior draws reference model (1 datafits). Using less draws clusters ndraws, nclusters, nclusters_pred, ndraws_pred posterior draws reference model may result slightly inaccurate projection performance. Increasing arguments affects computation time linearly. argument method, restrictions: reference model multilevel additive formula terms reference model set augmented-data projection, forward search available. Furthermore, argument search_terms requires forward search take effect. L1 search faster forward search, forward search may accurate. Furthermore, forward search may find sparser model comparable performance found L1 search, may also overfit predictors added. overfit can detected running search validation (see cv_varsel()). L1 search may select interaction term involved lower-order interaction terms (including main-effect terms) selected. projpred versions > 2.6.0, resulting predictor ranking automatically modified lower-order interaction terms come interaction term, conceptually undesired, choose forward search instead. elements search_terms character vector need individual predictor terms. Instead, can building blocks consisting several predictor terms connected + symbol. understand building blocks work, important know projpred's forward search works: starts empty vector chosen later contain already selected predictor terms. , search iterates model sizes \\(j \\\\{0, ..., J\\}\\) (\\(J\\) denoting maximum submodel size, counting intercept). candidate models model size \\(j\\) constructed elements search_terms yield model size \\(j\\) combined chosen predictor terms. Note sometimes, may candidate models model size \\(j\\). Also note internally, search_terms expanded include intercept (\"1\"), first step search (model size 0) always consists intercept-model candidate. search_terms example, consider reference model formula y ~ x1 + x2 + x3. , ensure x1 always included candidate models, specify search_terms = c(\"x1\", \"x1 + x2\", \"x1 + x3\", \"x1 + x2 + x3\") (, simpler way leads results, search_terms = c(\"x1\", \"x1 + x2\", \"x1 + x3\"), helper function force_search_terms() exists). search start y ~ 1 candidate model size 0. model size 1, y ~ x1 candidate. model size 2, y ~ x1 + x2 y ~ x1 + x3 two candidates. last model size 3, y ~ x1 + x2 + x3 candidate. another example, exclude x1 search, specify search_terms = c(\"x2\", \"x3\", \"x2 + x3\") (, simpler way leads results, search_terms = c(\"x2\", \"x3\")).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/varsel.html","id":"argument-d-test","dir":"Reference","previous_headings":"","what":"Argument d_test","title":"Run search and performance evaluation without cross-validation — varsel","text":"NULL, d_test needs list following elements: data: data.frame containing predictor variables test set. offset: numeric vector containing offset values test set (offset, use vector zeros). weights: numeric vector containing observation weights test set (observation weights, use vector ones). y: vector factor containing response values test set. case latent projection, vector containing latent response values, can also vector full NAs latent-scale post-processing needed. y_oscale: needs provided case latent projection needs vector factor containing original (.e., non-latent) response values test set.","code":""},{"path":[]},{"path":"https://mc-stan.org/projpred/dev/reference/varsel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run search and performance evaluation without cross-validation — varsel","text":"","code":"# Data: dat_gauss <- data.frame(y = df_gaussian$y, df_gaussian$x)  # The `stanreg` fit which will be used as the reference model (with small # values for `chains` and `iter`, but only for technical reasons in this # example; this is not recommended in general): fit <- rstanarm::stan_glm(   y ~ X1 + X2 + X3 + X4 + X5, family = gaussian(), data = dat_gauss,   QR = TRUE, chains = 2, iter = 500, refresh = 0, seed = 9876 )  # Run varsel() (here without cross-validation, with L1 search, and with small # values for `nterms_max` and `nclusters_pred`, but only for the sake of # speed in this example; this is not recommended in general): vs <- varsel(fit, method = \"L1\", nterms_max = 3, nclusters_pred = 10,              seed = 5555) # Now see, for example, `?print.vsel`, `?plot.vsel`, `?suggest_size.vsel`, # and `?ranking` for possible post-processing functions."},{"path":"https://mc-stan.org/projpred/dev/reference/y_wobs_offs.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract response values, observation weights, and offsets — y_wobs_offs","title":"Extract response values, observation weights, and offsets — y_wobs_offs","text":"helper function extracting response values, observation weights, offsets dataset. designed use extract_model_data function custom reference model objects (see init_refmodel()).","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/y_wobs_offs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract response values, observation weights, and offsets — y_wobs_offs","text":"","code":"y_wobs_offs(newdata, wrhs = NULL, orhs = NULL, resp_form)"},{"path":"https://mc-stan.org/projpred/dev/reference/y_wobs_offs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract response values, observation weights, and offsets — y_wobs_offs","text":"newdata data.frame least response values extracted. wrhs Either right-hand side formula consisting variable newdata containing weights, NULL (using vector ones), directly numeric vector observation weights. orhs Either right-hand side formula consisting variable newdata containing offsets, NULL (using vector zeros), directly numeric vector offsets. resp_form formula, second element formula (formula standard formula left-hand right-hand side, second element left-hand side; formula right-hand side formula, second element right-hand side) extracted newdata (resp_form may either standard formula right-hand side formula, latter case, right-hand side consist response variable). cases, NULL returned element y output list.","code":""},{"path":"https://mc-stan.org/projpred/dev/reference/y_wobs_offs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract response values, observation weights, and offsets — y_wobs_offs","text":"list elements y, weights, offset, numeric vector containing data response, observation weights, offsets, respectively. exception y may also NULL (depending argument resp_form), non-numeric vector, factor.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"projpred-291","dir":"Changelog","previous_headings":"","what":"projpred 2.9.1","title":"projpred 2.9.1","text":"CRAN release: 2025-10-28","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"major-changes-2-9-1","dir":"Changelog","previous_headings":"","what":"Major changes","title":"projpred 2.9.1","text":"Fixed major bug forward search 3-way higher-order interactions. See “Bug fixes” details.","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"bug-fixes-2-9-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"projpred 2.9.1","text":"Fixed bug caused forward search place lower-order terms 3-way higher-order interaction term interaction term. (GitHub: #531, #532) Fixed bug caused project() construct incorrect internal table predictor terms (argument predictor_terms can select one several terms ) case group-level term contain group-level intercept. (GitHub: #533, #534) Relaxed test prevent spurious failures unblock reverse dependencies. functional changes.","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"projpred-290","dir":"Changelog","previous_headings":"","what":"projpred 2.9.0","title":"projpred 2.9.0","text":"CRAN release: 2025-07-08","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"major-changes-2-9-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"projpred 2.9.0","text":"Subsampled PSIS-LOO CV (usable via argument nloo cv_varsel()) fixed experimental anymore. restrictions: Performance statistic \"auc\" (see argument stats summary.vsel() plot.vsel(); argument stat suggest_size() concerned well) supported case subsampled PSIS-LOO CV. Furthermore, baseline = \"best\" (summary.vsel() plot.vsel()) supported case subsampled PSIS-LOO CV either. (GitHub: #94, #496) uncertainty interval performance statistic \"mse\" now based log-normal approximation (instead normal approximation) argument deltas summary.vsel() plot.vsel() FALSE. (GitHub: #496) standard error performance statistic \"rmse\" now computed via delta method (instead bootstrapping). uncertainty interval \"rmse\" now based log-normal approximation (instead bootstrapping) argument deltas summary.vsel() plot.vsel() FALSE based normal approximation (instead bootstrapping) deltas TRUE. (GitHub: #496) Performance statistic \"R2\" (R-squared) added, see argument stats summary.vsel() plot.vsel(); argument stat suggest_size() supports well. (GitHub: #483, #496) performance evaluation part cv_varsel() cv_method = \"LOO\" validate_search = FALSE now always applies Pareto smoothing computing importance sampling weights (long number importance ratios tail large enough; otherwise, Pareto smoothing applied). Previously, case projected draws nonconstant weights (.e., case clustering), Pareto smoothing applied. (GitHub: #496, #507) threshold high Pareto-\\(\\hat{k}\\) values updated one presented Vehtari et al. (2024, “Pareto smoothed importance sampling”, Journal Machine Learning Research, 25(72):1-58, https://www.jmlr.org/papers/v25/19-556.html). threshold depends Monte Carlo sample size often close former fixed threshold 0.7 (short introduction may also found LOO glossary). Correspondingly, former “secondary” threshold 0.5 used anymore either. (GitHub: #490, #498) Argument type summary.vsel() gained options \"diff.lower\" \"diff.upper\" (see documentation details). (GitHub: #511) Argument deltas plot.vsel() gained option \"mixed\" combines point estimates deltas = FALSE uncertainty bars deltas = TRUE. (GitHub: #511) latent projection, function passed argument latent_ll_oscale extend_family() now needs argument dis (second position). Similarly, function passed argument latent_ppd_oscale extend_family() now needs argument dis_resamp (second position). makes possible, e.g., use latent projection log-normal response family. (GitHub: #513) Argument verbose project(), varsel(), cv_varsel() changed logical integer. However, logical values continue work (since .integer() applied internally). Global options projpred.extra_verbose projpred.verbose_project now deprecated additional verbosity can achieved via higher integer values argument verbose. new global option projpred.verbose may used set argument verbose project(), varsel(), cv_varsel() globally. (GitHub: #519) global options renamed, please use new names now (although old names continue work ) (GitHub: #500, #521): Global option projpred.prll_cv renamed projpred.parallel_cv. Global option projpred.warn_prj_drawwise renamed projpred.warn_proj_drawwise. Global option projpred.check_conv renamed projpred.check_convergence. Global option projpred.prll_prj_trigger renamed projpred.parallel_proj_trigger. plot.vsel(), several defaults changed (GitHub: #517, #522): Argument text_angle now defaults 45 (previously, default NULL). Argument size_position now defaults \"primary_x_top\" (previously, default \"primary_x_bottom\"). Argument show_cv_proportions now defaults FALSE (previously, default TRUE). arguments can now also controlled via global options, see section “Usage” ?plot.vsel names main vignette illustration. changelog version 2.6.0 contain notification cvfolds() deprecated new name cv_folds() used instead. changelog entry added now (see ), also mentioned make users aware (although deprecation warning already added version 2.6.0 kept cvfolds() eventually removed future release). (GitHub: #411)","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"minor-changes-2-9-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"projpred 2.9.0","text":"using doFuture backend parallelization, progression updates can now received via progressr package, see ?`projpred-package` (section “Parallelization”). (GitHub: #504) Several enhancements concerning verbosity, e.g., number projected draws (resulting clustering thinning) now printed different steps computations verbose-mode output redirected stderr() instead stdout(). (GitHub: #506, #518) CV parallelization (see argument parallel cv_varsel()), new global option projpred.export_to_workers may set character vector names objects export global environment parallel workers. (GitHub: #497, #510) Added global options projpred.foreach_errorhandling projpred.foreach_verbose whose values passed foreach::foreach()’s arguments .errorhandling .verbose, respectively. defaults new global options respective foreach::foreach() arguments: \"stop\" global option projpred.foreach_errorhandling FALSE global option projpred.foreach_verbose. (GitHub: commit 3231d13) Added global options control several arguments plot.vsel() plot.cv_proportions() (see section “Usage” help pages two functions). (GitHub: commit 3333043) Changed maintainer Osvaldo Martin.","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"bug-fixes-2-9-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"projpred 2.9.0","text":"Fixed bug caused error using augmented-data latent projection combination single projected draw performance evaluation cv_varsel() cv_method = \"LOO\" validate_search = FALSE. (GitHub: #512) Previously, case PSIS-LOO CV validate_search = TRUE thinned posterior draws projection (.e., argument(s) ndraws ndraws_pred used, nclusters nclusters_pred), print.vselsummary() incorrectly reported posterior draws clustered. now fixed, thinning reported cases. (GitHub: #516) Fixed internal default extract_model_data function using latent projection custom reference model object. (GitHub: #523)","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"projpred-280","dir":"Changelog","previous_headings":"","what":"projpred 2.8.0","title":"projpred 2.8.0","text":"CRAN release: 2023-12-14","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"major-changes-2-8-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"projpred 2.8.0","text":"Search results generated earlier varsel() cv_varsel() call can now re-used help new varsel.vsel() cv_varsel.vsel() methods (.e., applying varsel() cv_varsel() output earlier varsel() cv_varsel() call). can save lot time re-running predictive performance evaluation part multiple times based search results. illustration may found updated main vignette (section “Preliminary cv_varsel() run”; general description may also found section “Speed”). (GitHub: #461, #463, #465, #466) K-fold CV can now combined validate_search = FALSE. Related internal change may cause subsampled PSIS-LOO CV (experimental feature controlled argument nloo cv_varsel()) clustered projection search (.e., 1 < nclusters && nclusters < S, S denotes number posterior draws reference model) yield slightly different results due different internal pseudorandom number generator (PRNG) states. Furthermore, .na(seed), PRNG state code downstream cv_varsel() call different due internal change. (GitHub: #464) print.vselsummary() (hence also print.vsel()) now prints reference model’s performance evaluation results well (just submodels). Correspondingly, new helper function performances() added allows access reference model’s (well submodels’) performance evaluation results. (GitHub: #471) Argument solution_terms project() deprecated. Please use new argument predictor_terms instead. (GitHub: #472) expert users augmented-data projection : Objects class augmat augvec need attribute called nobs_orig anymore, new attribute called ndiscrete, giving number (possibly latent) response categories instead number observations (see ?`augdat-internals`). simplifies subsetting objects. (GitHub: #473) default, projpred now catches messages warnings draw-wise divergence minimizers throws unique collection performing draw-wise divergence minimizations (.e., draw-wise projections). can deactivated setting global option projpred.warn_prj_drawwise FALSE. Previously, projpred suppressed messages warnings. (GitHub: #478) default, projpred now checks convergence draw-wise divergence minimizers throws warning case potential convergence problems. can deactivated setting global option projpred.check_conv FALSE. (GitHub: #478)","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"minor-changes-2-8-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"projpred 2.8.0","text":".matrix.projection(), nm_scheme = \"auto\" deprecated. Please use nm_scheme = NULL instead. plot produced plot.vsel() now includes title subtitle, subtitle mentioning nominal coverage well type confidence intervals (CIs) explicitly. However, case facetted plot (.e., case multiple stats) stats implying different CI type stats, CI types omitted (mentioning make subtitle complicated). Note title subtitle can always omitted <plot.vsel() output object> + ggplot2::labs(title = NULL, subtitle = NULL). (GitHub: #468) plot.vsel() gained new argument show_cv_proportions, allowing omit CV ranking proportions. (GitHub: #470) Renamed summary.vsel()’s output element selection perf_sub made names data.frame’s columns consistent easier handle data.frame programmatically. breaking change elements vselsummary objects (.e., elements objects returned summary.vsel()) meant accessed directly (elements perf_sub perf_ref, new helper function performances() added, see “Major changes” ). (GitHub: #471) summary.vsel() plot.vsel(), NA_character_ “string” (previously used placeholder predictor term intercept-model size 0) replaced string \"(Intercept)\". (GitHub: #471) Renamed project()’s output element solution_terms predictor_terms. breaking change element meant accessed via predictor_terms(). (GitHub: #472) Renamed elements solution_terms solution_terms_cv vsel objects (returned varsel() cv_varsel()) predictor_ranking predictor_ranking_cv, respectively. breaking change elements meant accessed via ranking(). (GitHub: #472) Global option projpred.verbose_project now affects verbosity projections performed built-divergence minimizers (except built-L1-projection divergence minimizer). particular, divergence minimizer (matter whether built-user-specified) also employed calling varsel() cv_varsel(), setting option projpred.verbose_project TRUE now shows progress projections varsel() cv_varsel() call. Previously, option affected projections performed project() (see default project()’s argument verbose). Usually, setting projpred.verbose_project TRUE makes sense setting global option projpred.extra_verbose argument verbose (varsel() cv_varsel()) TRUE well. Added print() methods objects class refmodel projection, mainly avoid cluttering console printing objects accidentally. Argument extract_model_data init_refmodel() now allowed NULL using internal default. print.vselsummary() print.vsel() now use minimum number significant digits 2 default. previous behavior can restored setting options(projpred.digits = getOption(\"digits\")). Added new performance statistic, geometric mean predictive density (GMPD). particularly useful discrete outcomes , GMPD geometric mean probabilities hence bounded zero one. details, see argument stats ?summary.vsel help. (GitHub: #476) project()’s argument verbose now gets passed argument verbose_divmin (projpred_verbose) divergence minimizer function (see argument div_minimizer init_refmodel()). Arguments lambda_min_ratio, nlambda, thresh varsel() cv_varsel() deprecated. Instead, varsel() cv_varsel() gained new argument called search_control accepts control arguments search list. Thus, former arguments lambda_min_ratio, nlambda, thresh now specified via search_control (note search_control general also accepts control arguments forward search). (GitHub: #477) run_cvfun() gained new argument folds, accepting vector fold indices (default NULL, meaning folds constructed internally, ). new argument helpful, example, perform stratified K-fold CV convenient manner (example added ?run_cvfun help). (GitHub: #480) plot.vsel() gained new argument size_position. Setting \"primary_x_top\" moves text submodel sizes x-axis. Setting \"secondary_x\" moves text secondary x-axis located top plot. (GitHub: #484) default alignments x-axis text plot.vsel() changed: x-axis text now right-aligned (left-aligned) text_angle > 0 (< 0) also top-aligned -90 < text_angle && text_angle < 90 && text_angle != 0. emphasize alignments can always customized <plot.vsel() output object> + ggplot2::theme(axis.text.x.bottom = ggplot2::element_text(hjust = <hjust_value>, vjust = <vjust_value>)). (GitHub: #484)","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"bug-fixes-2-8-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"projpred 2.8.0","text":"Fixed bug sometimes causing plot.vsel() produce extra (“empty”) ticks x-axis. (GitHub: #462) Fixed bug summary.vsel() plot.vsel() causing bootstrap results (.e., standard error confidence interval RMSE AUC) incorrect deltas = TRUE. (GitHub: #474) Fixed several bugs summary.vsel() plot.vsel() sometimes causing incorrect predictive performance results case subsampled PSIS-LOO CV (experimental feature controlled argument nloo cv_varsel()). (GitHub: #475) Fixed backward compatibility legacy structure cvfits (new structure introduced version 2.7.0, see GitHub pull request #456).","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"projpred-270","dir":"Changelog","previous_headings":"","what":"projpred 2.7.0","title":"projpred 2.7.0","text":"CRAN release: 2023-09-30","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"major-changes-2-7-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"projpred 2.7.0","text":"default search method now \"forward\" search kinds models (previously, \"L1\" search used default available). reason change general, forward search favorable compared L1 search (see section “Details” ?varsel ?cv_varsel). (GitHub: #453, #459) Several enhancements respect projected draws different (.e., nonconstant) weights, typically occurs case clustered projection (GitHub: #206, #439): .matrix.projection() now throws error projected draws nonconstant weights. (error default behavior; can avoided setting new argument allow_nonconst_wdraws_prj TRUE, expert use case, weights projected draws stored attribute wdraws_prj handling attribute requires special care, e.g., subsetting returned matrix.) Instead, posterior::as_draws_matrix() method (as_draws_matrix.projection()) added allows safer handling weights (e.g., help posterior::resample_draws(), see section “Examples” ?as_draws_matrix.projection help). Just like .matrix.projection(), as_draws_matrix.projection() also works common case projected draws constant weights. posterior::as_draws() method (as_draws.projection()) also added, merely wrapper as_draws_matrix.projection(). proj_linpred() now also throws error (default) projected draws nonconstant weights gained new arguments allow_nonconst_wdraws_prj return_draws_matrix. .matrix.projection(), argument allow_nonconst_wdraws_prj expert use . Instead, return_draws_matrix intended argument case projected draws nonconstant weights. Similarly as_draws_matrix.projection(), requires posterior package returns draws_matrix (weighted draws projected draws nonconstant weights integrated FALSE). proj_predict() gained argument return_draws_matrix converting returned matrix draws_matrix (requires posterior package). proj_predict(), modifications necessary argument nresample_clusters already takes weights projected draws appropriately account. Added helper function run_cvfun() can used create input cv_varsel.refmodel()’s new argument cvfits (init_refmodel()’s argument cvfits, avoids call init_refmodel() get_refmodel() twice). See documentation run_cvfun() details. (GitHub: #458) Users applying varsel() cv_varsel() object class vsel now need use varsel(get_refmodel(<vsel_object>), <...>) cv_varsel(get_refmodel(<vsel_object>), <...>) instead varsel(<vsel_object>, <...>) cv_varsel(<vsel_object>, <...>), respectively. reason new methods varsel.vsel() cv_varsel.vsel() added. Currently, placeholders, future release, offer new functionality.","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"minor-changes-2-7-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"projpred 2.7.0","text":"L1 search selects interaction term involved lower-order interaction terms (including main-effect terms) selected, predictor ranking now automatically modified lower-order interaction terms come interaction term. corresponding warning thrown, may deactivated setting global option projpred.warn_L1_interactions FALSE. Previously, beginning version 2.5.0, warning thrown L1 search selected interaction term involved main-effect terms selected. (GitHub: #420) Added progress bar project() (using built-divergence minimizers). , project() gained new argument verbose can also controlled via global option projpred.verbose_project. default, new progress bar activated. (GitHub: #421) Added new argument parallel cv_varsel(). parallel = TRUE, costly parts projpred’s cross-validation (CV) can run parallel. See documentation new argument (section “Note” cv_varsel()’s documentation) details. (GitHub: #422) Added warning issue #323 (multilevel Gaussian models, projection onto full model can instable). (GitHub: #426) plot.vsel() gained new arguments point_size bar_thickness control size points thickness uncertainty bars, respectively. default, points slightly larger now uncertainty bars slightly thicker . previous appearance can achieved setting point_size = 1.5 bar_thickness = 0.5. (GitHub: #429, #443) plot.vsel(): Added argument ranking_colored coloring points uncertainty bars according magnitude (possibly cumulated) CV ranking proportions. (GitHub: #430; thanks @yannmclatchie suggestion) Added warnings problems described section “Troubleshooting” main vignette. (GitHub: #431) Output element p_type project() removed. Instead, output element const_wdraws_prj added, definition essentially inverse former element p_type (see updated documentation project()’s output). breaking change users (p_type mainly intended internal use new element const_wdraws_prj , ) slightly enhances cases .matrix.projection() used throw warning (now throws error; see “Major changes” ) concerning weights projected draws cases proj_predict() resamples projected draws using argument nresample_clusters. (GitHub: #432) Improved handling PSIS-LOO CV warnings. (GitHub: #438, #451) Reduced peak memory usage forward search. global option projpred.run_gc also added, see general package documentation (available online typing ?`projpred-package`). (GitHub: #442) Slightly improved efficiency K-fold PSIS-LOO CV, especially case large number observations. special conditions (refit_prj = FALSE, 1 < nclusters && nclusters < S, 1 < nclusters_pred && nclusters_pred < S; note 1 < nclusters requires forward search, S denotes number posterior draws reference model, nclusters_pred essentially unused refit_prj = FALSE), change might affect K-fold CV results, due different pseudorandom number generator (PRNG) state folds first one. similarly special conditions (refit_prj = FALSE 1 < nclusters_pred && nclusters_pred < S), PRNG state LOO subsampling (see argument nloo) affected. Furthermore, .na(seed), PRNG state code downstream cv_varsel() calls different due change. (GitHub: #446) Slightly improved efficiency end cv_varsel(), especially case large number observations. .na(seed), PRNG state code downstream cv_varsel() call refit_prj = TRUE 1 < nclusters_pred && nclusters_pred < S (S denotes number posterior draws reference model) different due change. (GitHub: #447) Slightly improved memory usage varsel(), cv_varsel(), project(). case LOO subsampling (see argument nloo) clustered projection (.e., 1 < nclusters && nclusters < S 1 < nclusters_pred && nclusters_pred < S, S denotes number posterior draws reference model), change may lead slightly different results due different internal PRNG states. Furthermore, .na(seed), PRNG state code downstream cv_varsel() call different due change. (GitHub: #448) internal function .extract_model_data removed. alternative (differences compared .extract_model_data), new function y_wobs_offs() exported. Fixes/enhancements respect observation weights offsets (GitHub: #449): case rstanarm reference model, defaults arguments weightsnew offsetnew (see proj_linpred(), proj_predict(), predict.refmodel()) now cause original observation weights offsets used possible (instead ones zeros, respectively, even considered bug—hence mentioned “Bug fixes” well). brms reference models, behavior already implemented . error now thrown length-zero element weights offset returned function supplied argument extract_model_data init_refmodel() (, vector ones zeros used silently observation weights offsets, respectively). Added helper function force_search_terms() allows construct search_terms certain predictor terms forced included (.e., forced selected first) whereas predictor terms optional (.e., subject variable selection, inclusion “forced” terms). (GitHub: #346) Reduced peak memory usage performance evaluation (precisely, re-projections done performance evaluation). reduction considerable especially multilevel submodels, possibly also additive submodels. (GitHub: #440, #450) message now thrown cutting search nterms_max’s internal default (currently) 19. (GitHub: #452) Added sub-section “Speed” main vignette’s “Troubleshooting” section. (GitHub: #455) case K-fold CV, list passed argument cvfits init_refmodel() sub-list called fits anymore. Instead, content former sub-list called fits moved one level , .e., placed directly list passed cvfits (empty element fits removed). time, old structure continue work, possibility deprecated removed future. (GitHub: #456) case K-fold CV, K reference model fits (.e., elements return value function passed argument cvfun init_refmodel() elements list supplied argument cvfits init_refmodel()) need lists anymore (see documentation argument cvrefbuilder init_refmodel()). (GitHub: #457)","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"bug-fixes-2-7-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"projpred 2.7.0","text":"Fixed bug printed number projected draws performance evaluation calling print.vselsummary() based output varsel() refit_prj = FALSE. Fixed bug sometimes causing error predicting submodel GLM interactions. (GitHub: #420) Fixed bug introduced version 2.6.0, causing incompatibility K-fold CV R versions < 4.2.0. (GitHub: #423, #427) Fixed bug augmented-data projection combination subsampled PSIS-LOO CV. (GitHub: #433) cv_varsel() validate_search = FALSE used call loo::psis() (submodel performance evaluation PSIS-LOO CV) even case draws different (.e., nonconstant) weights. cases, loo::sis() called now (warning). (GitHub: #438) Fixed bug rstanarm (custom) multilevel reference models interactions (: syntax) grouping variables, caused missing columns reference model’s data.frame (brms reference models, already done correctly). (GitHub: #445) case rstanarm reference model, defaults arguments weightsnew offsetnew (see proj_linpred(), proj_predict(), predict.refmodel()) now cause original observation weights offsets used possible (instead ones zeros, respectively, considered bug). brms reference models, behavior already implemented . (GitHub: #449) Fixed bug causing PSIS-LOO CV validate_search = FALSE fail case single projected draw. (GitHub: #454)","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"projpred-260","dir":"Changelog","previous_headings":"","what":"projpred 2.6.0","title":"projpred 2.6.0","text":"CRAN release: 2023-06-01","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"major-changes-2-6-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"projpred 2.6.0","text":"anticipation larger overhaul projpred user interface, release comes several new functions accessing investigating solution paths (now termed predictor rankings new functions, term hopefully easier grasp new users): Added new function called ranking() returns predictor ranking full-data search possibly also predictor rankings fold-wise searches case cross-validation (CV). (precisely, ranking() generic. method ranking.vsel(), applicable objects returned varsel() cv_varsel(). output class ranking.) Added new function called cv_proportions() computes ranking proportions (across CV folds, see ?cv_proportions details) fold-wise predictor rankings. (precisely, cv_proportions() generic. main method cv_proportions.ranking(), shortcut, cv_proportions.vsel() also added. output class cv_proportions.) Added new plot() method called plot.cv_proportions() plotting ranking proportions fold-wise predictor rankings. (shortcut, plot.ranking() also added.) new functions, message added print.vselsummary(), mentioning access investigate fold-wise predictor rankings (exist). Furthermore, due changes, element pct_solution_terms_cv vsel objects replaced element solution_terms_cv contains fold-wise predictor rankings instead corresponding ranking proportions. However, elements vsel objects meant accessed directly, replacement breaking change users. Finally, method solution_terms.vsel() (—now—possibility extract full-data predictor ranking) now deprecated removed future release. Please use new function ranking() instead (precisely, ranking()’s output element fulldata contains full-data predictor ranking also extracted solution_terms.vsel(); ranking()’s output element foldwise contains fold-wise predictor rankings—available—previously accessible via built-function). (GitHub: #289, #406, #411) Added function predictor_terms() retrieves predictor terms used project() run. Correspondingly, method solution_terms.projection() now deprecated removed future release. Please use predictor_terms() instead. (GitHub: #411) Renamed function cvfolds() cv_folds() (precisely, former variant still exists, deprecated removed future release). (GitHub: #411) seed (.seed) arguments now default NA instead sample.int(.Machine$integer.max, 1) pseudorandom number generator (PRNG) state reset user-supplied seed NA. allows setting seed beginning projpred-related code leaving seed (.seed) arguments default. Previously, practice lead results “less random” former default sample.int(.Machine$integer.max, 1) caused projpred functions seed (.seed) argument reset PRNG state upon exit, meaning two repeated calls cv_varsel() (example) PRNG-using code use seed internally. (GitHub: #412) Added main diagonal matrix returned cv_proportions() new column called cv_proportions_diag summary table computed summary.vsel(). purpose new column give basic sense (CV) variability ranking predictors. Argument cumulate cv_proportions() added summary.vsel() well (allow ranking proportions newly added column cumulated ranking proportions, desired). (GitHub: #289, #413) Added full-data predictor ranking main diagonal matrix returned cv_proportions() plot created plot.vsel(). new elements can omitted setting plot.vsel()’s new argument ranking_nterms_max NA (setting specific submodel size causes full-data predictor ranking corresponding ranking proportions omitted size). Argument cumulate cv_proportions() added plot.vsel() well (allow ranking proportions cumulated ranking proportions, desired). new arguments ranking_abbreviate (together ranking_abbreviate_args), ranking_repel (together ranking_repel_args), text_angle (see plot.vsel() documentation details). (GitHub: #289, #414, #416, #417)","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"minor-changes-2-6-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"projpred 2.6.0","text":"Enhancements vignettes. particular, new functions ranking(), cv_proportions(), plot.cv_proportions() (see “Major changes” ) now illustrated main vignette. (GitHub: #407, #411) Reduced peak memory usage cv_varsel() cv_method = \"kfold\". may slightly change results cv_varsel() run compared older projpred versions due different pseudorandom number generator (PRNG) states clustering posterior draws. (GitHub: #419) cvfits list (see init_refmodel()) need attribute called K anymore.","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"bug-fixes-2-6-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"projpred 2.6.0","text":"Fixed bug causing L1 search throw error case () terms. (GitHub: #404, #408) Fixed bug causing L1 search throw error case poly() polym() terms. Note just like step() MASS::stepAIC(), projpred’s search algorithms split poly() polym() term lower-degree polynomial terms (helpful, example, linear part poly() term degrees = 2 relevant quadratic part ). split-poly() polym() term needs performed manually (desired). (GitHub: #183, #409) Fixed bug causing non-smooth predictor terms treated smooth terms. (GitHub: #182, #410) See “Major changes” : Fixed bug causing projpred functions seed (.seed) argument use seed internally users set seed beginning (via set.seed()) two calls projpred functions seed (.seed) argument default PRNG-using code calls. (GitHub: #412)","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"projpred-250","dir":"Changelog","previous_headings":"","what":"projpred 2.5.0","title":"projpred 2.5.0","text":"CRAN release: 2023-04-05","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"minor-changes-2-5-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"projpred 2.5.0","text":"Setting new global option projpred.extra_verbose TRUE print submodel projpred currently projecting onto. Furthermore, method = \"forward\" verbose = TRUE varsel() cv_varsel(), new option also make projpred print submodel selected steps forward search percentage printed (percentage refers maximum submodel size search run ). general, however, recommend setting new global option TRUE cv_varsel() validate_search = TRUE (simply due amount information printed, also due progress bar work anymore intended). (GitHub: #363; thanks @jtimonen) Enhanced verbose output. particular, varsel() now verbose, similarly cv_varsel() already long time. verbose output cv_varsel() also updated, aim give users better understanding methodology behind projpred. (GitHub: #382) Slightly improved calculation predictive variances make less prone numerical inaccuracies. (GitHub: #199) Improved computational efficiency avoiding unnecessary final full-data performance evaluation (including costly re-projections refit_prj = TRUE, default non-datafit reference models) cv_varsel() validate_search = TRUE. Due change, results cv_varsel() (validate_search = TRUE) may slightly change due different pseudorandom number generator (PRNG) state clustering posterior draws. different PRNG state necessary make PRNG state full-data search validate_search = TRUE case consistent PRNG state full-data search validate_search = FALSE case. (GitHub: #385) Reduced dependencies. (GitHub: #388) Argument digits print.vselsummary() used passed internal round() call removed. Instead, digits can now passed print.data.frame() via ..., thereby determining minimum number significant digits printed. (GitHub: #389) Although bad practice (general), reference model lacking intercept can now used within projpred. However, always projected onto submodels include intercept. reason even true intercept reference model zero, need hold submodels. informational message mentioning projection onto intercept-including submodels thrown projpred encounters reference model lacking intercept. (GitHub: #96, #391) case non-predictor arguments s() t2(), projpred now throws error. (already documented , suitable error message missing.) (GitHub: #393, based #156 #269) case brms::categorical() family (supported since version 2.4.0), projpred now strips underscores response category names .matrix.projection() output, done brms. (GitHub: #394) L1 search now throws warning interaction term selected involved main-effect terms selected. (GitHub: #395) Documented multilevel (group-level) terms, function calls right-hand side | character (e.g., (1 | gr(group_variable)), possible brms) currently allowed projpred. corresponding error message also added. (GitHub: #319) Due internal refactoring: project()’s output elements submodl weights renamed outdmin wdraws_prj, respectively. varsel()’s cv_varsel()’s output element d_test replaced new output elements type_test y_wobs_test. Apart project()’s output element wdraws_prj, elements meant accessed manually, changes mentioned sake completeness. Output element wdraws_prj project() needed project() used clustered projection, default (discouraged applied cases, least small number clusters). Thus, renamings breaking changes rare cases. print.vselsummary() now also prints K case K-fold CV. print.vselsummary() output slightly improved, e.g., adding remark “search included” “search included” means. print.vselsummary() now also prints whether deltas = TRUE deltas = FALSE used. Output element pct_solution_terms_cv now also added vsel objects returned varsel(), case, simply NULL. (pct_solution_terms_cv NULL) now also case validate_search = FALSE used cv_varsel(). Minor enhancements documentation. Enhancements vignettes. particular, section “Troubleshooting” main vignette revised. proj_predict() used observation weights equal 1, warning now thrown. (GitHub: starts address #402)","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"bug-fixes-2-5-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"projpred 2.5.0","text":"Fixed long-standing bug (existing least version 2.0.2 ) causing predict.refmodel() require newdata contain response variable case brms reference model. similar paul-buerkner/brms#1457, concerns predict.refmodel() (paul-buerkner/brms#1457 referred predictions submodels). order make predict.refmodel() fix work, brms version 2.19.0 later needed. (GitHub: #381) Fixed long-standing bug (existing version 2.1.0 ) causing output element p_type project() incorrect case refit_prj = FALSE, !.null(nclusters), object class vsel created non-clustered (thinned) projection search phase. fix comes slightly different behavior proj_predict() datafits: draw nresample_clusters times posterior-projection predictive distribution (based single projected draw), . (GitHub: #211, #401) performing predictions submodels GLMs (submodels L1-penalized GLMs, possible case refit_prj = FALSE L1 search), new dataset containing character predictor variable single unique value (new dataset containing factor predictor variable single level) used cause error. case character (factor) predictor variable single unique value occurred, e.g., performance evaluation LOO CV character predictor got selected fold’s solution path. character issue existed version 2.1.0 (earlier versions, however, issues caused character predictors throw error). Now, issues respect character predictor variables resolved. issue single-level factor predictor variables resolved now well. (GitHub: #403) performing predictions submodels GLMs (submodels L1-penalized GLMs, possible case refit_prj = FALSE L1 search), new dataset containing factor predictor re-ordered levels (compared factor original dataset) used lead incorrect predictions. bug existed least version 2.0.2 (possibly even earlier versions), resolved now. (GitHub: #403) Fixed error thrown projpred’s internal GLM submodel fitter case unused levels factor. issue existed least version 2.0.2 (possibly even earlier versions), affected rstanarm reference model fits (brms reference model fits affected case brms::brm() call drop_unused_levels = FALSE, default). (GitHub: #403) Fixed bug caused L1 search combined refit_prj = FALSE (default datafits, reference model objects class refmodel usually employed practice) lead incorrect predictions L1-searched submodels (L1-penalized GLMs) solution path main effect ranked interaction term. bug existed least version 2.0.2 (possibly even earlier versions). mentioned submodel predictions affect performance evaluation, also projected dispersion parameter returned Kullback-Leibler divergence (corresponding cross-entropy). (GitHub: #403)","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"projpred-240","dir":"Changelog","previous_headings":"","what":"projpred 2.4.0","title":"projpred 2.4.0","text":"CRAN release: 2023-02-12","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"major-changes-2-4-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"projpred 2.4.0","text":"Introduction augmented-data projection (Weber et al., 2023) (see section “Supported types models” main vignette details). (GitHub: #70, #322) Introduction latent projection (Catalina et al., 2021) (see section “Supported types models” main vignette new latent-projection vignette details). consequence latent projection (precisely, resp_oscale = TRUE default summary.vsel()) varsel() cv_varsel() longer call suggest_size() internally end. Thus, print()-ing object class vsel longer includes suggested projection size output (stat suggested size fixed \"elpd\" anyway, fact many users probably aware ). (GitHub: #372) case multilevel models, projpred now two global options “integrating ” group-level effects: projpred.mlvl_pred_new projpred.mlvl_proj_ref_new. explained detail general package documentation (available online typing ?`projpred-package`). (GitHub: #379)","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"minor-changes-2-4-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"projpred 2.4.0","text":"Improvements numerical stability internal link inverse-link functions. (GitHub: #376)","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"bug-fixes-2-4-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"projpred 2.4.0","text":"Fix bug offsets cases family (see init_refmodel()) non-identity link function: clustering reference model’s posterior draws, need aggregate (within given cluster) reference model’s fitted values already take offsets account instead taking offsets account aggregating fitted values take offsets account. fix affect results slight manner. Due projpred’s internal adjustment numerical stability averaging quantity across draws within given cluster, also changes projected residual standard deviations Gaussian models order 1e-10. (GitHub: #374)","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"projpred-230","dir":"Changelog","previous_headings":"","what":"projpred 2.3.0","title":"projpred 2.3.0","text":"CRAN release: 2023-01-10","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"major-changes-2-3-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"projpred 2.3.0","text":"plot.vsel() summary.vsel(), default alpha = 0.32 replaced alpha = 2 * pnorm(-1) (= 1 - diff(pnorm(c(-1, 1))), approximately 0.32) now, normal-approximation confidence interval default alpha stretches exactly one standard error either side point estimate. Typically, changes results slightly. cases, however, new default may lead different suggested size, explaining regarded major change. (GitHub: #371)","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"minor-changes-2-3-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"projpred 2.3.0","text":"deprecated function ggplot2::aes_string() used anymore, thereby avoiding occasional soft-deprecation warning thrown ggplot2 3.4.0. (GitHub: #367) KL divergence reference model submodel simplified corresponding cross-entropy (.e., reference model’s entropy dropped), caveats described documentation output element ce project(). reason change former KL divergence assumed reference model’s family submodel’s family, need case custom reference models. user-facing change users discouraged make use specific output elements (like former element kl objects class projection vsel) directly. (GitHub: #369) Improvements documentation (especially argument family init_refmodel() get_refmodel.default()).","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"projpred-222","dir":"Changelog","previous_headings":"","what":"projpred 2.2.2","title":"projpred 2.2.2","text":"CRAN release: 2022-11-09","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"major-changes-2-2-2","dir":"Changelog","previous_headings":"","what":"Major changes","title":"projpred 2.2.2","text":"Several important bug fixes (see ).","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"minor-changes-2-2-2","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"projpred 2.2.2","text":"Improvements documentation vignette, especially emphasize generality reference model object resulting get_refmodel() init_refmodel() (thereby also distinguishing clearly “typical” “custom” reference model objects) () description several arguments get_refmodel() init_refmodel(), (ii) sections “Reference model” “Supported types models” vignette. (GitHub: #357, #359, #364, #365, #366) Minor improvement terms efficiency validate_search = FALSE case cv_varsel(). Improvement terms efficiency case forward search custom search_terms (least instances), also affecting output solution_terms(<vsel_object>) cases. (GitHub: #360; thanks @sor16) Update Catalina et al. (2020) Catalina et al. (2022). (GitHub: #364)","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"bug-fixes-2-2-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"projpred 2.2.2","text":"Fix bug causing offsets taken account appropriately calculating PSIS weights (used submodels) validate_search = FALSE case cv_varsel(). bug introduced v2.2.0 (existed —including—v2.2.1). Fix (long-standing) bug causing offsets taken account appropriately calculating predictive variances reference model dispersion parameter non-identity link function. (GitHub: #186 (partly), #355) Fix (long-standing) bug causing offsets taken account appropriately calculating reference model’s summary statistics case cv_varsel() cv_method = \"LOO\" (precisely, LOO posterior predictive expected values <vsel_object>$summaries$ref$mu affected, (pointwise) LOO log posterior predictive density values <vsel_object>$summaries$ref$lppd). (GitHub: #186 (partly), #356) Fix (long-standing) bug leading error trying use cv_varsel() custom search_terms (instances). (GitHub: #345, #360; thanks @sor16)","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"projpred-221","dir":"Changelog","previous_headings":"","what":"projpred 2.2.1","title":"projpred 2.2.1","text":"CRAN release: 2022-09-20","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"minor-changes-2-2-1","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"projpred 2.2.1","text":"Several improvements documentation. RMSE well AUC (see argument stats summary.vsel()), bootstrapping results now also used inferring lower upper confidence interval bounds. (GitHub: #318, #347; thanks @awd97 @VisionResearchBlog) datafits, offsets supported anymore. (GitHub: #186 (partly), #351)","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"bug-fixes-2-2-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"projpred 2.2.1","text":"Fix GitHub issue #348 (L1 search presence interaction terms). bug introduced v2.1.0 (existed —including—v2.2.0). Fix incorrectly thrown messages case datafits (—unlikely—cases nclusters == S S <= 20, S denoting number draws reference model). Fix GitHub issue #349 (concerned datafits). (GitHub: #350)","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"projpred-220","dir":"Changelog","previous_headings":"","what":"projpred 2.2.0","title":"projpred 2.2.0","text":"CRAN release: 2022-08-19","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"major-changes-2-2-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"projpred 2.2.0","text":"validate_search = FALSE case cv_varsel() (cv_method = \"LOO\"), PSIS weights now calculated based reference model (used calculated based submodels incorrect). (GitHub: #325) long-standing severe bugs (GitHub issues #329, #330, #342) fixed, concerning performance evaluation models nontrivial observation weights (.e., models least one observation weight differing 1). Concerned performance statistics \"mse\", \"rmse\", \"acc\" (= \"pctcorr\"), \"auc\" (.e., performance statistics except \"elpd\" \"mlpd\"). plot.vsel() suggest_size() gain new argument thres_elpd. default, argument doesn’t impact, non-NA value can used customized model size selection rule (see ?suggest_size details). (GitHub: #335)","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"minor-changes-2-2-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"projpred 2.2.0","text":"Several improvements documentation (especially explanation suggest_size() heuristic). Improvement numerical stability link functions, achieved avoiding unnecessary back--forth transformations latent space response space. (GitHub: #337, #338) arguments seed .seed now allowed NA calling set.seed() internally . Argument d_test varsel() considered internal feature anymore. possible fixing bug d_test (see ). (GitHub: #341) order observations sub-elements <vsel_object>$summaries <vsel_object>$d_test now corresponds order observations original dataset <vsel_object> created call cv_varsel(<...>, cv_method = \"kfold\") (formerly, case, observations sub-elements ordered fold). Thereby, order observations sub-elements now always corresponds order observations original dataset, except <vsel_object> created call varsel(<...>, d_test = <non-NULL_d_test_object>), case order observations sub-elements corresponds order observations <non-NULL_d_test_object>. (GitHub: #341)","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"bug-fixes-2-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"projpred 2.2.0","text":"Fix GitHub issue #324 (large search_terms caused R session crash). Fix GitHub issue #204. (GitHub: #325) Fix validate_search = FALSE bug described “Major changes”: PSIS weights now calculated based reference model (used calculated based submodels incorrect). (GitHub: #325) Fix \\mbox{} commands displayed incorrectly HTML help R version 4.2.0 . (GitHub: #326) Fix GitHub issue #329 (see also “Major changes” ). Fix GitHub issue #331. plot.vsel() now draws dashed red horizontal line reference model (—present—dotted black horizontal line baseline model) first (.e., submodel-specific graphical elements), avoid overplotting. Fix GitHub issue #339. (GitHub: #340) Fix argument d_test varsel(): predictive performance reference model needs evaluated test data, also predictive performance submodels. (GitHub: #341) Fix GitHub issue #342 (see also “Major changes” ). Fix GitHub issue #330 (see also “Major changes” ). (GitHub: #344, commit 23e7101)","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"projpred-212","dir":"Changelog","previous_headings":"","what":"projpred 2.1.2","title":"projpred 2.1.2","text":"CRAN release: 2022-05-13","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"minor-changes-2-1-2","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"projpred 2.1.2","text":"Account changes concerning handling offsets rstanarm version 2.21.3. particular, issue stan-dev/rstanarm#542 fixed rstanarm 2.21.3. Show output vignette CRAN. vignette, use cv_varsel() LOO CV validate_search = FALSE instead K-fold CV. (GitHub: #305) Improve documentation argument search_terms varsel() cv_varsel(). (GitHub: #155, #308) case user-specified (non-NULL) search_terms, method = NULL internally changed method = \"forward\" method = \"L1\" throws warning. done search_terms takes effect case forward search. (GitHub: #155, #308) Internally, intercept now always included search_terms. necessary prevent bug described . (GitHub: #308) fitting multilevel submodels via lme4, projpred now tries handle PIRLS loop resulted NaN value errors automatically. (GitHub: #314) fix GitHub issue #320 (see ) required rename argument b projpred:::bootstrap() B.","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"bug-fixes-2-1-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"projpred 2.1.2","text":"Throw informative error message case special group-level terms currently supported (particular, nested ones). Previously, using search_terms vector excluded intercept conjunction refit_prj = FALSE (latter project(), varsel(), cv_varsel()) led incorrect submodels fetched search error . fixed now internally forcing inclusion intercept search_terms. (GitHub: #308) Fix GitHub issues #147 #202. (GitHub: #312) Fix GitHub issue #320. (GitHub: #321)","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"projpred-211","dir":"Changelog","previous_headings":"","what":"projpred 2.1.1","title":"projpred 2.1.1","text":"CRAN release: 2022-04-03","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"bug-fixes-2-1-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"projpred 2.1.1","text":"Fix order package authors. Fix failing CRAN checks. Add input check argument solution_terms project() fix test failure R versions >= 4.2.","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"projpred-210","dir":"Changelog","previous_headings":"","what":"projpred 2.1.0","title":"projpred 2.1.0","text":"CRAN release: 2022-04-01","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"major-changes-2-1-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"projpred 2.1.0","text":"Added support weighted LOO proportional--size subsampling based Magnusson et al. (2019). However, subsampled PSIS-LOO CV currently regarded experimental. Therefore, corresponding warning thrown calling cv_varsel() nloo < n n denotes number observations. (GitHub: #94, #252, commit feea39e) Automatically explore linear smooths components GAM models. allows user gauge impact smooth term linear counterpart. Fast approximate LOO computation validate_search = FALSE cv_varsel(). Formerly, defaults arguments nclusters (= 1) nclusters_pred (= 5) varsel() cv_varsel() set internally (user-visible defaults NULL). Now, nclusters ndraws_pred (note ndraws_pred, nclusters_pred) non-NULL user-visible defaults 20 400, respectively. general, increases runtime functions lot. respect cv_varsel(), new vignette (see vignettes) mentions two ways quickly obtain rough preliminary results general used final results, though: () varsel() (ii) cv_varsel() validate_search = FALSE (takes effect cv_method = \"LOO\"). (GitHub: #291 several commits beforehand, particular bbd0f0a, babe031, 4ef95d3, ce7d1e0) proj_linpred() proj_predict(), arguments nterms, ndraws, seed removed allow user pass project(). New arguments filter_nterms, nresample_clusters, .seed introduced (see documentation details). (GitHub: #92, #135) Reference models lacking intercept supported anymore (actually, previous implementation models incomplete). Support might re-introduced future (fixed), now withdrawn requires larger changes. (GitHub: #124, see also #96 #100) output proj_linpred(), dimensions dropped anymore (.e., output elements pred lpd always S x N matrices now). (GitHub: #143) case integrated = TRUE, proj_linpred() now averages LPD (across projected posterior draws) instead taking LPD averaged linear predictors. (GitHub: #143) newdata contain response variable, proj_linpred() now returns NULL output element lpd. (GitHub: #143) fix offset issues (listed “Bug fixes”) requires reference model fits class stanreg (package rstanarm) offsets offsets specified via offset() term model formula (via argument offset). Improved handling errors fitting multilevel submodels. (GitHub: #201) defaults changed NULL user-visible value (NULL allowed anymore). Argument data get_refmodel.stanreg() removed. (GitHub: #219) function passed argument div_minimizer init_refmodel() now always needs return list submodels (see documentation details). Correspondingly, function passed argument proj_predfun init_refmodel() can now always expect list input argument fits (see documentation details). (GitHub: #230) function passed argument proj_predfun init_refmodel() now always needs return matrix (see documentation details). (GitHub: #230) projection can run parallel now. However, recommend kinds platforms kinds models. information, see general package documentation available ?`projpred-package`. (GitHub: #235) Support Student_t() family regarded experimental. Therefore, corresponding warning thrown creating reference model. (GitHub: #233, #252) Support additive models (.e., GAMs GAMMs) regarded experimental. Therefore, corresponding warning thrown creating reference model. (GitHub: #237, #252) Support Gamma() family regarded experimental. Therefore, corresponding warning thrown creating reference model. (GitHub: paul-buerkner/brms#1255, #240, #252) previous behavior init_refmodel() case argument dis NULL (default) dangerous custom reference models family dispersion parameter (case, dis values -zeros used silently). new behavior now requires non-NULL argument dis case. (GitHub: #254) Argument cv_search renamed refit_prj. (GitHub: #154, #265) .matrix.projection() gained new argument nm_scheme allows choose naming scheme column names returned matrix. default (\"auto\") follows naming scheme reference model fit (uses \"rstanarm\" naming scheme reference model fit unknown class). (GitHub: #82, #279) seed (.seed) arguments now default sample.int(.Machine$integer.max, 1) instead NULL. Furthermore, value supplied arguments now used generate new seeds internally --fly. many cases, change results compared older projpred versions. Also note now, internal seeds never fixed specific value seed (.seed) arguments set NULL. (GitHub: #84, #286)","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"minor-changes-2-1-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"projpred 2.1.0","text":"Improved summary output important details. group-level effects, .matrix.projection() method now also returns estimated group-level effects . (GitHub: #75) group-level effects, .matrix.projection() method now returns variance components (population SD(s) population correlation(s)) instead empirical SD(s) group-level effects. (GitHub: #74) Improved documentation. (GitHub: especially #233) Replaced two vignettes single one also new content. (GitHub: #237) Updated README file. (GitHub: #245) error warning messages improved added. (GitHub: especially #219, #221, #223, #252, #263) K-fold cross-validation, internally hard-coded value 5 nclusters_pred removed. (GitHub: commit 5062f2f) Throw proper error message unsupported families. (GitHub: #140) Show README also CRAN website. (GitHub: #140) project(): Warn elements solution_terms found reference model (therefore ignored). (GitHub: #140) get_refmodel.default() now passes arguments via ellipsis (...) init_refmodel(). (GitHub: #153, commit dd3716e) Remove dependency package rngtools (version 2.0.0 projpred re-introduced dependency already removed version 1.1.2). (GitHub: #189) init_refmodel(): default (NULL) argument extract_model_data removed wasn’t meaningful anyway. (GitHub: #219) Argument folds init_refmodel() removed effectively unused. (GitHub: #220) Use S3 system solution_terms(). allowed introduction solution_terms.projection() method. (GitHub: #223) predict.refmodel() now uses default newdata = NULL. (GitHub: #223) Argument weights init_refmodel()’s argument proj_predfun removed. (GitHub: #163, #224) projpred’s internal div_minimizer functions unified single div_minimizer chooses appropriate submodel fitter based formula submodel, based reference model. Furthermore, automatic handling errors submodel fitters improved. (GitHub: #230) Improve axis labels plot.vsel(). (GitHub: #234, #270) Handle rstanarm’s GitHub issue #551. implies projpred’s default cvfun stanreg fits now always use inner parallelization rstanarm::kfold.stanreg() (.e., across chains, across CV folds), getOption(\"mc.cores\", 1) cores. systems (Windows). (GitHub: #249) Argument fit init_refmodel()’s argument proj_predfun renamed fits. non-breaking change since calls proj_predfun projpred argument unnamed. However, guaranteed future, strongly encourage users custom proj_predfun rename argument fit fits. (GitHub: #263) init_refmodel() gained argument cvrefbuilder may custom function constructing K reference models K-fold CV. (GitHub: #271) Allow arguments passed project(), varsel(), cv_varsel() divergence minimizer. (GitHub: #278) init_refmodel(), contrasts attributes dataset’s columns silently removed. (GitHub: #284) NAs data supplied newdata arguments now trigger error. (GitHub: #285)","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"bug-fixes-2-1-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"projpred 2.1.0","text":"Fixed bug .matrix.projection() (causing incorrect column names returned matrix). (GitHub: #72, #73) Fixed bug raising error projecting vsel object. (GitHub: #79, #80) Fixed bug calculation Gaussian deviance. (GitHub: #81) Fixed bug calculation predictive statistics reference model test data varsel(). (GitHub #90) Fixed bug input check argument nloo cv_varsel(). (GitHub: #93) Fixed bug cv_varsel(), causing error case !validate_search && cv_method != \"LOO\". (GitHub: #95) Fixed bugs related setting seed. (GitHub: commit 02cd50d) Fixed bug causing proj_linpred() raise error argument newdata NULL. (GitHub: #97) Fixed incorrect usage dispersion parameter values calculating output element lpd proj_linpred() (integrated = TRUE well integrated = FALSE). (GitHub: #105) Fixed bugs proj_linpred()’s calculation output element lpd (integrated = TRUE). (GitHub: #106, #112) Fixed inconsistency dimensions proj_linpred()’s output elements pred lpd (integrated = FALSE): Now, S x N matrices, S denoting number (possibly clustered) posterior draws N denoting number observations. (GitHub: #107, #112) Fixed bug causing proj_predict()’s output matrix transposed case nrow(newdata) == 1. (GitHub: #112) Fixed bug using weights offsets e.g. proj_linpred(). (GitHub: #114) Fixed bug causing varsel()/make_formula fail multidimensional interaction terms. (GitHub: #102, #103) Fixed indexing bug cv_varsel() models single predictor. (GitHub: #115) Fixed bugs argument nterms proj_linpred() proj_predict(). (GitHub: #110) Fixed inconsistency intercept-submodels. (GitHub: #119) Fix bug .matrix.projection() case 1 (clustered) draw projection. (GitHub: #130) submodels class subfit, make column names .matrix.projection()’s output matrix consistent classes submodels. (GitHub: #132) Fix bug argument nterms_max plot.vsel() just intercept-submodel. (GitHub: #138) Throw appropriate error message trying apply L1 search empty (.e. intercept-) reference model. (GitHub: #139) Fix list names element search_path , e.g., varsel()’s output. (GitHub: #140) Fix bug (error unused argument) initializing K reference models K-fold CV CV fits class brmsfit stanreg. (GitHub: #140) get_refmodel.default(), remove old defunct arguments fetch_data, wobs, offset. (GitHub: #140) Fix bug get_refmodel.stanreg(). (GitHub: #142, #184) Fix possible bug related extract_model_data()’s argument extract_y get_refmodel.default(). (GitHub: #153, commit 39fece8) Fix possible bug related extract_model_data() K-fold CV. (GitHub: #153, commit 4f32195) Fix GitHub issue #161. Fix GitHub issue #162. Fix GitHub issue #164. Fix GitHub issue #160. Fix GitHub issue #159. Fix GitHub issue #158. Fix GitHub issue #157. Fix GitHub issue #144. Fix GitHub issue #146. Fix GitHub issue #169. Fix GitHub issue #167. Fix bug default proj_predfun() GLMMs. (GitHub: #174) Fix GitHub issue #171. Fix GitHub issue #172. Fix bug default proj_predfun() datafits. (GitHub: #177) Fix names summary.vsel()$selection objects class vsel created varsel(). (GitHub: #179) Fix forward search search_terms consecutive size. (GitHub: commit 34e24de) Fix bug cv_varsel()$pct_solution_terms_cv. (GitHub: #188, commit e529ec1) Fix GitHub issue #185. (GitHub: #193, #194) Fix bug forward searches interaction terms. (GitHub: #191) Fix offset issues. (GitHub: #196, #203, #228) Fix bug glm_elnet() (workhorse L1 search), causing grid lambda constructed without taking observation weights account. (GitHub: #198; note second part #198 consequences users) Fix GitHub issue #136. (GitHub: #221) Fix bug print.vsel() causing argument digits ignored. (GitHub: #222) Fix bug causing default argument cv_search varsel() cv_varsel() TRUE datafits, although FALSE case. (GitHub: #223) Fix bug (Error: Levels '<...>' grouping factor '<...>' found fitted model. Consider setting argument 'allow_new_levels' TRUE.) predicting submodels GLMMs newdata containing new levels grouping factors. (GitHub: #223) predict.refmodel(): Fix bug integer ynew. (GitHub: #223) predict.refmodel(): Fix input checks offsetnew weightsnew. (GitHub: #223) calls extract_model_data(), weights offsets now checked length 0 (yes, set vectors ones zeros, respectively). important extract_model_data() functions return weights offsets length 0 (see, e.g., brms version <= 2.16.1). (GitHub: #223) Handle rstanarm’s GitHub issue #546. (GitHub: #227) Fix bug causing internal submodel fitter GLMMs pass arguments var (predictive variances) regul (amount ridge regularization) internal submodel fitter GLMs. (GitHub: #230) Fix GitHub issue #210. (GitHub: #234) Fix GitHub issue #242. (GitHub: #253) Fix GitHub issue #244. (GitHub: #255) Fix GitHub issue #243. (GitHub: #262) Fix GitHub issue #213. (GitHub: #264) Fix GitHub issue #215. (GitHub: #266) Fix GitHub issue #212. (GitHub: #267) Fix GitHub issue #156. (GitHub: #269) data used reference model contains NAs, appropriate error now thrown. Previously, reference model created successfully, caused opaque errors downstream code project(). (GitHub: #274) Fix GitHub issue #268. (GitHub: #287) Fix GitHub issue #149. (GitHub: #288)","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"projpred-202","dir":"Changelog","previous_headings":"","what":"projpred 2.0.2","title":"projpred 2.0.2","text":"CRAN release: 2020-10-28 fully rewritten internals several ways. importantly, now leverage maximum likelihood estimation third parties depending reference model’s family. allows lot flexibility extensibility various models. Functionality wise, major updates since last release : Added support GLMMs GAMMs via lme4 gamm4. Formula syntax support internally allows easier building upon projections. Thanks point, save computation considering sensible projections forward search instead fitting every possible submodel. added new argument search_terms allows user specify custom unit building blocks projections. New vignette coming . fully changed way define custom reference models. user now provides projection fitting prediction functions (information new upcoming vignette).","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"projpred-114","dir":"Changelog","previous_headings":"","what":"projpred 1.1.4","title":"projpred 1.1.4","text":"CRAN release: 2019-10-02 Better validation function arguments.","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"projpred-113","dir":"Changelog","previous_headings":"","what":"projpred 1.1.3","title":"projpred 1.1.3","text":"Added print methods vsel cvsel objects. Added AUC statistics binomial family. additional minor patches.","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"projpred-112","dir":"Changelog","previous_headings":"","what":"projpred 1.1.2","title":"projpred 1.1.2","text":"CRAN release: 2019-05-31 Removed dependency rngtools package.","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"projpred-111","dir":"Changelog","previous_headings":"","what":"projpred 1.1.1","title":"projpred 1.1.1","text":"CRAN release: 2019-03-12 version contains patches, new features user.","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"projpred-110","dir":"Changelog","previous_headings":"","what":"projpred 1.1.0","title":"projpred 1.1.0","text":"CRAN release: 2018-10-23","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"new-features-1-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"projpred 1.1.0","text":"Added support brms models.","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"bug-fixes-1-1-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"projpred 1.1.0","text":"program crashed rstanarm models fitted syntax like stan_glm(log(y) ~ log(x), ...), , allow transformation y.","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"projpred-100","dir":"Changelog","previous_headings":"","what":"projpred 1.0.0","title":"projpred 1.0.0","text":"CRAN release: 2018-09-18","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"new-features-and-improvements-1-0-0","dir":"Changelog","previous_headings":"","what":"New features and improvements","title":"projpred 1.0.0","text":"Changed internals now fit objects (rstanarm fits) converted refmodel-objects using generic get_refmodel-function, functions use object. makes much easier use projpred reference models writing new get_refmodel-function. syntax now changed varsel cv_varsel return object similar structure always, reference model stored object. Added examples vignette. Added possibility change baseline plot/summary. Now possible compare also best submodel found, reference model. Bug fix: RMSE previously computed wrong, now fixed. Small changes: nloo = n default cv_varsel. regul=1e-4 now default functions.","code":""},{"path":[]},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"new-features-and-improvements-0-9-0","dir":"Changelog","previous_headings":"","what":"New features and improvements","title":"projpred 0.9.0","text":"Added cv_search argument main functions (varsel,cv_varsel,project prediction functions). Now possible make predictions also parameter estimates computed L1-penalized search. change also allows user compute Lasso-solution providing observed data ‘reference fit’ init_refmodel. example added vignette.","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"bug-fixes-0-9-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"projpred 0.9.0","text":"projection nonzero regularization parameter value produce exactly correct result, although difference correct result often small user see difference. Fixed .","code":""},{"path":"https://mc-stan.org/projpred/dev/news/index.html","id":"projpred-080-and-earlier","dir":"Changelog","previous_headings":"","what":"projpred 0.8.0 and earlier","title":"projpred 0.8.0 and earlier","text":"CRAN release: 2018-04-16 version, keep record changes different versions. Started version 0.9.0 onwards.","code":""}]
